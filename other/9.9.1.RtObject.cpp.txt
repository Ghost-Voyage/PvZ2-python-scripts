RtObject ?
	<NONE>
	ZombieJitterOffsets 00C
		$ ZombieSpawningOffsetIncrement : int32
		$ ZombieSpawningRandomJitter : int32
	ServerConfig 028
		$ ip : std::string
		$ fb_app_id : std::string
		$ fb_permissions : std::string
	CDNConfig 014
		$ ip : std::string
		$ timeout : int32
	AuthServerConfig 010
		$ ip : std::string
	JoustServerConfig 034
		$ dev : std::string
		$ live : std::string
		$ future : std::string
		$ test : std::string
	MetricsServerConfig 040
		$ CopernicusURL : std::string
		$ Environment : std::string
		$ GATSURL : std::string
		$ GATSEnvironment : std::string
		$ GATSConditions : std::vector<std::string>
	MagentoServerConfig 014
		$ RVSURL : std::string
		$ IsSandbox : bool
	DraperConfig 010
		$ DraperURL : std::string
	AccountDeletionServerConfig 01C
		$ webURL : std::string
		$ gameURL : std::string
	RiftIncompleteMatchData 020
		$ ZombossAttempt : int32
		$ LevelName : std::string
		$ RiftEventID : uint64
		$ LevelType : RiftIncompleteLevelType
	LevelPurchasesData 008
		$ PurchasedSeedSlot : bool
	GameObjectDictionary 004
		AttachedEffectManager 010
			$ m_nodes : std::vector<AttachedEffect>
		AttachedBoardEntityManager 010
			$ m_nodes : std::vector<AttachedBoardEntityNode>
			- AttachedBoardEntityNode
		- AttachedGameObjectNode
			$ m_name : std::string
			$ m_object : RtWeakPtr<RtObject>
		- AttachedBoardEntityNode
			<NONE>
		- AttachedEffect
			$ m_updateMethod : int32
			$ m_loopAnimName : std::string
			$ m_loopDelayRange : ValueRange
			$ m_loopDelay : float
			$ m_staticScale : float
			$ m_dynamicScale : float
	GameStateTransitionController ?
		<NONE>
	BoardEntityScaledPropsSerializer ?
		<NONE>
		- BoardEntityScaledPropsEntry
			$ Key : std::string
			$ Formula : BoardEntityScaling::Formula
			$ Arg1 : float
			$ Arg2 : float
	Cheat ?
		<NONE>
		CheatToggle ?
			<NONE>
			CheatToggleAction ?
				<NONE>
			CheatRadioToggle ?
				<NONE>
			CheatGameTogglePlayerSegmentCommand ?
				<NONE>
			CheatGameToggleCostumeCommand ?
				<NONE>
			CheatGameUnlockPlantCommand ?
				<NONE>
			CheatGameFeatureToggle ?
				<NONE>
			CheatGameProfileLockToggle ?
				<NONE>
			CheatLODHolidayToggle ?
				<NONE>
			CheatGameExtendedUnlockToggle ?
				<NONE>
			CheatLiveConfigToggle ?
				<NONE>
			CheatGameChangePlantBoostCommand ?
				<NONE>
			CheatCompleteQuest ?
				<NONE>
			CheatGameToggleQuestInProfile ?
				<NONE>
			CheatToggleTutorialCompletionInProfile ?
				<NONE>
			CheatAutomationInserterToggle ?
				<NONE>
			CheatToggleForceLevelGenEvent ?
				<NONE>
		CheatCommand ?
			<NONE>
			CheatGameSelectPlantForLevelingCommand ?
				<NONE>
			CheatGameSpawnZombieCommand ?
				<NONE>
			CheatGameSpawnCreatureCommand ?
				<NONE>
			CheatGameSpawnCollectable ?
				<NONE>
			CheatGameSpawnCollectableSeedPacket ?
				<NONE>
			CheatGameSpawnCollectableSeedPacketXP ?
				<NONE>
			CheatGameLoadSavedGame ?
				<NONE>
			CheatGameStartLevelCommand ?
				<NONE>
			CheatGameLoadHotUICommand ?
				<NONE>
			CheatGameSpawnPlantCommand ?
				<NONE>
			CheatGameSpawnPlantOnCursorCommand ?
				<NONE>
			CheatGameStartNarrative ?
				<NONE>
			CheatGameVersion ?
				<NONE>
			CheatGameActivateExtendedUnlocks ?
				<NONE>
			CheatGameUnlockToEvent ?
				<NONE>
			CheatGameUnlockSpecificWorldToEvent ?
				<NONE>
			CheatGameSetNextSproutIDCommand ?
				<NONE>
			CheatGameSpringBeanLoader ?
				<NONE>
			CheatGameWorldSpringBeanLoader ?
				<NONE>
			CheatGameSpringBeanLoaderList ?
				<NONE>
			CheatAddQuest ?
				<NONE>
			CheatChangeDamageResistanceForFamily ?
				<NONE>
			CheatChangeConditionResistanceForFamily ?
				<NONE>
			CheatResetResistancesForFamily ?
				<NONE>
			CheatCopyLogToClipboard ?
				<NONE>
	QuestData 0E0
		$ Priority : QuestPriority
		$ UniqueID : std::string
		$ QuestName : std::string
		$ Description : std::string
		$ FeatureItemAndroid : std::string
		$ FeatureItemIOS : std::string
		$ Repeatable : bool
		$ Disabled : bool
		$ Slot : QuestSlot
		$ Prerequisites : QuestPrerequisites
		$ QuestsToResetOnCompletion : std::vector<std::string>
		$ CompletionAwards : GeneralAwardSet
		$ OverrideQuestTheme : std::string
		$ QuestCategory : std::string
		$ OverridePanelImage : std::string
		$ OverrideClaimedBorderImage : std::string
		LevelGenLevelQuestData 120
			$ ForceSeed : std::string
			$ SeedMin : int32
			$ SeedMax : int32
			$ WorldConfigs : std::vector<std::string>
			$ LevelParams : LevelGenLevelParams
		BaseActionCountQuestData 0FC
			$ ActionsToPerform : int32
			$ Levels : std::vector<std::string>
			$ CountRemainingLabel : std::string
			ActionInflictZombieConditionQuestData 10C
				$ ConditionToInflict : std::vector<ZombieConditions>
				$ IncludeBurnedToAsh : bool
				$ IncludeElectrified : bool
			KnockbackZombiesQuestData 104
				$ AllowPlantKnockback : bool
				$ AllowPlantFlickOffScreen : bool
				$ AllowPlantBlowOffScreen : bool
				$ AllowPowerupKnockback : bool
				$ AllowPowerupFlickOffScreen : bool
			SeedPacketsCollectedQuestData 108
				$ PlantName : std::string
			PlayXDistinctWorldYLevelsQuestData 108
				$ World : std::string
			ClaimXJoustFreePlaysQuestData 0FC
			AdsViewedQuestData 0FC
			BeatXAdventureLevelsQuestData 0FC
			PlantSeedInZenGardenQuestData 100
				$ ActionsToPerform : int32
			CollectPlantInZenGardenQuestData 100
				$ ActionsToPerform : int32
			BuyItemFromZenGardenStoreQuestData 100
				$ ActionsToPerform : int32
		CompleteLevelXTimesQuestData 0F0
			$ LevelName : std::string
			$ NeededWinCount : int32
		EpicQuestData 0EC
			$ UniqueIDList : std::vector<std::string>
			MultiStageQuestData 0EC
		HuntQuestData 108
			$ SubQuestIDList : std::vector<std::string>
			$ SubQuestBaseCount : int32
			$ SubQuestGameFeatureUnlocks : std::vector<GameFeature>
			$ GemRefreshCost : int32
			$ MaxTimesToRefreshAllWithGems : int32
			$ MaxTimesToRefreshSlotWithAd : int32
		PinataHuntChildQuestData 0E0
		PassiveQuestData 0E0
		PlantQuestData 0EC
			$ PlantTypeName : std::string
		LevelQuestData 0EC
			$ LevelName : std::string
		UnlockWorldQuestData 0EC
			$ WorldName : std::string
		ChallengeLevelQuestData 0F0
			$ Difficulty : int32
			$ LevelName : std::string
			JoustPracticeQuestData 0F0
		ChosenZombiesKillCountQuestData 0F8
			$ ZombiesToKill : std::vector<ZombieKillCount>
			$ Levels : std::vector<std::string>
			FeastivusQuestData 0F8
			- ZombieKillCount
				$ ZombieTypeNames : std::vector<std::string>
				$ ZombieCount : int32
		CompleteRandomLevelQuestData 0EC
			$ Levels : std::vector<std::string>
		DailyActivitiesQuestData 0E0
		PlayLevelOfTheDayQuestData 0EC
		BuyProductQuestData 0EC
			$ SKUs : std::vector<std::string>
		ChosenPlantsLevelQuestData 104
			$ LevelName : std::string
			$ PresetPlants : std::vector<PresetPlantEntry>
			$ PresetSeedBankSelectionMethod : std::string
		RiftQuestCompleteAnyLevelData 0E4
			$ NeededRiftCompletionCount : int32
		WinSingleJoustMatchQuestData 0E0
		- PlantPrerequisite
			$ Name : std::string
			$ MustOwn : bool
			$ Above : bool
			$ Count : int32
			$ Level : int32
		- CurrencyPrerequisite
			$ Gems : int32
			$ Coins : int32
			$ Above : bool
		- InstallPrerequisite
			$ Days : int32
			$ Above : bool
		- QuestPrerequisites
			$ QuestUniqueIDs : std::vector<std::string>
			$ SpineLevelCompletions : std::vector<std::string>
			$ PlayerSegments : std::vector<std::string>
			$ PlantOwnership : std::vector<PlantPrerequisite>
			$ CurrencyOwnership : CurrencyPrerequisite
			$ InstallDays : InstallPrerequisite
			$ SpenderPrerequisite : bool
		- AwardEntry
			$ Type : AwardType
			$ SubType : std::string
			$ Amount : int32
		- GeneralAwardSet
			$ Awards : std::vector<AwardEntry>
	EventAlertManager ?
		<NONE>
	SlotPickLimitingGroup 01C
		$ ID : std::string
		$ NumToPickTotal : int32
		$ NumberOfMinutesTillNextPick : int32
		$ ForceRepickAllQuests : bool
	QuestLimitingMgr 010
		$ SlotPickLimitingGroups : std::vector<SlotPickLimitingGroup>
	RtObject ?
		<NONE>
	RtObject ?
		<NONE>
	BaseCursor ?
		<NONE>
		BananaTargetCursor ?
			<NONE>
		PlantfoodCursor ?
			<NONE>
		PacketCursor ?
			<NONE>
			ToolPacketCursor ?
				<NONE>
			PlantCursor ?
				<NONE>
		MissileToeTargetCursor ?
			<NONE>
		EscapeRootCursor ?
			<NONE>
		PlantLauncherTargetCursor ?
			<NONE>
		ShovelCursor ?
			<NONE>
	LawnStringsData 010
		$ LocStringValues : std::vector<std::string>
	PlantFramework 008
		PlantStatefulFramework 078
			% PlantState_CmdPropertyGet : *
			% PlantState_CmdPropertySet : *
			# PlantState : uint32
			PlantGrimrose 0A8
				$ m_previouslyTargetedZombiesForPF : std::set<RtWeakPtr<Zombie> >
				$ m_shadowStretcher : RtWeakPtr<ComponentVisualStretcher>
				$ m_targettedZombie : RtWeakPtr<Zombie>
				$ m_lastOpenedShadowPortal : RtWeakPtr<Effect_PopAnim>
				$ m_numTimesActivated : int32
			PlantPowerVine 094
				$ m_isNetworked : bool
				$ m_networkedPowerVines : std::vector<RtWeakPtr<Plant>>
		PlantLilyPad 00C
		PlantTangleKelp 018
			$ m_targettedZombie : RtWeakPtr<Zombie>
			$ m_numberOfZombiesAttacked : int32
		PlantBowlingBulb 01C
			$ m_lastCoconutCreation : float
			$ m_coconutOwned : std::vector<int>
			$ m_currentRegenOrder : BowlingBulbRegenOrder
		PlantGuacodile 008
		PlantBanana 010
			$ m_onlyTargetZombies : bool
			$ m_fireIgnoreBoardState : bool
		PlantSplitpea 040
			$ m_forwardPlantfood : PeashooterPlantfood
			$ m_backwardPlantfood : PeashooterPlantfood
		PlantChilibean 018
			$ m_PFSpawnedBeans : std::vector<RtWeakPtr<Plant>>
		PlantPeapod 00C
			$ m_level : int32
		PlantLightningReed ?
			<NONE>
		PlantMelonpult 018
			$ m_targetedBoardEntities : std::vector<RtWeakPtr<BoardEntity> >
			$ m_timesSpecialFired : int32
			PlantWinterMelon ?
				<NONE>
		PlantWallnut 010
			$ m_shield : RtWeakPtr<Shield>
			PlantTallnut 010
			PlantPrimalWallnut 010
			PlantExplodeONut 020
				$ m_explodeRadius : RtWeakPtr<ComponentDamageRadius>
				$ m_currentBeepCount : int32
			PlantExplodeOVine 020
				$ m_explodeRadius : RtWeakPtr<ComponentDamageRadius>
				$ m_isInvincible : bool
				$ m_smashShouldKillPlant : bool
		PlantSunflower 010
			$ m_plantFoodSunsToSpawn : int32
			$ m_resetToInitial : bool
			PlantSunshroom 01C
				$ m_swapForOtherPlantTime : float
				$ m_growthPauseStartTime : float
				$ m_currentGrowthStage : uint8
			PlantTwinSunflower 010
		PlantPuffshroom 040
			$ m_futurePlantfoodFromColony : std::vector<pvztime_t>
			$ m_plantfood : PeashooterPlantfood
			$ m_usePlantfoodShine : bool
			$ m_decayStartTime : float
			$ m_decayPauseStartTime : float
			$ m_decayStage : int32
		PlantFumeshroom 024
			$ m_plantfoodPushedZombies : std::vector<RtWeakPtr<Zombie>>
			$ m_hasStartedPlantfoodAttack : bool
			$ m_plantfoodDamageApplied : float
			$ m_plantfoodNextHitEffect : float
			$ m_plantfoodAttackDuration : float
		PlantSunBean 00C
			$ m_isSuperSized : bool
		PlantMagnetShroom 048
			$ m_nextTargetSearchTime : float
			$ m_startThrowingTime : float
			$ m_doneWithPlantfood : bool
			$ m_pulledEntity : MagnetShroomPulledEntity
			$ m_plantfoodPulledEntities : std::vector<MagnetShroomPulledEntity>
			$ m_stateStartTime : float
			$ MagnetShroomState : int32
			- MagnetShroomPulledEntity
				$ PulledEntity : RtWeakPtr<RtObject>
				$ ImpartedVelocity : SexyVector3
		PlantPrimalPeashooter 008
		PlantPerfumeShroom ?
			<NONE>
		PlantPeashooter 024
			$ m_plantfood : PeashooterPlantfood
			PlantPeanut 028
				$ m_shieldHealth : float
			- PeashooterPlantfood
				$ m_shotsPerSecond : float
				$ m_startTime : float
				$ m_shotsFired : int32
				$ m_shotTotal : int32
				$ m_backwardsProjectiles : bool
		PlantPotatomine 028
			$ m_explodeRadius : RtWeakPtr<ComponentDamageRadius>
			$ m_PFSpawnedMines : std::vector<RtWeakPtr<Plant>>
			$ m_canUpdateArmingTime : bool
		PlantCabbagepult 008
		PlantBloomerang 020
			$ m_nextPlantfoodRoundTime : float
			$ m_plantfoodRounds : int32
			$ m_preventReturnAnimation : bool
			$ m_plantfoodSoundActive : bool
			$ m_plantfoodBoomerangs : std::vector<RtWeakPtr<RtObject> >
		PlantIceburg 018
			$ m_exploded : bool
			$ m_forceTargetZombie : RtWeakPtr<RtObject>
		PlantGraveBuster 028
			$ m_busterState : int32
			$ m_busterEatTime : float
			$ m_busterEatEndTime : float
			$ m_busterFadeEndTime : float
			$ m_sheepStartedTime : float
			$ m_explodeRadius : RtWeakPtr<ComponentDamageRadius>
		PlantBonkchoy 018
			$ m_searchingLeft : bool
			$ m_plantfoodDamageEndTime : float
			$ m_attackAnimPlayed : int32
		PlantRepeater 024
			$ m_plantfood : PeashooterPlantfood
		PlantPhatBeet 020
			$ m_damageRadius : RtWeakPtr<ComponentDamageRadius>
			$ m_plantfoodDamageRadius : RtWeakPtr<ComponentDamageRadius>
			$ m_timeOfNextAttack : float
			$ m_attacksUntilPowerful : int32
		PlantCeleryStalker 018
			$ m_lastAttack : float
			$ m_PFSpawnedStalkers : std::vector<RtWeakPtr<Plant>>
		PlantThymeWarp 020
			$ m_warpingZombies : std::vector<RtWeakPtr<Zombie>>
			$ m_timeToStartWarpOut : float
			$ m_timeToStartDisapearing : float
			$ m_timeToStartWarpIn : float
		PlantGarlic 00C
			$ m_timeToStartGas : float
		PlantSporeshroom 020
			$ m_entitiesHitDuringPlantfood : std::vector<RtWeakPtr<BoardEntity>>
			$ m_nextPlantFoodTarget : RtWeakPtr<BoardEntity>
		PlantIntensiveCarrot 018
			$ m_plantTypeToRevive : RtWeakPtr<PlantType>
			$ m_plantBeingRevived : RtWeakPtr<Plant>
		PlantLaserBean 01C
			$ m_hitEntities : std::vector<RtWeakPtr<BoardEntity> >
			$ m_nextLaserDamageTime : float
			$ m_idlePostAttack : bool
			% onPlantFoodMainAnimStopped : *
		PlantBlover 018
			$ m_isBlowing : bool
			$ m_blownZombies : std::vector<RtWeakPtr<RtObject> >
		PlantCitron 008
		PlantEMPea 014
			$ m_affectedZombieTypes : std::vector<RtWeakPtr<RtObject> >
		PlantHolonut 014
			$ m_lastTookDamageTime : float
			$ m_hideStartTime : float
			$ m_regenerateAfterDeathCount : int32
		PlantMagnifyingGrass 080
			$ m_doingTapShot : bool
			$ m_sunSuckStartTime : float
			$ m_beamState : int32
			$ m_beamTargetPositionBoardSpace : SexyVector2
			$ m_beamCurrentPositionBoardSpace : SexyVector2
			$ m_originPivotPoint : SexyVector2
			$ m_previousBeamTarget : RtWeakPtr<RtObject>
			$ m_beamRig : RtWeakPtr<Effect_PopAnim>
			$ m_beamHitRig : RtWeakPtr<Effect_PopAnim>
			$ m_beamInRig : RtWeakPtr<Effect_PopAnim>
			$ m_beamOriginRig : RtWeakPtr<Effect_PopAnim>
			$ m_prismBeams : std::vector<PrismBeamTracker>
			$ m_lastPulseDamageApplied : int32
			$ m_lastBeamEnd : SexyVector2
			$ m_previousBeamEnd : SexyVector2
			$ m_sunSpentByGrass : int32
			$ m_touchEnabled : bool
			- PrismBeamTracker
				$ m_originatingPlant : RtWeakPtr<RtObject>
				$ m_targetMagnifyingGrass : RtWeakPtr<RtObject>
				$ m_color : Color
				$ m_startLoc : SexyVector3
				$ m_endLoc : SexyVector3
				$ m_startExtendTime : float
				$ m_endExtendTime : float
				$ m_startContractTime : float
				$ m_endContractTime : float
				$ m_startPulseTime : float
				$ m_endPulseTime : float
				$ m_playedContractionSound : bool
		PlantPowerPlant 00C
			$ m_createdTile : bool
		PlantGoldbloom 00C
			$ m_state : int32
		PlantElectricCurrant 020
			$ m_isPowered : bool
			$ m_nextAttack : float
			$ m_fenceGlow : RtWeakPtr<class Effect_PopAnim>
			$ m_fenceSystem : RtWeakPtr<ElectricCurrantFenceSystem>
		PlantKiwiBeast 020
			$ m_damageRadius : RtWeakPtr<ComponentDamageRadius>
			$ m_timeOfNextAttack : float
			$ m_damageTaken : float
			$ m_growthLevel : int32
		PlantAloe 00C
			$ m_canHealAfterTime : float
		PlantMarigold 008
		PlantSprout 020
			$ m_timePlanted : float
		PlantSunGun 024
			$ m_sunsClaimed : int32
			$ m_sunCurrencyClaimed : int32
			$ m_sunCurrencyCollected : int32
			$ m_pulledEntities : std::vector<MagnetShroomPulledEntity>
			$ SunGunState : int32
		PlantSunpod 00C
			$ m_level : int32
		PlantHotPotato 030
			$ m_state : HotPotatoState
			$ m_blockMeltingDuration : float
			$ m_blockMeltingEndTime : float
			$ m_startPosition : SexyVector3
			$ m_finalPosition : SexyVector3
			$ m_hasSpawnedPuddle : bool
		PlantPepperpult 020
			$ m_warmingRadius : RtWeakPtr<ComponentWarmingRadius>
			$ m_targetedBoardEntities : std::vector<RtWeakPtr<BoardEntity> >
			$ m_timesSpecialFired : int32
		PlantChardGuard 018
			$ m_playingAnim : int32
			$ m_currentLeafCount : int32
			$ m_currentFlipsPerLeaf : int32
			$ m_currentFlips : int32
		PlantStunion 00C
			$ m_hasShadow : bool
		PlantXShot 028
			$ m_shotsPerSecond : float
			$ m_startTime : float
			$ m_shotsFired : int32
			$ m_shotTotal : int32
			$ m_plantfoodShouldFire : bool
			$ m_potentialTargets : std::vector<RtWeakPtr<BoardEntity>>
		PlantRedStinger 018
			$ m_locState : int32
			$ m_prevColumn : int32
			$ m_plantfoodEffect : RtWeakPtr<Effect_PopAnim>
		PlantAkee 008
		PlantEndurian 014
			$ m_shieldHealth : float
			$ m_pfDamageHits : int32
			$ m_lastAttack : float
		PlantStallia 018
			$ m_exploded : bool
		PlantGoldLeaf 00C
			$ m_createdTile : bool
			$ m_hasShadow : bool
		PlantMoonFlower 020
			$ m_boostRadius : RtWeakPtr<ComponentConditionRadius>
			$ m_shield : RtWeakPtr<GridItemInfinutShieldSegment>
			$ m_moonflowerSystem : RtWeakPtr<MoonFlowerPoweredTilesSubsystem>
		PlantNightshade 014
			$ m_currentLeafCount : int32
			$ m_timeToRegenLeaf : float
			$ m_plantfooded : bool
		PlantShadowShroom 008
		PlantDusklobber 00C
			$ m_timesSpecialFired : int32
		PlantKernelpult 00C
			$ m_launchingButter : bool
		PlantSnapdragon 018
			$ m_breathBurst : RtWeakPtr<ComponentLinearBurst>
			$ m_warmingRadius : RtWeakPtr<ComponentWarmingRadius>
		PlantSpikeweed 024
			$ m_plantfoodSpikes : std::vector<RtWeakPtr<PopAnimRig> >
			$ m_zombiesBeingPulled : std::vector<RtWeakPtr<Zombie> >
			$ m_plantfoodSpikesActive : bool
			PlantSpikerock 028
				$ m_remainingSmashes : int32
		PlantSpringbean 00C
			$ m_playingAnim : int32
			% tossEnded : *
		PlantCoconutCannon 010
			$ m_hitRowBelow : bool
			$ m_needsTouchInitialization : bool
		PlantThreepeater 010
			$ m_nextPlantFoodShotTime : float
			$ m_plantFoodShotAngle : int32
		PlantCherryBomb ?
			<NONE>
		PlantIceweed 038
			$ m_hasBeenPlantfooded : bool
		PlantFirePeashooter 018
			$ m_plantfoodDamageEndTime : float
			$ m_warmingRadius : RtWeakPtr<ComponentWarmingRadius>
		PlantImitater 018
			$ m_imitatedPlant : RtWeakPtr<RtObject>
			$ m_startedSwapping : bool
		PlantJalapeno 01C
			$ m_explodedAtTime : float
			$ m_lastExplosionPropagationDistance : int32
			$ m_damagedEntities : std::vector<RtWeakPtr<RtObject>>
		PlantSnowPea 030
			$ m_plantfood : PeashooterPlantfood
			$ m_plantfoodEffect : RtWeakPtr<Effect_PopAnim>
		PlantHypnoShroom 008
		PlantSquash 048
			$ m_originalColumn : int32
			$ m_originalRow : int32
			$ m_startPos : SexyVector3
			$ m_endPos : SexyVector3
			$ m_plantfoodJumpsLeft : int32
			$ m_hitZombies : int32
			$ m_plantfoodEffect : RtWeakPtr<StandaloneEffect>
			$ m_targetZombie : RtWeakPtr<Zombie>
			$ m_remainingNormalZombies : int32
			$ m_returningHome : bool
		PlantTorchwood 040
			$ m_affectedProjectiles : std::vector<RtWeakPtr<Projectile> >
			$ m_warmingRadius : RtWeakPtr<ComponentWarmingRadius>
			$ m_lastAttack : float
			$ m_isInvincible : bool
			$ m_explodedAtTime : float
			$ m_lastExplosionPropagationDistance : int32
			$ m_flameAnimationComplete : bool
			$ m_damagedEntities : std::vector<RtWeakPtr<RtObject>>
		PlantPowerLily 00C
			$ m_spawningPlantFood : bool
			$ m_spawnedPlantFood : bool
		PlantStarFruit 018
			$ m_shotsPerSecond : float
			$ m_startTime : float
			$ m_shotsFired : int32
			$ m_shotTotal : int32
		PlantChomper 02C
			$ m_animStartTime : float
			$ m_suctionZombies : std::vector<RtWeakPtr<Zombie>>
			$ m_burpNudgedZombies : std::vector<RtWeakPtr<Zombie>>
			$ m_zombiesSuctioned : bool
			$ m_gobbledZombiesCount : int32
		PlantGhostPepper 01C
			$ m_lastAttackTime : float
			$ m_deathTime : float
			$ m_attackFog : std::vector<RtWeakPtr<GhostPepperAttackAnim>>
		PlantHomingThistle 030
			$ m_pfTargetIndex : int32
			$ m_pfShotIndex : int32
			$ m_pfTargets : std::vector<RtWeakPtr<BoardEntity>>
		PlantSweetPotato 008
			PlantHotDate 028
				$ m_isInvincible : bool
				$ m_explodedAtTime : float
				$ m_lastExplosionPropagationDistance : int32
				$ m_flameAnimationComplete : bool
				$ m_damagedEntities : std::vector<RtWeakPtr<RtObject>>
				$ m_warmingRadius : RtWeakPtr<ComponentWarmingRadius>
		PlantSapfling 008
		PlantHurrikale 01C
			$ m_isBlowing : bool
			$ m_isAnimating : bool
			$ m_blowStartTime : float
			$ m_blownZombies : std::vector<RtWeakPtr<RtObject> >
		PlantLavaGuava 028
			$ m_exploded : bool
			$ m_forceTargetZombie : RtWeakPtr<RtObject>
			$ m_plantfoodDamageEndTime : float
			$ m_warmingRadius : RtWeakPtr<ComponentWarmingRadius>
		PlantDandelion 024
			$ m_lastNormalRowOffset : int32
			$ m_targetedBoardEntities : std::vector<RtWeakPtr<BoardEntity> >
			$ m_timesSpecialFired : int32
		PlantToadstool 048
			$ m_toadstoolState : int32
			$ m_currentTarget : RtWeakPtr<BoardEntity>
			$ m_previousTargetsHit : std::vector<RtWeakPtr<BoardEntity>>
			$ m_animStartTime : float
			$ m_totalTargetsHit : int32
			$ m_zombieKillCount : int32
			$ m_biteTime : float
			$ m_normalTongueStretcherComponent : RtWeakPtr<ComponentVisualStretcher>
			$ m_plantfoodTongueStretcherComponent : RtWeakPtr<ComponentVisualStretcher>
		PlantStrawburst 018
			$ m_hitRowBelow : bool
			$ m_needsTouchInitialization : bool
			$ m_currentGrowthStage : int32
			$ m_nextGrowthTime : float
		PlantCactus 010
			$ m_hasBeenPlantfooded : bool
			$ m_lastSpikeTime : float
		PlantElectricBlueberry ?
			<NONE>
		PlantJackOLantern 030
			$ m_fireAmount : float
			$ m_flameState : int32
			$ m_timeSpentAttacking : float
			$ m_flameEffects : std::vector<RtWeakPtr<Effect_PopAnim>>
			$ m_warmingRadius : RtWeakPtr<ComponentWarmingRadius>
			$ m_showPersistentFlame : bool
		PlantGrapeshot ?
			<NONE>
		PlantShrinkingViolet 00C
			$ m_exploded : bool
		PlantBloomingHearts 018
			$ m_targetedBoardEntities : std::vector<RtWeakPtr<BoardEntity> >
			$ m_timesSpecialFired : int32
		PlantEscapeRoot 048
			$ m_explodeRadius : RtWeakPtr<ComponentDamageRadius>
			$ m_isSelected : bool
			$ m_maySelectAfter : float
			$ m_currentPFAttackCount : int32
			$ m_attackType : int32
			$ m_attackGroups : std::vector<std::string>
			$ m_targetPlant : RtWeakPtr<Plant>
			$ m_plantfoodOffset : SexyVector3
		PlantWasabiWhip 020
			$ m_attackDirection : int32
			$ m_plantfoodDamageEndTime : float
			$ m_warmingRadius : RtWeakPtr<ComponentWarmingRadius>
		PlantAppleMortar 008
		PlantBombegranate 008
		PlantMissileToe 014
			$ m_onlyTargetZombies : bool
			$ m_fireIgnoreBoardState : bool
			$ m_recoveryTime : float
		PlantParsnip 010
			$ m_attackDirection : int32
			$ m_plantfoodDamageEndTime : float
		PlantWitchHazel 014
			$ m_magicState : int32
			$ m_magicChargeTime : float
		PlantCaulipower 014
			$ PlantfoodTargetedZombies : std::vector<RtWeakPtr<BoardEntity>>
		PlantSolarTomato 008
		PlantElectricPeashooter 008
		PlantHollyKnight 038
			$ m_lastAttack : float
			$ m_hasTarget : bool
			$ m_target : RtWeakPtr<BoardEntity>
			$ m_numCharges : int32
			$ m_damagePhase : int32
			$ m_launcherComponent : RtWeakPtr<ComponentPlantLauncher>
		HollyBarrierLeaf 018
			$ m_lastAttack : float
			$ m_damage : float
			$ m_damagePhase : int32
			$ m_maxHPOverride : float
		PlantEmpowermint 030
			$ m_state : int32
			$ m_activeEndTime : float
			$ m_powerUpFlags : int32
			$ m_powerUpRegionRect : Rect
			$ m_powerUpRegion : RtWeakPtr<RtObject>
			PlantFilamint 030
			PlantPeppermint 048
				$ m_fireEndTime : float
				$ m_lastFireDamageTick : float
				$ m_fireActive : bool
			PlantWintermint 030
			PlantEnlightenmint 030
			PlantReinforcemint 030
			PlantBombardmint 048
				$ m_lastExplosionTime : float
				$ m_numExplosionsUsed : int32
				$ m_explosionsActive : bool
				$ m_explodeRadius : RtWeakPtr<ComponentDamageRadius>
			PlantAilmint 030
			PlantEnchantmint 030
			PlantContainmint 030
			PlantEnforcemint 030
			PlantArmamint 030
			PlantConcealmint 030
			PlantSpearmint 030
			PlantAppeasemint 0B8
				$ m_numberOfShots : int32
				$ m_projectileAction : PlantAction
				$ m_timeBetweenShots : float
				$ m_shouldFire : bool
				$ m_currentShotCount : int32
				$ m_timeToFire : float
		PlantShadowPeashooter 078
			$ m_zombiesSwallowed : int32
			$ m_bombTier : int32
			$ m_attachedEffects : AttachedEffectManager
			$ m_baseNormalLayers : std::vector<std::string>
			$ m_baseBoostedLayers : std::vector<std::string>
			$ m_currentState : int32
			$ m_zombieToEat : RtWeakPtr<Zombie>
			$ m_shadowSuckVelocity : float
			$ m_releaseStunTime : float
		PlantPoisonPeashooter 008
		PlantArmamintPeashooter 008
		PlantMiniPeashooter 008
		PlantSnapPea 038
			$ m_eatenZombieHeads : std::vector<RtWeakPtr<ZombieParticle>>
			$ m_eatenHeadProjectileTypes : std::vector<HeadProjectileType>
			$ m_deployedAttacks : std::vector<RtWeakPtr<EffectObject_BurrowAttack>>
			$ m_timeUntilNextAttack : float
			$ m_plantfoodEndTime : float
			$ m_state : int32
		PlantBurnade 010
			$ m_maxUses : int32
			$ m_currentUseCount : int32
		PlantZoybeanPod 014
			$ m_idleTime : float
			$ m_animationStartTime : float
			$ m_usingDefaultAnimationTimes : bool
		PlantReincarnation 018
			$ m_growthLevel : int32
			$ m_lastGrowthLevelForAttack : int32
			$ m_petals : int32
			$ m_hasPlayedPlantFoodAnimation : bool
		PlantElectricitea 020
			$ m_timeOfNextSpark : float
			- ElectriciteaBurstProperties
				$ BoltCount : int32
				$ BoltRange : float
				$ NumBounces : int32
				$ BounceDelay : float
				$ Damage : float
				$ BounceDamagePercent : float
				$ MasteryResistancePiercing : float
				$ DecayDelay : float
		PlantBlastberry 018
			$ m_targetedBoardEntities : std::vector<RtWeakPtr<BoardEntity> >
			$ m_timesSpecialFired : int32
		PlantPokra 014
			$ m_currentPhase : AttackPhase
			$ m_recoveryEndTime : float
			$ m_midAttackPauseEndTime : float
		PlantImpPear 008
		PlantPyreVine 028
			$ m_flameEffects : std::vector<RtWeakPtr<Effect_PopAnim>>
			$ m_warmingRadius : RtWeakPtr<ComponentWarmingRadius>
			$ m_showPersistentFlame : bool
			$ m_attacking : bool
			$ m_plantfoodEndTime : float
		PlantPumpkin 010
			$ m_shield : RtWeakPtr<Shield>
		PlantIceBloom ?
			<NONE>
		PlantUltomato 040
			$ m_level : int32
			$ m_destroyAfterPlantfoodTime : float
			$ m_beamEndTime : float
			$ m_beamTargetPositionBoardSpace : SexyVector2
			$ m_beamState : int32
			$ m_beamTarget : RtWeakPtr<BoardEntity>
			$ m_beamRig : RtWeakPtr<Effect_PopAnim>
			$ m_beamHitFX : RtWeakPtr<Effect_PopAnim>
			$ m_beamOriginFX : RtWeakPtr<Effect_PopAnim>
		PlantDartichoke 038
			$ m_pfTargetIndex : int32
			$ m_pfShotIndex : int32
			$ m_pfTargets : std::vector<RtWeakPtr<BoardEntity>>
			$ m_currentAmmo : int32
			$ m_plantfoodAmmoLeft : int32
			$ m_mainAttackRefreshTime : float
		PlantGumnut 008
		PlantShineVine 020
			$ m_sunProductionModifier : int32
			$ m_nextAttackTime : float
			$ m_basePlant : RtWeakPtr<Plant>
		PlantTumbleweed 00C
			$ m_tumblersToSpawn : int32
		PlantPuffball ?
			<NONE>
		PlantOlivePit 048
			$ m_zombiesEaten : int32
			$ m_zombieToEat : RtWeakPtr<Zombie>
			$ m_plantfoodZombiesToEat : std::vector<RtWeakPtr<Zombie>>
			$ m_zombieSwallowCurve : CurveSequence_SexyVector3
			$ m_plantfoodZombieSwallowCurves : std::vector<CurveSequence_SexyVector3>
			$ m_chewingEndTime : float
			$ m_nextOilSpitTime : float
		PlantMurkadamia 038
			$ m_plantfoodShield : RtWeakPtr<Shield>
			$ m_murkShield : RtWeakPtr<RegeneratingShield>
			$ m_shadowBoosted : bool
			$ m_lastDamageReflectedTime : float
			$ m_tentacleEffect : RtWeakPtr<EffectObject_AnimSequence>
		PlantTurkeypult 008
		PlantHeadbutterLettuce 018
			$ m_searchingLeft : bool
			$ m_doingLeftPFHeadbutt : bool
			$ m_targetsAlreadyButtered : std::vector<RtWeakPtr<BoardEntity>>
		PlantBoingsetta 008
		PlantStickybombRice 008
		PlantHocusCrocus 018
			$ m_warpingZombies : std::vector<RtWeakPtr<Zombie>>
			$ m_nextTeleportTime : float
		PlantGloomVine 030
			$ m_damageRadius : RtWeakPtr<ComponentDamageRadius>
			$ m_plantfoodDamageRadius : RtWeakPtr<ComponentDamageRadius>
			$ m_boostRadius : RtWeakPtr<ComponentConditionRadius>
			$ m_timeOfNextAttack : float
			$ m_moonflowerSystem : RtWeakPtr<MoonFlowerPoweredTilesSubsystem>
		PlantDraftodil 024
			$ m_isBlowingZombiesToBack : bool
			$ m_blowToBackStartTime : float
			$ m_shouldShootPFAirProjectiles : bool
			$ m_lastShotTime : float
			$ m_currPFLoopShotCount : int32
			$ m_plantfoodAlreadyHitZombies : std::vector<RtWeakPtr<Zombie>>
		PlantBoomFlower 040
			$ m_hasTarget : bool
			$ m_isReloading : bool
			$ m_target : RtWeakPtr<BoardEntity>
			$ m_chargeState : int32
			$ m_damagePhase : int32
			$ m_normalChargeTime : float
			$ m_launcherComponent : RtWeakPtr<ComponentPlantLauncher>
			$ m_activePlantfoodProjectile : RtWeakPtr<Projectile>
			$ m_plantfoodProjectileFired : bool
		PlantPvine 030
			$ m_plantfood : PeashooterPlantfood
			$ m_boostRadius : RtWeakPtr<ComponentFamilyConditionRadius>
			- PeashooterPlantfood
				$ m_shotsPerSecond : float
				$ m_startTime : float
				$ m_shotsFired : int32
				$ m_shotTotal : int32
				$ m_backwardsProjectiles : bool
		PlantInferno 010
			$ m_warmingRadius : RtWeakPtr<ComponentWarmingRadius>
		PlantSolarSage 028
			$ m_illuminateRadius : RtWeakPtr<ComponentDamageRadius>
			$ m_pfIlluminateRadius : RtWeakPtr<ComponentDamageRadius>
		PlantNoctarine 00C
		PlantNoctarineCloud 028
			$ m_boostRadius : RtWeakPtr<ComponentConditionRadius>
			$ m_shadowBoosted : bool
			$ m_gasEndTime : float
			$ m_originatingPlantLevel : int32
		PlantHeathSeeker 020
			$ m_pfTargets : std::vector<RtWeakPtr<BoardEntity>>
			$ m_projectileStarted : bool
			$ m_nextProjectileTime : float
			$ m_pfShotIndex : int32
		PlantTigerGrass 028
			$ m_activeTiger : RtWeakPtr<BoardEntity>
			$ m_currentGrowthStage : uint8
			$ m_nextGrowthtime : float
			$ m_plantFooded : bool
			$ m_tigerHealth : float
		PlantTeleportatoMine 030
			$ m_explodeRadius : RtWeakPtr<ComponentDamageRadius>
			$ m_startArmingAnimStartTime : float
			$ m_armingLoopEndTime : float
			$ m_timeToStartDisapearing : float
			$ m_timeToStartWarpIn : float
			$ m_warpingZombies : std::vector<RtWeakPtr<Zombie>>
		PlantButtercup 02C
		PlantBlockoli 018
			$ m_shield : RtWeakPtr<Shield>
			$ m_smashCooldown : float
		PlantBrambleBush 030
			$ m_trapNumber : int32
			$ m_numberOfZombiesAttacked : int32
			$ m_draggedZombie : RtWeakPtr<Zombie>
			$ m_refreshCycleTime : float
			$ m_damageZombieTime : float
			$ m_trappedZombies : std::vector<RtWeakPtr<Zombie>>
		PlantRhubarbarian 060
			$ m_startPos : SexyVector3
			$ m_endPos : SexyVector3
			$ m_lifespanTimerPaused : bool
			$ m_lifespanTimer : float
			$ m_lifespanTimerCap : float
			$ m_lifespanPauseTimer : float
			$ m_attackEnding : bool
			$ m_leapVelocity : SexyVector3
			$ m_leapAcceleration : SexyVector3
			$ m_attackingTarget : RtWeakPtr<BoardEntity>
		PlantMegaGatling 02C
			$ m_nextChanceToAutoPF : float
			$ m_numOfPeas : int32
			$ m_plantfood : PeashooterPlantfood
		PlantLevitater 018
			$ m_nextLevitationTime : float
			$ m_flickedZombie : RtWeakPtr<Zombie>
		PlantTombTangler 03C
			$ m_state : int32
			$ m_pfZombieDamageCount : int32
			$ m_fogPullChanceTickTime : float
			$ m_foggyZombies : std::set<RtWeakPtr<Zombie>>
			$ m_draggedZombies : std::vector<RtWeakPtr<Zombie>>
			$ m_attackFog : std::vector<RtWeakPtr<class TombTanglerFogEffect>>
	CurveReflectionExposer ?
		<NONE>
		- FloatCurve
			$ ParamStart : float
			$ ParamEnd : float
			$ ValueStart : float
			$ ValueEnd : float
			$ Type : CurveType
		- IntCurve
			$ ParamStart : float
			$ ParamEnd : float
			$ ValueStart : int32
			$ ValueEnd : int32
			$ Type : CurveType
	PlayerSegmentRules 01C
		$ BucketName : std::string
		$ Rules : std::vector<Rule>
		- Rule
			$ Key : std::string
			$ Comparator : Comparator
			$ Value : std::string
	PlantFoodCounter 014
		$ m_shotsPerSecond : float
		$ m_startTime : float
		$ m_shotsFired : int32
		$ m_shotTotal : int32
	IPVZStoreProduct 004
		StoreProductProps 088
			$ Sku : std::string
			$ Name : std::string
			$ LawnShortDescription : std::string
			$ BundleProps : std::vector<std::string>
			$ ObjectType : std::string
			$ ObjectItem : std::string
			$ ObjectCount : int32
			$ PriceGems : int32
			$ PriceMints : int32
			$ PriceCoins : int32
			$ Price : float
			$ IsFree : bool
			$ IsAdPlacement : bool
			$ IOS_Nimble : int64
			$ NA_Nimble : int64
			$ ROW_Nimble : int64
	DangerRoomObstaclePlacer ?
		<NONE>
	SongListElement 034
		$ SongName : std::string
		$ SongLength : std::string
		$ EventName : std::string
		$ World : std::string
	LootConfig 020
		$ LevelLength : double
		$ Disable : bool
		$ LevelLootKey : std::string
	LootTable 010
		$ Entries : std::vector<LootTableEntry>
		- LootTableEntry
			$ UniqueId : std::string
			$ Type : Loot
			$ Min : int32
			$ Max : int32
			$ Period : double
			$ World : std::string
			$ EnabledAfter : std::string
			$ LevelLootKey : std::string
			$ DisableViaLiveToggle : std::string
		- LootTableModifier
			$ FilterByID : std::string
			$ FilterByType : Loot
			$ DropRateMultiplier : float
	LootSaveData 014
		$ ProfileIndex : int32
		$ m_lootEntryInstancedData : std::vector<LootEntrySaveData>
		- LootEntrySaveData
			$ UniqueId : std::string
			$ LevelLengthsPlayed : double
			$ NextDropTime : double
			$ NextScheduleTime : double
	ScheduledLootModifierTable 010
		$ Schedule : std::vector<ScheduledLootModifier>
		- ScheduledLootModifier
			$ StartTimeUTC : uint64
			$ EndTimeUTC : uint64
			$ Modifiers : std::vector<LootTableModifier>
	PVZTypes 004
		% VerifyPlantTypes : bool
		% VerifyPinataTypes : bool
		% VerifyZombieTypes : bool
		% VerifyCreatureTypes : bool
		% VerifyProjectileTypes : bool
		% VerifyWorldMapAndLevels : bool
	HotUIComponent 028
		HotUIPropertyAnimator 028
	GameObject 010
		$ m_thisPtr : RtWeakPtr<RtObject>
		UIWidget 110
			% WidgetState_CmdPropertyGet : *
			% WidgetState_CmdPropertySet : *
			# WidgetState : int32
			$ m_propertySheetName : std::wstring
			$ m_propertySheetPtr : RtWeakPtr<UIWidgetSheet>
			$ m_boundingRect : Rect
			$ m_overrideSelfAnchor : AnchorType
			$ m_overrideParentAnchor : AnchorType
			$ m_parentPtr : RtWeakPtr<UIWidget>
			$ m_childIdList : std::vector<RtId>
			$ m_flags : int32
			$ m_stateEnterTime : float
			$ m_overridePositionOffset : SexyVector2
			$ m_scaledPositionOffset : SexyVector2
			$ m_positionOffsetOverriden : bool
			$ m_overrideInputPriority : uint8
			$ m_inputPriorityOverriden : bool
			$ m_loadingResourcesList : std::vector<std::string>
			$ m_atlasImage : RtWeakPtr<Image>
			$ m_atlasSrcRect : Rect
			BossProgressMeter 138
				$ m_currentPhase : int32
				$ m_phaseCount : int32
				$ m_unlimitedPhases : bool
				$ m_phaseCountdown : bool
				$ m_phasePercents : std::vector<float>
				$ m_targetPhasePercents : std::vector<float>
				$ m_damageFlashStartTime : float
				BossProgressMeterRift 140
					$ m_lootPhaseActive : bool
			StartGameButton ?
				<NONE>
			WorldMap_TopBar 110
			SproutBank 128
			ChallengeUI 150
				$ m_icon : RtWeakPtr<Image>
				$ m_succeeded : int32
				$ m_textColor : Color
				$ m_stateIcon : RtWeakPtr<Image>
				$ m_failTime : float
				$ m_drawBox : bool
				ChallengeZombieComboUI 158
					$ m_count : int32
					$ m_target : int32
				ChallengeTimerUI 158
					$ m_seconds : int32
					ChallengeSunTimerUI 158
					ChallengeLevelTimerUI 158
				ChallengeScoringUI 188
					$ m_meterSolidPortion : float
					$ m_meterValue : float
					$ m_score : uint64
					$ m_multiplier : int32
					$ m_frenzyMode : bool
					$ m_showScoreValue : bool
					$ m_showScoreBox : bool
					$ m_showAsCompletedChallenge : bool
					$ m_showMultiplierSphere : bool
					$ m_scoreFormat : std::wstring
					$ m_multiplierFormat : std::wstring
				ChallengeCounterUI 158
					$ m_count : int32
					$ m_target : int32
			MintBank 138
				WorldMap_MintBank 138
			CoinBank 140
				WorldMap_CoinBank 148
			PowerupHolderUI ?
				<NONE>
			SunBank 128
			UIButtonWidget 140
				WorldMap_ThymedEventButton 150
				WorldMap_ZenGardenButton 148
				WorldMap_PerkLibraryButton 148
				WorldMap_BaseSettingsButton 148
					WorldMap_SettingsButton 148
					WorldMap_NewsButton 148
				WorldMap_StoreButton 148
				WorldMap_BackButton 148
				WorldMap_AlmanacButton 148
				WorldMap_MiniGameButton 140
				WorldMap_CalendarButton 140
				WorldMap_QuestButton 148
			TicketBank 138
				WorldMap_TicketBank 138
			WhackHammerUI 110
				$ m_levelEnded : bool
			WaveProgressMeter 128
				$ m_targetFillPercent : uint8
				$ m_currentDisplayPercent : float
				$ m_flagsTriggered : uint8
				$ m_flagCount : uint8
				$ m_useHeadImage : bool
				$ m_lerpFlagEndTime : std::vector<pvztime_t>
			GemBank 140
				WorldMap_GemBank 140
			TutorialDemoBarUI 128
			PauseButton 110
			PowerupUI 138
				$ m_levelEnded : bool
				$ m_powerupType : RtWeakPtr<RtObject>
				$ m_powerupImage : RtWeakPtr<RtObject>
				$ m_powerupDownImage : RtWeakPtr<RtObject>
				$ m_isLocked : bool
				PowerupTimeUI 138
					$ m_forceDrawActiveState : bool
			SeedPacket 188
				$ m_plantType : RtWeakPtr<PlantType>
				$ m_contentsTypeName : std::string
				$ m_packetFlags : SeedPacketFlags
				$ m_cooldownEndTime : float
				$ m_usesCooldownTimer : bool
				$ m_flashingColor : int32
				$ m_useBoostedBackground : bool
				$ m_renderBackground : bool
				$ m_shouldShowLevel : bool
				$ m_shouldShowXp : bool
				$ m_plantLevel : int32
				$ m_plantMasteryLevel : int32
				$ m_plantLevelBadgeTier : int32
				$ m_preselected : bool
				$ m_shouldShowBonusFactor : bool
				$ m_scoreBonusFactor : int32
				$ m_skipRVRentIconRendering : bool
				SeedPacket_Tool 188
				SeedPacket_Powerup 188
					$ m_activated : bool
				HarvestableBoostPacket 188
			FastForwardButton 110
				$ m_pressed : bool
			UIWidgetPrimeText 118
			EnergyBank 140
			BeghouledWaveProgressMeter 120
				$ m_targetFillPercent : uint8
				$ m_currentDisplayPercent : float
				$ m_currentMatches : int32
				$ m_matchesToWin : int32
			PlantfoodUI 138
				$ m_showPlusButton : bool
				$ m_purchasesLeft : int32
				$ m_count : int32
				$ m_levelEnded : bool
				$ m_collecting : int32
				$ m_collectStartTime : float
			FuelBank 138
				WorldMap_FuelBank 138
			ViewBoardOrZombiesButton 128
				$ m_animRig : RtWeakPtr<RtObject>
				$ m_timeTillNextEyeMotion : float
				$ m_eyeIdleIndex : uint8
				$ m_screenIsScrolled : bool
				% onEyeMoveAnimFinished : *
			WorldMap_EventBar ?
				<NONE>
			ReloadLayoutButton ?
				<NONE>
			ShovelUI 110
				$ m_isFlashing : bool
				$ m_levelEnded : bool
			SlidingWidget 150
				$ m_slideTimeStart : float
				$ m_slideTimeDuration : float
				$ m_slidingState : SlidingState
				$ m_slideInCurve : int32
				$ m_slideOutCurve : int32
				$ m_originalPosition : SexyVector2
				$ m_offscreenPosition : SexyVector2
				$ m_audioOnSlideIn : std::string
				$ m_audioOnSlideOut : std::string
				$ m_slideEnabled : bool
				$ m_slideSetUp : bool
				$ m_normalizedProgress : float
				SeedChooser 238
					% onPanBoardLeftFinished : *
					% onPanBoardRightFinished : *
				EASquaredBankButton 168
					EASquaredCoinBankButton 168
					EASquaredPennyFuelBankButton 168
					EASquaredGemBankButton 168
				SeedBankNew 188
					$ m_packetCount : uint8
					$ m_bankType : SeedBankType
					$ m_seedBankProps : RtWeakPtr<RtObject>
					$ m_autofillSeedTypes : std::vector<std::string>
					$ m_autofillSeedLevels : std::vector<int>
					$ m_autofillSeedMasteryLevels : std::vector<int>
					ConveyorSeedBank 1E8
						$ m_maxConveyorItems : int32
						$ m_conveyorBeltOffsetX : std::vector<float>
						$ m_conveyorBeltOffsetY : std::vector<float>
						$ m_conveyorSpeed : float
						$ m_seedPickTime : float
						$ m_lastSeedPickTime : float
						$ m_forceSpawnQueue : std::deque<PendingConveyorPacket>
						$ m_conveyorSeedPool : std::vector<ConveyorPlantEntry>
						$ m_isPaused : bool
						$ m_recentPicks : std::vector<int32>
						- PendingConveyorPacket
							$ Type : std::string
							$ PushedToFront : bool
							$ ForceBoosted : bool
							$ Level : int32
							$ MasteryLevel : int32
			WorldMap_StarBank 110
		IdleAnimationSelector 030
			$ m_entries : std::vector<ProbabilityStringRecord>
			$ m_lastLabel : std::string
			- ProbabilityStringRecord
				$ Value : std::string
				$ Weight : int32
		ComponentBase 030
			$ m_state : int32
			$ m_name : std::string
			$ m_owner : RtWeakPtr<RtObject>
			ComponentRunnerBase 030
				ComponentRunner 038
					$ m_components : std::vector<RtWeakPtr<RtObject>>
			ComponentLinearBurst 0F0
				$ m_props : ComponentLinearBurstProps
				$ m_nextCreateColumnEffectTime : float
				$ m_distanceOfBurst : int32
				- ComponentLinearBurstProps
					$ GridAreaForAnimation : Rect
					$ BoardAreaForDamage : Rect
					$ TimeBetweenGridHits : float
					$ InitialDelay : float
					$ DamageProps : DamageInfoProps
					$ TargetProps : TargetInfoProps
					$ PopAnimLinearEffectName : std::string
					$ PopAnimSquareEffectName : std::string
			ComponentZombieMovement 048
				$ m_lerpingValues : CurveCollection_Float
			ComponentTimedExplosion 048
				$ m_isInitialized : bool
				$ m_zombieToExplode : RtWeakPtr<Zombie>
				$ m_explodeTime : float
				$ m_timeAliveLength : float
				$ m_explosionDamage : float
				$ m_explosionRadius : float
			ComponentZombieWhackTouch 038
				$ m_currentHitFraction : float
			ComponentVisualStretcher 100
				$ m_props : ComponentVisualStretcherProps
				$ m_originPosition : SexyVector2
				$ m_targetPosition : SexyVector2
				$ m_baseAnim : RtWeakPtr<Effect_PopAnim>
				$ m_stretchedAnim : RtWeakPtr<Effect_PopAnim>
				$ m_tipAnim : RtWeakPtr<Effect_PopAnim>
				$ m_baseAnimOffset : SexyVector2
				$ m_stretchAnimOffset : SexyVector2
				$ m_tipAnimOffset : SexyVector2
				$ m_stretchLength : float
				$ m_stretchDelta : float
				$ m_stretchDirection : float
				$ m_isStretching : bool
			ComponentAttachedDamageStateEffect 060
				$ m_hitPoints : float
				$ m_damageStateAnim : std::string
				$ m_positionOffset : SexyVector3
				$ m_currentDamageState : int32
				$ m_damagePhases : DamageLifetime
				ComponentIceBlockZombies 060
			ComponentOnDeath 030
				ComponentOnDeath_SpawnZombie 040
					$ m_zombieTypeToSpawn : std::string
					$ m_zombieRiseFromGround : bool
			ComponentPropagatedBurst 088
				$ m_props : ComponentPropagatedBurstProps
				$ m_startTime : float
				$ m_lastExplosionPropagationDistance : int32
				$ m_damagedEntities : std::vector<RtWeakPtr<RtObject>>
			ComponentRadiusBurst 110
				$ m_props : ComponentRadiusBurstProps
				$ m_nextPropagateTime : float
				$ m_nextApplyTime : float
				$ m_nextAnimationStartTime : float
				$ m_isOriginDisplaced : bool
				$ m_displacedOrigin : Point
				$ m_gridOrigin : Point
				$ m_completionCallback : RtReflectionDelegateBase
				% onBurstCompleted : *
				ComponentWarmingRadius 210
					$ m_warming_props : ComponentWarmingRadiusProps
					- ComponentWarmingRadiusProps
						$ PulseInitialDelay : float
						$ GridItemDamageProps : DamageInfoProps
						$ PlantDamageProps : DamageInfoProps
				ComponentConditionRadius 1B0
					$ m_condition_props : ComponentConditionRadiusProps
					ComponentFamilyConditionRadius 260
						$ m_condition_family_props : ComponentFamilyConditionRadiusProps
						- ComponentFamilyConditionRadiusProps
							$ AffectedFamilies : std::vector<std::string>
					- ComponentConditionRadiusProps
						$ PulseInitialDelay : float
						$ AdditionalValue : float
						$ Conditions : std::vector<PlantConditionEntry>
						$ ConditionsAreSingleAndTiered : bool
				ComponentDamageRadius 1F0
					$ m_damage_props : ComponentDamageRadiusProps
					- ComponentDamageRadiusProps
						$ ImpactSound : std::string
						$ ShakeBoard : Point
						$ PopAnimHitEffectName : std::string
						$ DamageProps : DamageInfoProps
				- ComponentRadiusBurstProps
					$ RadiusInGridSquareWidths : float
					$ PulseCooldown : float
					$ PulsePropagationTime : float
					$ PulseRepeatTimes : int32
					$ PulseRepeatDelay : float
					$ PopAnimScaleX : float
					$ PopAnimScaleY : float
					$ PopAnimOffset : Point
					$ PopAnimEffectName : std::string
					$ PopAnimEffectStartDelay : float
					$ TargetProps : TargetInfoProps
					$ RenderAtEffectLayer : bool
					$ EffectObject : RtWeakPtr<EffectObjectType>
		WizardFingerGameObject 048
			$ m_touchLocation : SexyVector2
			$ m_effectBack : RtWeakPtr<RtObject>
			$ m_effectFront : RtWeakPtr<RtObject>
			$ m_effectTop : RtWeakPtr<RtObject>
			$ m_playingAttack : bool
			$ m_active : bool
			$ m_damageDPS : float
			$ m_minZombieDamagePctAsDPS : float
			$ m_maxDamageDPS : float
		BasePowerup 088
			% PowerupState_CmdPropertyGet : *
			% PowerupState_CmdPropertySet : *
			# PowerupState : int32
			$ m_powerupType : RtWeakPtr<RtObject>
			$ m_selected : bool
			$ m_ignoreCost : bool
			$ m_timeRemaining : float
			$ m_purchasesLeft : int32
			$ m_cooldownStarted : float
			$ m_bonusTime : float
			PowerupWizardFinger 098
				$ m_WFGameObject : RtWeakPtr<RtObject>
			PowerupTouchBased 0B8
				PowerupVaseSelector ?
					<NONE>
					PowerupVaseBreakerReveal ?
						<NONE>
				PowerupVaseBreakerButter ?
					<NONE>
				PowerupVaseBreakerMove ?
					<NONE>
				PowerupBeghouledShovel 0B8
			PowerupPinchZombie ?
				<NONE>
			PowerupSnowball 098
				$ m_nextLaunchTime : float
			PowerupBeghouledShuffle 088
			PowerupSeedPacket 088
			PowerupFlamethrower 098
				$ m_FTGameObject : RtWeakPtr<RtObject>
			PowerupFlickZombie 090
		BoardSaveState 1C8
			$ CurrentTime : float
			$ PlantRow : std::vector<int8>
			$ TimeRowGotLawnMowered : std::vector<pvztime_t>
			$ RowPickingArray : std::vector<TodSmoothArray>
			$ GridSquareType : std::vector<int8>
			$ GridSquareLocked : std::vector<int8>
			$ MowerAllowedInRow : std::vector<int8>
			$ SavedMetrics : GameplayMetrics
			$ BoardPosition : Point
			$ SunShovelOverridePercent : float
			$ SunShovelRefundDisabled : bool
			$ StepCount : int32
			- TodSmoothArray
				$ m_item : int32
				$ m_weight : float
				$ m_lastPicked : float
				$ m_secondLastPicked : float
			- GameplayMetrics
				$ GameStartTime : float
				$ SunSpawned : int32
				$ SunCollected : int32
				$ SunSpent : int32
				$ PlantFoodSpawned : int32
				$ PlantFoodSpawnedWhenFull : int32
				$ PlantFoodGrabsWhenFull : int32
				$ PlantFoodPurchased : int32
				$ PlantFoodCollected : int32
				$ PlantFoodSpent : int32
				$ LawnMowerPurchased : int32
				$ LODReplayPurchased : int32
				$ WavesGenerated : int32
				$ MowersTriggered : int32
				$ MowersCreated : int32
				$ MowersLaunched : int32
				$ PlantsPlanted : int32
				$ PlantsLost : int32
				$ TotalPlantDamage : int32
				$ CoinsSpawned : int32
				$ CoinsCollected : int32
				$ GemsSpawned : int32
				$ GemsCollected : int32
				$ MintsSpawned : int32
				$ MintsCollected : int32
				$ SeasonCrownsSpawned : int32
				$ SeasonCrownsCollected : int32
				$ SproutsSpawned : int32
				$ SproutsCollected : int32
				$ CoinsSpentOnPowerups : int32
				$ CoinsSpentOnPlantfood : int32
				$ CoinsSpentOnLawnMowers : int32
				$ CoinsSpentOnLODReplay : int32
				$ KeysCollected : int32
				$ WorldKeysCollected : int32
				$ YetiSpawned : int32
				$ YetiDefeated : int32
				$ BossesDefeated : int32
				$ ThreatAlertsTriggered : int32
				$ DifficultyLevel : int32
				$ FeatureUsage : std::vector<GameFeatureUsageNode>
				$ Reward1 : std::string
				$ Reward2 : std::string
				$ Reward3 : std::string
				$ ConsecutiveLODReward : std::string
				$ FirstUnpurchasedPremiumPlantPlanted : std::string
				$ WinLossRatio : float
				$ UsedFastForward : bool
				$ FastForwardStartTime : float
				$ FastForwardTotalTime : float
				$ NumberOfFramerateDips : int32
				$ NumberOfLowMemoryWarnings : int32
				$ BatteryStartPercentage : float
				$ RentAPlantStatus : std::string
				$ EnergyAtStart : int32
				$ EnergyAtEnd : int32
				$ EnergyUsed : int32
		BoardLayerEffect 068
			$ m_startColor : Color
			$ m_endColor : Color
			$ m_startTime : float
			$ m_endTime : float
			$ m_useLerp : bool
			$ m_curveType : CurveType
			$ m_useCinematicTime : bool
			$ m_timeScaleStart : float
			$ m_timeScaleEnd : float
			$ m_useTimeScaleCurve : bool
			$ m_timeScaleCurve : CurveType
		ZenGardenEntity 030
			$ m_screenPosition : SexyVector3
			GrowingPlantSlot 168
				$ m_zenScene : RtWeakPtr<RtObject>
				$ m_slotAnimRig : RtWeakPtr<RtObject>
				$ m_plantAnimRig : RtWeakPtr<RtObject>
				$ m_plantWaterEffect : RtWeakPtr<RtObject>
				$ m_harvestRewardDoobers : std::vector<RtWeakPtr<RtObject>>
				$ m_positionKey : int32
				% onPlantPicked : *
				% onAnimDone_PlantPoof : *
				% doTouchEvent : bool
				% doBuySlot : *
				% doBoostPlant : *
				% delayBoostPlant : *
				% doShovelPlant : *
				% GrowthState_CmdPropertyGet : *
				% GrowthState_CmdPropertySet : *
				# GrowthState : int32
			ZenGardenPopAnimEntity 048
				ZenGardenCursorEntity 058
				ZenGardenDooberEntity 0E0
					$ m_touchDelegate : RtReflectionDelegateBase
			ZenGardenBeeEntity 0D0
				$ m_animRig : RtWeakPtr<PopAnimRig_ZenGardenBee>
				$ m_bounds : FRect
				$ m_velocity : SexyVector2
				$ m_targetScreenPos : SexyVector2
				$ m_targetSlot : RtWeakPtr<RtObject>
				$ m_zenScene : RtWeakPtr<RtObject>
				% BeeState_CmdPropertyGet : *
				% BeeState_CmdPropertySet : *
				# BeeState : int32
		ComponentPlantLauncher 0A8
			$ m_owner : RtWeakPtr<Plant>
			$ m_onlyTargetZombies : bool
			$ m_fireIgnoreBoardState : bool
			$ m_cursorTextureName : std::string
		WaveAction 018
			$ m_propertySheetPtr : RtWeakPtr<RtObject>
			TidalChangeWaveAction 018
			ZombieSpawnerAction 018
				SpawnZombiesJitteredWaveAction 030
					$ m_zombieLoot : std::vector<Loot>
					$ m_zombies : std::vector<SpawnZombiesJitteredInstruction>
					SpawnZombiesFromGroundWaveAction 030
					SpawnZombiesFromGridItemWaveAction 040
						$ m_timeToSpawnZombies : float
						SpawnZombiesDelayedFromGridItemsWaveAction 058
							$ m_nextZombieIndex : int32
							$ m_nextGroupTime : float
							$ m_fullSpawnTime : float
							$ m_lastSpawnObjectID : <void *>
							SpawnWhackAZombiesAction 058
				ZombieRainSpawner 038
					$ m_zombieLoot : std::vector<Loot>
					$ m_nextGroupTime : float
					$ m_fullSpawnTime : float
					$ m_zombiesSpawned : int32
					$ m_nextRowToSpawnIn : int32
					SpiderRainZombieSpawner 038
					ParachuteRainZombieSpawner 038
				StormZombieSpawner 040
					$ m_zombieLoot : std::vector<Loot>
					$ m_stormTargets : std::vector<Point>
					$ m_nextZombieIndex : int32
					$ m_nextGroupTime : float
					$ m_fullSpawnTime : float
				HamsterZombieSpawner 040
					$ m_zombieLoot : std::vector<Loot>
					$ m_stormTargets : std::vector<Point>
					$ m_nextZombieIndex : int32
					$ m_nextGroupTime : float
					$ m_fullSpawnTime : float
				RaidingPartyZombieSpawner 040
					$ m_zombieLoot : std::vector<Loot>
					$ m_swashbucklerTargets : std::vector<Point>
					$ m_swashbucklersSpawned : int32
					$ m_nextGroupTime : float
					$ m_fullSpawnTime : float
				BeachStageEventZombieSpawner 038
					$ m_zombieLoot : std::vector<Loot>
					$ m_nextGroupTime : float
					$ m_fullSpawnTime : float
					$ m_zombiesSpawned : int32
					$ m_nextRowToSpawnIn : int32
			ModifyConveyorWaveAction 018
			SpawnGridItemsWaveAction 018
				SpawnGravestonesWaveAction 018
				SpawnModernPortalsWaveAction 018
			DinoTimeWaveAction 018
			SunDropperWaveAction 020
				$ m_totalSunDroppedSoFar : int32
				$ m_lastSunDroppedTime : float
			SproutPlantingWaveAction 030
				$ m_sproutsRemaining : int32
				$ m_startedPlantingTime : float
				$ m_plantedSproutGridLocations : std::vector<SexyVector2>
				$ m_doneWaveEvent : bool
			FrostWindWaveAction 020
				$ m_lastWind : int32
				$ m_nextWindTime : float
		PopAnimRig 170
			$ m_manageDeletion : bool
			$ m_activeAnim : int32
			$ m_activeAnimBaseLabel : std::string
			$ m_activeAnimPlayStyle : int32
			$ m_activeAnimSeqEndCount : int32
			$ m_activeAnimSelectMethod : int32
			$ m_activeAnimLastPlayedVariation : int32
			$ m_animRandomDistribution : std::vector<int>
			$ m_audioObject : RtWeakPtr<RtObject>
			$ m_mirrorX : bool
			$ m_disabled : bool
			$ m_useShaderOverrideColor : bool
			$ m_shaderOverrideColor : Color
			$ m_saturation : float
			$ m_serialOnAnimStopped : RtReflectionDelegateBase
			$ m_serialOnLoopingAnimContinued : RtReflectionDelegateBase
			$ m_serialOnPopAnimCommand : RtReflectionDelegateBase
			$ m_registeredInAudioMgr : bool
			$ m_selfPtr : RtWeakPtr<RtObject>
			PlantAnimRig 278
				$ m_state : int32
				$ m_plantFoodPlayCount : int32
				$ m_stateAnimsCompleted : int32
				$ m_currentDamageStateIndex : int32
				$ m_onPlantFoodMainStarted : RtReflectionDelegateBase
				$ m_onPlantFoodMainLooped : RtReflectionDelegateBase
				$ m_onPlantFoodMainEnded : RtReflectionDelegateBase
				$ m_customizableLayers : std::vector<PlantCustomLayers>
				$ m_props : RtWeakPtr<PlantAnimRigPropertySheet>
				$ m_tier : int32
				PlantIdleAwareAnimRig 2A8
					$ m_idleSelector : IdleAnimationSelector
					PlantAnimRig_WasabiWhip 2A8
				GridItemAnimRig_LilyPad 278
					$ m_isOccupied : bool
					$ m_isOnWater : bool
				PlantAnimRig_TangleKelp 278
				PlantAnimRig_BowlingBulb 278
					$ m_plantfoodBulbs : bool
				PlantAnimRig_Guacodile 278
				PlantAnimRig_Banana ?
					<NONE>
				PlantAnimRig_Chilibean 278
					% onLandingFinished : *
				PlantAnimRig_Peapod 2B0
					$ m_level : int32
					$ m_attackHandle : int32
					$ m_onAttackStopped : RtReflectionDelegateBase
				PlantAnimRig_Sunflower 278
					PlantAnimRig_Sunshroom 278
						$ m_currentGrowthStage : uint8
						% growthAnimComplete : *
				PlantAnimRig_Puffshroom 2B0
					$ m_level : int32
					$ m_attackHandle : int32
					$ m_onAttackStopped : RtReflectionDelegateBase
				PlantAnimRig_Fumeshroom 2A8
					$ m_attackHandle : int32
					$ m_onAttackStopped : RtReflectionDelegateBase
				PlantAnimRig_Magnetshroom 278
				PlantAnimRig_PotatoMine 278
					$ m_submerged : bool
				PlantAnimRig_GraveBuster ?
					<NONE>
				PlantAnimRig_Bonkchoy 280
					$ m_lastUsedIdleAnim : std::string
				PlantAnimRig_CeleryStalker 278
					$ m_submerged : bool
				PlantAnimRig_Garlic 278
				PlantAnimRig_LaserBean 290
				PlantAnimRig_Blover ?
					<NONE>
				PlantAnimRig_Citron 280
					$ m_lastPlayedIdleAnim : std::string
				PlantAnimRig_EMPea ?
					<NONE>
				PlantAnimRig_Holonut 278
					$ m_downed : bool
				PlantAnimRig_MagnifyingGrass ?
					<NONE>
				PlantAnimRig_Goldbloom 278
				PlantAnimRig_ElectricCurrant 278
				PlantAnimRig_KiwiBeast 278
					$ m_growthLevel : int32
				PlantAnimRig_Aloe 278
					$ m_isCoolingDown : bool
				PlantAnimRig_SunGun 278
				PlantAnimRig_Sunpod 2B0
					$ m_level : int32
					$ m_attackHandle : int32
					$ m_onAttackStopped : RtReflectionDelegateBase
				PlantAnimRig_HotPotato ?
					<NONE>
				PlantAnimRig_Pepperpult ?
					<NONE>
				PlantAnimRig_ChardGuard 288
					$ m_lastPlayedIdleAnim : std::string
					$ m_leafCount : int32
				PlantAnimRig_RedStinger 2B8
					$ m_locState : int32
					$ m_lastPlayedIdleAnim : std::string
					$ m_attackHandle : int32
					$ m_onAttackStopped : RtReflectionDelegateBase
				PlantAnimRig_Endurian 278
				PlantAnimRig_Stallia 278
					$ m_hasPlayedFirstIdle : bool
					% onFirstIdleCompleted : *
				PlantAnimRig_MoonFlower 2A0
					$ m_layerSet : AnimRigLayerSet
				PlantAnimRig_Nightshade 2E8
					$ m_lastPlayedIdleAnim : std::string
					$ m_pfLayerSet : AnimRigLayerSet
					$ m_boostedLayerSet : AnimRigLayerSet
				PlantAnimRig_ShadowShroom 2A0
					$ m_boostedLayerSet : AnimRigLayerSet
				PlantAnimRig_Dusklobber 2A8
					$ m_lastPlayedIdleAnim : std::string
					$ m_boostedLayerSet : AnimRigLayerSet
				PlantAnimRig_Grimrose 2B0
					$ m_layerSet : AnimRigLayerSet
					$ m_timesCanBeUsedWhenNotBoosted : int32
					$ m_timesCanBeUsedWhenBoosted : int32
					$ m_numTimesUsed : int32
				PlantAnimRig_Kernelpult ?
					<NONE>
				PlantAnimRig_Springbean 280
					$ m_lastPlayedIdleAnim : std::string
				PlantAnimRig_CoconutCannon 280
					$ m_lastUsedIdleAnim : std::string
				PlantAnimRig_Spikerock 278
					$ m_lostHorns : int32
				PlantAnimRig_Iceweed 278
					$ m_hasBeenPlantfooded : bool
				PlantAnimRig_FirePeashooter 288
					$ m_effects : std::vector<RtWeakPtr<Effect_PopAnim>>
				PlantAnimRig_Imitater ?
					<NONE>
				PlantAnimRig_HypnoShroom ?
					<NONE>
				PlantAnimRig_Peanut 280
					$ m_attackTopBottomToggle : bool
					$ m_shieldDamageIndex : int32
				PlantAnimRig_Torchwood ?
					<NONE>
				PlantAnimRig_PowerLily 278
				PlantAnimRig_Chomper 278
					$ m_currentAnimationHandle : int32
				PlantAnimRig_GhostPepper 278
					% onAttackStartFinished : *
				PlantAnimRig_HomingThistle 278
				PlantAnimRig_SweetPotato 278
					PlantAnimRig_HotDate 278
				PlantAnimRig_Sapfling 278
				PlantAnimRig_LavaGuava 298
					$ m_linearCrackEffects : std::vector<RtWeakPtr<Effect_PopAnim>>
					$ m_lengthOfCrack : int32
					$ m_initialized : bool
					$ m_startingSquare : Point
				PlantAnimRig_Dandelion 278
				PlantAnimRig_Toadstool 280
					$ m_toadstoolState : int32
					$ m_currentAnimationHandle : int32
					% onTongueAttackContinued : *
					% onBitingCompleted : *
					% onChewingContinued : *
					% onPlantfoodTongueAttackContinued : *
					% onPlantfoodChewingContinued : *
				PlantAnimRig_Strawburst 288
					$ m_lastUsedIdleAnim : std::string
					$ m_currentGrowthStage : uint8
					% growthAnimComplete : *
				PlantAnimRig_Cactus 278
					% onCowerContinued : *
					% onCowerEnded : *
					$ m_hasBeenPlantfooded : bool
				PlantAnimRig_ElectricBlueberry 278
				PlantAnimRig_JackOLantern 278
				PlantAnimRig_BloomingHearts ?
					<NONE>
				PlantAnimRig_EscapeRoot 2A8
					% onInitialPlantDone : *
					% onSelectedDone : *
					$ m_submerged : bool
					$ m_selected : bool
					$ m_attackType : int32
					$ m_layerSet : AnimRigLayerSet
				GridItemAnimRig_BombegranateSeeds 278
					$ m_seedState : SeedsState
				PlantAnimRig_MissileToe ?
					<NONE>
				PlantAnimRig_Parsnip 278
				PlantAnimRig_WitchHazel 278
				PlantAnimRig_Caulipower 280
					$ m_plant : RtWeakPtr<class Plant>
				PlantAnimRig_HollyKnight 278
					$ m_numDamageStates : int32
				PlantAnimRig_HollyBarrierLeaf ?
					<NONE>
				PlantAnimRig_Empowermint 278
				PlantAnimRig_SnapPea 278
				PlantAnimRig_ZoybeanPod 298
					$ m_prevAnim : std::string
					$ m_plant : RtWeakPtr<Plant>
					$ m_basicPreOpenSmokeDuration : float
					$ m_basicPostOpenSmokeDuration : float
					$ m_smokeMachine : RtWeakPtr<Effect_ZoybeanPodSmoke>
				PlantAnimRig_Reincarnation 290
					$ m_growthLevel : int32
				PlantAnimRig_Electricitea 278
				PlantAnimRig_Blastberry ?
					<NONE>
				PlantAnimRig_Pokra 2A8
					$ m_deferredAnimStoppedDelegate : RtReflectionDelegateBase
					% finishTripleJabLoop : *
					% finishQuadrupleJabLoop : *
				PlantAnimRig_PyreVine 278
				PlantAnimRig_IceBloom 278
				PlantAnimRig_Ultomato 2B0
					$ m_level : int32
					$ m_attackHandle : int32
					$ m_onAttackStopped : RtReflectionDelegateBase
				PlantAnimRig_Dartichoke 278
				PlantAnimRig_ShineVine 278
				PlantAnimRig_Tumbleweed 278
				PlantAnimRig_OlivePit 278
					$ m_chewLoopEnd : float
				PlantAnimRig_Turkeypult 278
				PlantAnimRig_HeadbutterLettuce 278
				PlantAnimRig_Boingsetta 278
					$ m_isArmedAndReady : bool
				PlantAnimRig_StickybombRice 278
				PlantAnimRig_HocusCrocus 278
				PlantAnimRig_GloomVine ?
					<NONE>
				PlantAnimRig_BoomFlower 278
					$ m_isReadyToFire : bool
					% PlayIdleLooped : *
				PlantAnimRig_Pvine 278
				PlantAnimRig_PowerVine 2A0
					$ m_layerSet : AnimRigLayerSet
				PlantAnimRig_Noctarine 278
					$ m_shadowBoosted : bool
				PlantAnimRig_NoctarineCloud 278
					$ m_shadowBoosted : bool
				PlantAnimRig_HeathSeeker 278
				PlantAnimRig_TigerGrass 278
					$ m_currentGrowthStage : uint8
				PlantAnimRig_TeleportatoMine 278
				PlantAnimRig_Buttercup 278
				PlantAnimRig_BrambleBush 278
					$ m_berryCount : int32
				PlantAnimRig_MegaGatling 278
					$ m_hasBeenPlantfooded : bool
				PlantAnimRig_Levitater 278
				PlantAnimRig_TombTangler ?
					<NONE>
				PlantAnimRig_Shielded 278
					PlantAnimRig_Tallnut ?
						<NONE>
					PlantAnimRig_Wallnut 278
					PlantAnimRig_ExplodeONut ?
						<NONE>
					PlantAnimRig_Pumpkin 280
						$ m_currentArmorIndex : int32
						$ m_hasShield : bool
					PlantAnimRig_ExplodeOVine ?
						<NONE>
					PlantAnimRig_Murkadamia 2A8
						$ m_attacking : bool
					PlantAnimRig_Blockoli 278
				- PlantCustomLayers
					$ m_baseName : std::string
			EffectAnimRig_DelayReplayAnim 188
				$ m_timeMin : float
				$ m_timeMax : float
				$ m_timeTillNextPlay : float
				$ m_animName : std::string
				EffectAnimRig_IslandNode 188
			EffectAnimRig_LinkedTileGlow ?
				<NONE>
			PopAnimRig_ZenGardenBee 170
			GridItemZombiePortal_AnimRig 180
				$ m_state : int32
				$ m_portalType : std::string
			EffectAnimRig_UniversePortal 170
			ZombieAnimRig 1A0
				$ m_state : int32
				$ m_groundTrackName : std::string
				$ m_lastGroundTrackOffset : float
				$ m_desiredVelocity : float
				$ m_animRateModifier : float
				$ m_needsToDieRequestedTime : float
				$ m_readyToDie : bool
				$ m_zombieType : std::string
				ZombieAnimRig_Piano 1A8
					$ m_damageState : int32
					$ m_piano : RtWeakPtr<RtObject>
					% onPianoPlayAnimationEnd : *
					% onPianoDamageAnimationEnd : *
				ZombieAnimRig_BeachFisherman 1A0
				ZombieAnimRig_BeachSnorkel 1D8
					$ m_PROTOTYPE_startingOffset : float
					$ m_PROTOTYPE_targetOffset : float
					$ m_PROTOTYPE_offsetChangeTime : float
					$ m_PROTOTYPE_onLerpDoneDelegate : RtReflectionDelegateBase
				ZombieAnimRig_Bull 1A0
					$ m_running : bool
				ZombieAnimRig_Chicken 1B0
					$ m_color : Color
					ZombieAnimRig_Weasel 1B0
					ZombieAnimRig_TigerGrassTiger 1B0
						$ m_currentGrowthStage : uint8
				ZombieAnimRig_ChickenFarmer 1A0
					ZombieAnimRig_WeaselHoarder 1A0
				ZombieAnimRig_Prospector 1A0
				ZombieAnimRig_DarkJuggler 1A0
				ZombieAnimRig_DarkKing 1A0
				ZombieAnimRig_DarkWizard ?
					<NONE>
				ZombieAnimRig_Explorer ?
					<NONE>
				ZombieAnimRig_Ra ?
					<NONE>
				ZombieAnimRig_TombRaiser 200
					$ m_onAnimDone : RtReflectionDelegateBase
					$ m_onThrow : RtReflectionDelegateBase
				ZombieAnimRig_EightiesBoombox 1A0
				ZombieAnimRig_EightiesBreakDancer 1A0
					$ m_jamActive : bool
				ZombieAnimRig_Gargantuar 1A0
					ZombieAnimRig_EightiesGargantuar 1A0
					ZombieAnimRig_ZoybeanPodGargantuar 1A0
					ZombieAnimRig_LostCityGargantuar 1A0
						$ m_hasTorch : bool
					ZombieAnimRig_Mech 1A0
						% onStunStartEnd : *
						ZombieAnimRig_FutureProtector 1A0
						ZombieAnimRig_DiscoMech 1A0
							$ m_endDance : bool
							% onDanceStartEnd : *
							% onDanceIdleLooped : *
							% onDanceEndEnd : *
						ZombieAnimRig_ConeMech 1A0
						ZombieAnimRig_FootballMech 1A0
					ZombieAnimRig_ZCorpGargantuar 1A0
				ZombieAnimRig_EightiesGlitter 1A0
				ZombieAnimRig_EightiesMC 1A0
					$ m_jamActive : bool
				ZombieAnimRig_EightiesPunk 1A0
					$ m_isJamming : bool
				ZombieAnimRig_FutureJetpack 1A0
					$ m_discoMode : bool
				ZombieAnimRig_Hero 1A0
				ZombieAnimRig_TreasureYeti 1A0
				ZombieAnimRig_HamsterBall 1A0
					$ m_barrelDamageIndex : int32
				ZombieAnimRig_GeneralBase ?
					<NONE>
					ZombieAnimRig_GeneralCaesar ?
						<NONE>
					ZombieAnimRig_GeneralTreadmill ?
						<NONE>
					ZombieAnimRig_GeneralZmech ?
						<NONE>
					ZombieAnimRig_CakeTank ?
						<NONE>
				ZombieAnimRig_Gum 1A0
				ZombieAnimRig_Statue 1A0
				ZombieAnimRig_Dodo 1A0
				ZombieAnimRig_Hunter ?
					<NONE>
				ZombieAnimRig_LostCityBug 1A8
					$ m_basicHelm : BasicHelmType
					$ m_hasTakenCatastrophicDamage : bool
				ZombieAnimRig_CrystalSkull ?
					<NONE>
				ZombieAnimRig_ImpPorter 1A0
				ZombieAnimRig_LostCityJane ?
					<NONE>
				ZombieAnimRig_LostCityLostPilot 1A0
					$ m_isHanging : bool
					ZombieAnimRig_ZCorpHelpdesk 1A0
						$ m_hasLaptop : bool
				ZombieAnimRig_Swashbuckler 1A0
					ZombieAnimRig_RelicHunter 1A0
				ZombieAnimRig_ModernAllStar 1A0
				ZombieAnimRig_ModernBalloon 1A0
					$ m_hasBalloon : bool
				ZombieAnimRig_Newspaper 1A0
					$ m_hasNewspaper : bool
				ZombieAnimRig_PirateBarrel 1A0
					$ m_barrelDamageIndex : int32
				ZombieAnimRig_PirateBarrelPusher 1A0
					$ m_hasShield : bool
				ZombieAnimRig_PirateCannon ?
					<NONE>
				ZombieAnimRig_PirateCaptain 1A0
				ZombieAnimRig_Parrot 1A0
					ZombieAnimRig_Dove 1A0
				ZombieAnimRig_Seagull 1A0
				ZombieAnimRig_RomanHealer ?
					<NONE>
				ZombieAnimRig_RomanBallista ?
					<NONE>
				ZombieAnimRig_Consultant 1A0
				ZombieAnimRig_Zcorp_Racer 1A0
					$ m_rolling : bool
				ZombieAnimRig_Monkey 1A0
					% onAnimationDone : *
				ZombieAnimRig_Magician ?
					<NONE>
				ZombieAnimRig_FireBreather ?
					<NONE>
				ZombieAnimRig_StiltWalker 1A0
					$ m_hasStilts : bool
				ZombieAnimRig_Camel 1A0
					ZombieAnimRig_CamelAlmanac ?
						<NONE>
					ZombieAnimRig_RomanShield 1A0
					ZombieAnimRig_RomanTopShield 1A0
				ZombieWithPushingActionAnimRig 208
					$ m_pushingActionOnLoopingAnimContinued : RtReflectionDelegateBase
					$ m_pushingActionOnAnimStopped : RtReflectionDelegateBase
					$ m_startPush : bool
					% onAnimContinued : *
					ZombieAnimRig_EightiesArcade 208
					ZombieAnimRig_Troglobite 208
						% onAnimContinued : *
						ZombieAnimRig_Medusa 208
				ZombieAnimRig_Sarcophagus 1A8
					$ m_hasShield : bool
				ZombieAnimRig_StaticArtPrototype ?
					<NONE>
				ZombieAnimRig_Basic 1B0
					$ m_flagType : ZombieFlagType
					$ m_helmType : HelmType
					$ m_helmDamageIndex : int32
					$ m_helmFlashStart : float
					ZombieAnimRig_EgyptFlag ?
						<NONE>
					ZombieAnimRig_FutureBasic 1B0
					ZombieAnimRig_CowboyFlag ?
						<NONE>
					ZombieAnimRig_PirateFlag ?
						<NONE>
					ZombieAnimRig_EgyptBasic ?
						<NONE>
					ZombieAnimRig_RomanBasic 1B0
					ZombieAnimRig_FutureFlag ?
						<NONE>
					ZombieAnimRig_BeachSurfer 1B0
						$ m_hasSurfboard : bool
					ZombieAnimRig_Poncho 1B8
						$ m_hasPlate : bool
						$ m_plateDamageIndex : int32
					ZombieAnimRig_DinoBasic 1B0
						ZombieAnimRig_DinoBully 1B0
					ZombieAnimRig_EightiesBasic 1B0
					ZombieAnimRig_Imp 1B0
						ZombieAnimRig_FutureImp 1B0
							$ m_isFallingFromSky : bool
							% onStunStartEnd : *
							ZombieAnimRig_SummerImp 1B0
						ZombieAnimRig_ModernSuperfanImp 1B0
							$ m_kicked : bool
						ZombieAnimRig_RomanImp 1B0
						ZombieAnimRig_ZCorpImp 1B0
						ZombieAnimRig_ZcorpRacerZombie 1B0
						ZombieAnimRig_CarnieImpTwins 1B0
						ZombieAnimRig_DarkImp ?
							<NONE>
						ZombieAnimRig_BullRider ?
							<NONE>
					ZombieAnimRig_ZoybeanPodBasic 1B0
					ZombieAnimRig_LostCityBasic 1B0
					ZombieAnimRig_LostCityExcavator 1B0
						$ m_hasShovel : bool
					ZombieAnimRig_CarnieGrinderhead 1B0
					ZombieAnimRig_DarkFlag ?
						<NONE>
					ZombieAnimRig_CowboyBasic 1B0
						$ m_dancing : bool
					ZombieAnimRig_BeachBasic 1B0
						ZombieAnimRig_Octopus ?
							<NONE>
					ZombieAnimRig_DarkBasic 1B0
					ZombieAnimRig_IceAgeBasic ?
						<NONE>
					ZombieAnimRig_ZCorpBasic ?
						<NONE>
					ZombieAnimRig_ZCorpFem ?
						<NONE>
					ZombieAnimRig_Tutorial 1B0
						ZombieAnimRig_TutorialSpring 1B0
							$ m_everHadHelm : bool
						ZombieAnimRig_TutorialBirthday 1B0
						ZombieAnimRig_TutorialSummer 1B0
					ZombieAnimRig_BeachFlag ?
						<NONE>
					ZombieAnimRig_PirateBasic ?
						<NONE>
				ZombieAnimRig_ZombossMech 1A0
					ZombieAnimRig_ZombossMech_Pirate 1A0
						ZombieAnimRig_ZombossMech_Circus 1A0
					ZombieAnimRig_ZombossMech_Future 1A0
						$ m_queuedTileClass : int32
					ZombieAnimRig_ZombossMech_Cowboy 1A0
					ZombieAnimRig_ZombossMech_Beach 1A0
						$ m_playingIdle : bool
					ZombieAnimRig_ZombossMech_Dark 1A0
						$ m_playingIdle : bool
					ZombieAnimRig_ZombossMech_Dino 1A0
						$ m_playingIdle : bool
					ZombieAnimRig_ZombossMech_Eighties 1A0
					ZombieAnimRig_ZombossMech_IceAge 1A0
						$ m_isCovered : bool
					ZombieAnimRig_ZombossMech_LostCity 1A0
			GridItemEightiesArcadeCabinetAnimRig 170
			GridItemVaseAnimRig 170
				$ m_revealed : bool
				% onDropCompleted : *
			EffectAnimRig_ZombiePortal 170
			HealerStaffAnimRig 170
			EffectAnimRig_LevelNode ?
				<NONE>
				EffectAnimRig_LevelNode_Zomboss ?
					<NONE>
			EffectAnimRig_WaterSplash ?
				<NONE>
			EffectAnimRig_JalapenoFireSquare 188
				$ m_owningEffect : RtWeakPtr<RtObject>
				$ m_activationTime : float
				$ m_endTime : float
				$ m_looping : bool
				$ m_loopCount : int32
				% onJalapenoSequenceContinued : *
			EffectAnimRig_SwitchTile 188
				$ m_upAnimName : std::string
				$ m_downAnimName : std::string
			EffectAnimRig_StarGate 190
			EffectAnimRig_StunionProjectile 170
				$ m_endingAnimationLength : float
			EffectAnimRig_CoconutCannonball ?
				<NONE>
			EffectAnimRig_Iceweed ?
				<NONE>
			EffectAnimRig_FirePeashooterFireSquare 180
				$ m_owningEffect : RtWeakPtr<RtObject>
				$ m_activationTime : float
				$ m_playEndAnimation : bool
				% onFireSequenceContinued : *
				% onFireSequenceEnded : *
			EffectAnimRig_LavaGuavaCrackSquare 190
				$ m_owningEffect : RtWeakPtr<RtObject>
				$ m_activationTime : float
				$ m_playEndAnimation : bool
				$ m_crackState : int32
				$ m_crackLoc : int32
				$ m_midCrackIndex : int32
				% onCrackSequenceContinued : *
				% onCrackSequenceEnded : *
			EffectAnimRig_JackOLanternFireSquare 180
				$ m_owningEffect : RtWeakPtr<RtObject>
				$ m_activationTime : float
				$ m_fadingOut : bool
				% onSequenceContinued : *
				% onFadeEnded : *
			EffectAnimRig_PlantFoodShine 170
				$ m_playState : int32
			GridItemSliderTileAnimRig 170
			EffectAnimRig_LinkedTileConnect 170
				$ m_continueToGlow : bool
			EffectAnimRig_LinkedTile 170
				$ m_plantOnTile : bool
			CreatureAnimRig 188
				$ m_state : int32
				$ m_groundTrackName : std::string
				$ m_lastGroundTrackOffset : float
				$ m_desiredVelocity : float
				$ m_animRateModifier : float
				DinosaurAnimRig_Ankylosaurus 190
					$ m_isCharmed : bool
				DinosaurAnimRig_Pterodactyl 190
					$ m_isCharmed : bool
				DinosaurAnimRig 190
					DinosaurAnimRig_Tyrannosaurus ?
						<NONE>
					DinosaurAnimRig_Raptor 190
						$ m_facing : int32
						$ m_charmed : bool
				DinosaurAnimRig_Stegosaurus 190
					$ m_isCharmed : bool
					$ m_isHead : bool
			EffectAnimRig_SpikeweedSaw 170
				$ m_playState : int32
			EffectAnimRig_SpikeweedSpikes ?
				<NONE>
			EffectAnimRig_ZombossHologram ?
				<NONE>
			EffectAnimRig_UniverseLock 170
			GravestoneAnimRig 170
				GridItemDestroyableAnimRig 188
					$ m_customLayerRoot : std::string
					$ m_customUndamagedLayer : std::string
					$ m_totalDamageStates : int32
				SurfboardAnimRig 178
					$ m_queuedDamageStateAnim : int32
					$ m_inIntroAnim : bool
				TentAnimRig 170
					$ m_inIntroAnim : bool
					$ m_isDying : bool
				BackpackAnimRig 170
					$ m_inIntroAnim : bool
					$ m_isDying : bool
				GravestoneAnimRig_ZombieTimeSpawner 180
					$ m_helmType : HelmType
					$ m_nextRattleTime : float
					$ m_openTime : float
					$ m_isOpen : bool
					$ m_isDying : bool
		StandaloneEffect 088
			$ m_standaloneEffectFlags : int32
			$ m_screenSpaceOrigin : SexyVector2
			$ m_renderLayerOverride : int32
			$ m_renderLayer : int32
			$ m_attachmentTarget : RtWeakPtr<RealObject>
			$ m_attachmentScreenSpaceOffset : SexyVector2
			$ m_attachmentRenderLayerOffset : int32
			$ m_shouldDraw : bool
			$ m_onCompletion : RtReflectionDelegateBase
			Effect_ZombossRocket 0B8
				$ m_rocketController : RtWeakPtr<RtObject>
				$ m_rocketEffect : RtWeakPtr<RtObject>
				$ m_targetGridSquare : Point
				$ m_curves : CurveCollection_Float
			Effect_ImageCommon 0A0
				$ m_imageColor : Color
				$ m_centered : bool
				$ m_scale : float
				Effect_StaticImage 0A8
					$ m_image : RtWeakPtr<Image>
				Effect_OwnedImage 0A0
					Effect_SeedPacket 0B0
						$ m_plantName : std::string
						$ m_quantity : int32
			Effect_FloatingText 110
				$ m_createdTime : float
				$ m_destroyTime : float
				$ m_fadeInDuration : float
				$ m_fadeOutDuration : float
				$ m_text : std::wstring
				$ m_color : Color
				$ m_initScale : FPoint
				$ m_scale : FPoint
				$ m_finalScale : FPoint
				$ m_scaleInitTransition : bool
				$ m_scaleFinalTransition : bool
				$ m_paragraphSize : Point
				$ m_isParagraph : bool
				$ m_screenSpaceVelocity : SexyVector2
				$ m_screenSpaceAcceleration : SexyVector2
				$ m_positionCurve : CurveSequence_SexyVector3
				$ m_scaleCurve : CurveSequence_SexyVector3
				$ m_positionCurveIsScreenSpace : bool
				$ m_style : int32
			Effect_ChallengeFailedMessage 098
				$ m_message : std::wstring
				$ m_spawnTime : float
			Effect_BouncingArrow 0A0
				$ m_image : RtWeakPtr<Image>
				$ m_startTime : float
				$ m_rotationRads : float
				$ m_minBounceHeightScreenSpace : float
				$ m_maxBounceHeightScreenSpace : float
			Effect_ScreenFade 098
				$ m_screenFadeSequence : std::vector<SingleScreenFade>
				$ m_currentFade : int32
				$ m_currentFadeTimer : float
				- SingleScreenFade
					$ Direction : int32
					$ FadeColor : Color
					$ Duration : float
					$ Curve : int32
			Effect_PopAnim 0E8
				$ m_rig : RtWeakPtr<PopAnimRig>
				$ m_animSequence : AnimationSequence
				$ m_animSequenceCurrentIndex : int32
				$ m_animSequenceCurrentIndexStartTime : float
				$ m_xFocusFraction : float
				$ m_yFocusFraction : float
				$ m_xScale : float
				$ m_yScale : float
				$ m_orientation : float
				$ m_translation : SexyVector2
				% onAnimStopped : *
				Effect_GroundEffectTide ?
					<NONE>
				Effect_GroundEffectSurf 0E8
					$ m_scale : float
				Effect_ChilibeanGasCloud 0F0
					$ m_targetZombie : RtWeakPtr<Zombie>
				PlantTangleKelpTentacle 108
					$ m_zombieToEat : RtWeakPtr<Zombie>
					$ m_zombieToSlap : RtWeakPtr<Zombie>
					$ m_instigator : RtWeakPtr<BoardEntity>
					$ m_slapDamage : float
				Effect_GarlicStinkLines 0F0
					$ m_targetZombie : RtWeakPtr<Zombie>
				PlantGrimroseTentacle 100
					$ m_currentState : int32
					$ m_zombieToEat : RtWeakPtr<Zombie>
					$ m_zombieToSlap : RtWeakPtr<Zombie>
					$ m_shadowSuckVelocity : float
					$ m_slapDamage : float
				GhostPepperAttackAnim 0E8
				Effect_ZoybeanPodSmoke 0E8
				TombTanglerFogEffect 0E8
				TombTanglerDragEffect 118
					$ m_isPlantFood : bool
					$ m_isSpecialZombie : bool
					$ m_currentState : int32
					$ m_zombieToEat : RtWeakPtr<Zombie>
					$ m_shadowSuckVelocity : float
					$ m_specialZombieDamage : float
				MoonFlowerGlowAnimEffect 0E8
					$ m_introFinished : bool
				EffectObject 0F0
					$ m_type : RtWeakPtr<RtObject>
					EffectObject_StretchedScrollingImage 108
						$ m_movementCurves : CurveCollection_Float
					EffectObject_FrostWind 0F8
						$ m_timeToApplyFrost : float
						$ m_row : int32
					EffectObject_DamageOverTime 100
						$ m_currentState : int32
					EffectObject_AnimSequence 0F0
					EffectObject_StrawburstPlantfood 100
						$ m_instigatorTeam : int32
						$ m_instigatorFamilies : std::vector<std::string>
						% onPopAnimCommand : *
					EffectObject_TargetPlant 130
						% onPopAnimCommand : *
						$ m_targetGridLoc : Point
						$ m_owner : RtWeakPtr<Plant>
						$ m_attackType : int32
						$ m_layerSet : AnimRigLayerSet
					EffectObject_BurrowAttack 108
						% onPopAnimCommand : *
						$ m_owner : RtWeakPtr<Plant>
						$ m_targetZombie : RtWeakPtr<Zombie>
						$ m_isZombieExcluded : bool
					EffectObject_LevelPlanting ?
						<NONE>
				- AnimationSequenceEntry
					$ AnimationLabel : std::string
					$ SelectionMethod : int32
					$ LoopingDuration : float
				- AnimationSequence
					$ m_animationEntries : std::vector<AnimationSequenceEntry>
			Effect_ZombossCrosshair 0A8
				$ m_crosshairEffect : RtWeakPtr<RtObject>
				$ m_curves : CurveCollection_Float
			Effect_ZombieGate 098
				$ m_gateRig : RtWeakPtr<PopAnimRig>
				$ m_row : int32
				$ m_gateVisible : bool
				% OnAnimDone : *
		PropertySheetBase 020
			$ ScaledProps : std::vector<BoardEntityScaledPropsEntry>
			CreaturePropertySheet 0B0
				$ Speed : float
				$ SpeedVariance : float
				$ ExitSpeedup : float
				$ GridHeight : int32
				$ HitRect : Rect
				$ AttackRect : Rect
				$ ArtCenter : SexyVector2
				$ ShadowOffset : SexyVector3
				$ ShadowScaling : SexyVector2
				$ GroundTrackName : std::string
				$ GridExtents : Point
				$ ZombieStats : std::vector<BoardEntityStat>
				$ SoundOnWalk : std::string
				$ SoundOnIdle : std::string
				$ AlmanacScale : float
				$ AlmanacOffset : SexyVector2
				DinosaurPropertySheet 0C8
					$ ActivationGridX : int32
					$ Timeout : float
					$ UnaffectedZombies : ClassRestrictionSet
					DinosaurAnkylosaurusPropertySheet 0D8
						$ PauseBetweenAttacks : float
						$ AttackRangeMinX : int32
						$ MaxZombiesToFling : int32
						$ MaxGridDistanceToFling : int32
					DinosaurPterodactylPropertySheet 0F8
						$ MovementSpeed : float
						$ MinimumX : int32
						$ MaximumX : int32
						$ GrabbingRangeError : float
						$ NumSecondsToCooldownAfterCarryingZombie : float
						$ NumZombiesToCarry : int32
						$ ValidZombieTypes : ZombieRestrictionSet
					DinosaurTyrannosaurusPropertySheet 0F0
						$ EatCooldown : float
						$ MaxZombiesToEat : int32
						$ EatGridX : int32
						$ EatRect : Rect
						$ MaxTimesToRoar : int32
						$ RoarDelay : float
						$ Cooldown : float
					DinosaurRaptorPropertySheet 0F0
						$ MaxKicks : int32
						$ LeftMostKickGridX : int32
						$ TossTime : float
						$ TossHeight : float
						$ TossDistance : float
						$ FlipAttackRect : Rect
						$ KickRectFudgeFactor : int32
					DinosaurStegosaurusPropertySheet 100
						$ NumTimesToToss : int32
						$ NumZombiesToFling : int32
						$ ZombieAnnoyingGridX : int32
						$ ActivationGridRangeStartX : float
						$ ActivationGridRangeWidth : float
						$ TossReadyUpTime : float
						$ TossTime : float
						$ TossHeight : float
						$ TossDistanceMin : float
						$ TossDistanceMax : float
						$ TailDamageRadius : float
						$ TailSmashDamage : int32
						$ TailAOEDamage : int32
						$ ZombieTailStaggerX : float
			ZombieSpawnerPattern 038
				$ RowStartOffset : std::vector<int>
				$ RowBetweenOffset : std::vector<int>
			AwardConfigPropertySheet 028
				$ GiftBoxRewards : std::vector<LevelOfTheDay_RewardItemType>
			LevelGenData 068
				$ Config : std::map<std::string RT_COMMA float>
				$ WorldConfigs : std::map<std::string RT_COMMA LevelGenWorldConfigEntry>
				$ WaveData : std::map<std::string RT_COMMA LevelGenWaveDataEntry>
				$ ZombieData : std::map<std::string RT_COMMA LevelGenZombieDataEntry>
				$ EventGroupData : std::map<std::string RT_COMMA LevelGenEventGroupDataEntry>
				$ CustomSeeds : std::vector<LevelGenCustomSeedEntry>
				- LevelGenLevelParams
					$ Title : std::string
					$ Description : std::string
					$ LevelNumber : int32
					$ DisableSaveGame : bool
				- LevelGenParams
					$ World : std::string
					$ Seed : std::string
					$ UniqueIdentifier : std::string
					$ LevelParams : LevelGenLevelParams
				- LevelGenWaveResult
					$ Budget : float
					$ Actual : float
					$ Zombies : std::vector<std::string>
					$ PlantFoodCount : int32
				- SelectedObstacleLayout
					$ ObstacleType : DangerRoomBoardGridType
					$ LevelDesignerType : std::string
					$ GridMap : RtWeakPtr<BoardGridMapProps>
				- LevelGenResults
					$ Params : LevelGenParams
					$ Events : std::vector<std::string>
					$ Obstacles : std::vector<std::string>
					$ WaveConfig : std::string
					$ Strength : float
					$ ZombieTypes : std::vector<std::string>
					$ PlantFoodTotal : int32
					$ Waves : std::vector<LevelGenWaveResult>
					$ SelectedObstacleLayouts : std::vector<SelectedObstacleLayout>
					$ ClaimedObstacleSquares : BoardGridMapProps
				- LevelGenWorldConfigEntry
					$ World : std::string
					$ GameMode : std::string
					$ StageModule : std::string
					$ LootModule : std::string
					$ DefaultModules : std::vector<std::string>
					$ RequiredEventGroupIds : std::vector<std::string>
					$ AdditionalEventGroupIds : std::vector<std::string>
					$ MinEventCount : int32
					$ MaxEventCount : int32
					$ ObstacleGroupIds : std::vector<std::string>
					$ MinObstacleCount : int32
					$ MaxObstacleCount : int32
				- LevelGenWaveDataEntry
					$ UID : std::string
					$ Weight : float
					$ StrengthMin : float
					$ StrengthMax : float
					$ MaxZombieTypes : int32
					$ KeywordLimits : std::map<std::string RT_COMMA int>
					$ PlantFoodMin : int32
					$ PlantFoodMax : int32
					$ HugeWaves : std::vector<int>
					$ Waves : std::vector<float>
				- LevelGenZombieDataEntry
					$ ZombieTypeID : std::string
					$ Weight : float
					$ Strength : float
					$ Worlds : std::vector<std::string>
					$ Keywords : std::vector<std::string>
				- LevelGenEventDataEntry
					$ EventID : std::string
					$ PropertySheet : std::string
					$ EventLevel : int32
					$ Prerequisite : std::string
					$ Priority : int32
					$ Weight : float
				- LevelGenEventGroupDataEntry
					$ EventGroupID : std::string
					$ EventData : std::map<std::string RT_COMMA LevelGenEventDataEntry>
					$ IsObstacleGroup : bool
				- LevelGenCustomSeedEntry
					$ World : std::string
					$ Seed : std::string
			PlantPropertySheet 148
				$ TypeName : std::string
				$ Cost : int32
				$ BeghouledCost : int32
				$ Hitpoints : float
				$ PacketCooldown : float
				$ StartingCooldown : float
				$ PlantFoodDurationSeconds : float
				$ PlantFoodPlayCount : int32
				$ PlantFoodShineTime : float
				$ PlantFoodActivationSound : std::string
				$ HelpedActivationSound : std::string
				$ PlantGridType : PlantGridPlantingType
				$ Actions : std::vector<PlantAction>
				$ Powers : PowerSet
				$ GridWidth : int32
				$ GridHeight : int32
				$ GridItemDamage : int32
				$ PlantingOffsetY : float
				$ CursorPreviewOffset : SexyVector2
				$ ArtCenter : SexyVector2
				$ ZenGardenOffset : SexyVector2
				$ ZenGardenSmallScale : float
				$ ZenGardenLargeScale : float
				$ HitRectAdjust : Rect
				$ Height : BoardEntityHeight
				$ DangerRoomWeight : int32
				$ ZenGardenSproutWeight : int32
				$ ZenGardenBoostCost : int32
				$ ZenGardenDurationOverrideSeconds : int32
				$ IsZenGardenTreasurePlant : bool
				$ IsZenGardenWaterPlant : bool
				$ Boosts : std::vector<PlantBoost>
				$ PlantStats : std::vector<BoardEntityStat>
				$ ValidStages : std::vector<std::string>
				$ SuggestionAlts : std::vector<std::string>
				$ RestrictPlantingToGridArea : Rect
				$ CanReceiveFirstAid : bool
				$ IsConsumable : bool
				$ IsInstant : bool
				$ CanLiveOnWaves : bool
				$ IdleAnimationWeights : std::map<std::string RT_COMMA int>
				$ AnimRigProps : RtWeakPtr<PlantAnimRigPropertySheet>
				$ HidePlantingEffects : bool
				$ MasteryBoostChance : float
				$ MasteryResistancePiercing : float
				$ MultiPlantLayer : MultiPlantGridLayer
				$ CanPlantAgainToUpgrade : bool
				SnowPeaProps 150
					$ PlantFoodProjectileCount : int32
					$ PercentChanceOfFreezingPea : float
				RepeaterProps 148
					$ PlantFoodProjectileCount : int32
				SplitpeaProps 150
					$ PlantFoodForwardProjectileCount : int32
					$ PlantFoodBackwardProjectileCount : int32
				KernelpultProps 168
					$ ButterChance : float
					$ ButterStormDuration : float
					$ AdditionalButterStormMissiles : int32
					$ ButterStormDelay : float
					$ ButterStormMissileSpeed : float
					$ ButterDuration : float
					$ ProjectileLobHeight : float
					$ ProjectileTimeOfFlight : float
				MelonpultProps 158
					$ NormalProjectileLobHeight : float
					$ NormalProjectileTimeOfFlight : float
					$ PlantfoodProjectileLobHeight : float
					$ PlantfoodProjectileTimeOfFlight : float
					WintermelonProps 158
						$ ChillDuration : float
				CoconutCannonProps 150
					$ MinimumSpeedScaleWhilePushing : float
					$ NumPushedZombiesForMinSpeed : int32
					$ ExplodeAtXPosition : float
				SpringbeanProps 168
					$ KnockbackTime : float
					$ KnockbackOffset : float
					$ KnockbackHeight : float
					$ AttackRecoveryTime : float
					$ RectZombieProximity : Rect
				SpikeweedProps 160
					$ PFSpikeDamage : int32
					$ PFSpikeCooldown : float
					$ PFSpikeOffset : SexyVector2
					$ PlantFoodDPS : int32
					$ PFConveyorSpeed : float
				SquashProps 150
					$ SquashRadius : int32
					$ PlantfoodZombiesToTarget : int32
					$ NormalZombiesToTarget : int32
					- TargetProbabilityItem
						$ Number : int32
						$ Weight : int32
				MagnifyingGrassProps 1C8
					$ SunMoneyPerShot : int32
					$ SunSuckInTime : float
					$ PlantFoodBeamDPS : float
					$ PlantFoodBeamMovementRate : float
					$ PlantFoodBeamStartOffset : Point
					$ PlantFoodOriginArtOffset : Point
					$ PlantFoodBeamStartArtOffset : Point
					$ PlantFoodBeamEndArtOffset : Point
					$ PlantFoodHitEffectPivotOffset : Point
					$ PlantFoodBeamMaxTargetingAngleDegrees : float
					$ PlantFoodBeamMaxTargetingDistance : float
					$ PlantFoodPulseDamage : float
					$ SunproducerTypes : std::vector<std::string>
					$ SunproducerOriginatingPlantOffset : SexyVector3
					$ SunproducerTargetMagnifyingGrassOffset : SexyVector3
					$ SunproducerExtendTime : float
					$ SunproducerContractTime : float
					$ SunproducerBeamStartOffset : Point
					$ SunproducerBeamEndOffset : Point
				BloverProps 150
					$ WindAccel : float
					$ UpPercent : float
					$ WindGiveHelpLimit : int32
				EMPeaProps 160
					$ ActivateImmediately : bool
					$ TapToActivate : bool
					$ AffectedZombieTypes : std::vector<std::string>
					$ ActivationRadius : float
					$ ActivationRecoveryTime : float
					$ StunTime : float
				HolonutProps 160
					$ RegenAfterDamage : bool
					$ DelayBeforeRegenFromDamage : float
					$ RegenAfterDeath : bool
					$ DelayBeforeRecoverFromDeath : float
					$ SoundOnRegen : std::string
				StarFruitProps 150
					$ PlantFoodProjectileCount : int32
					$ FireHeight : float
				BloomerangProps 160
					$ PlantFoodProjectileCount : int32
					$ BoomerangHitCount : int32
					$ BoomerangSlowdownRadius : float
					$ BoomerangMinSpeedPercentage : float
					$ BoomerangPauseDuration : float
					$ BoomerangStunsZombies : bool
				ImitaterProps 148
					$ NewPlantFadeInTime : float
				PowerLilyProps 148
				PlantCoinDispenserProps 148
					$ PlantFoodCoinsToSpawn : int32
				PuffshroomProps 160
					$ PlantFoodProjectileCount : int32
					$ ExpirationDurationSeconds : float
					$ ExpirationBlinkTime : float
					$ PlantfoodPropagationDelayBaseSeconds : float
					$ PlantfoodPropagationDelayPerTileDistanceSeconds : float
					$ PlantfoodResetsDecayForAllPuffshrooms : bool
				FumeshroomProps 148
					$ PlantFoodPushSpeed : float
				PowerPlantProps 150
					$ NumberOfFreeTiles : int32
					$ FirstNonFreeCost : int32
					$ CostMultiplier : float
				SunBeanProps 158
					$ SunMultiplierOnPlantfoodBurst : float
					$ MaxSunPerZombieOnPlantfoodBurst : float
					$ SunPerHitpoint : float
					$ MaxSunPerZombie : float
					$ OnlyLargeSun : bool
				MagnetShroomProps 180
					$ GridSquareRangeWidth : int32
					$ GridSquareRangeHeight : int32
					$ InitialPulledObjectSpeed : float
					$ PulledObjectAcceleration : float
					$ DestroyPulledObjectsTime : float
					$ MaxPlantFoodObjects : int32
					$ PlantFoodCollectTime : float
					$ PlantFoodProjectileType : RtWeakPtr<RtObject>
					$ PullableZombieTypes : std::vector<std::string>
					$ PullableZombieHeadTypes : std::vector<std::string>
				HypnoShroomProps 158
					$ HealsOnHypnosis : bool
					$ HypnotismHealPercentage : float
					$ CannotBeHypnotized : std::vector<std::string>
				LilyPadProps 148
				PlantLauncherProps 158
					$ NumPlantfoodRockets : int32
					$ FireTime : float
					$ PlantfoodFireTime : float
					$ TargetOffset : SexyVector2
					HollyKnightProps 1A0
						$ PlantfoodMinTargets : int32
						$ PlantfoodUnaimedRepeatCount : int32
						$ PlantfoodUnaimedOffsetStart : int32
						$ PlantfoodUnaimedSlotDegrees : float
						$ StartingNumCharges : int32
						$ DamagePhases : DamageLifetime
						$ ProjectileDamage : float
						$ ProjectileDamagePF : float
						$ ProjectileKnockback : int32
						$ ProjectileKnockbackPF : int32
						$ BarrierLeafHitpoints : int32
						$ BarrierLeafDamage : float
						$ BarrierLeafHitpointsPF : int32
						$ BarrierLeafDamagePF : float
						$ AttackDamage : float
					BoomFlowerProps 170
						$ BalloonSplashDamage : int32
						$ BalloonDamage : int32
						$ PFBalloonSplashDamage : int32
						$ PFBalloonDamage : int32
						$ NormalRechargeSeconds : float
				BananaProps 158
					$ NumPlantfoodRockets : int32
					$ FireTime : float
					$ PlantfoodFireTime : float
					$ TargetOffset : SexyVector2
				TangleKelpProps 160
					$ MinPlantfoodWaterKills : int32
					$ MaxPlantfoodWaterKills : int32
					$ MaxNormalWaterKills : int32
					$ ZombieDrownExcludeList : std::vector<std::string>
					$ SlapDamage : float
				ChomperProps 170
					$ NumberOfPlantfoodTargets : int32
					$ ChewDamage : float
					$ PFChewDamage : float
					$ SuctionSpeed : float
					$ BurpingSpeed : float
					$ ChewTimeSeconds : float
					$ BurpingTimeSeconds : float
					$ ZombieChewExcludelist : std::vector<std::string>
					$ GobbleCapacity : int32
				GuacodileProps 148
				SunpodProps 148
					$ SunBankPerTier : int32
				SunGunProps 148
					$ AngleVarianceInDegrees : float
				EmpowermintProps 180
					$ PlantLifetime : float
					$ PowerUpRegion : Rect
					$ HealPlants : bool
					$ PlantfoodPlants : bool
					$ BoardFlashColor : Color
					$ GlowEffectColor : Color
					FilamintProps 190
						$ NumShotBounces : int32
						$ BounceDamagePercent : float
						$ BounceDelay : float
						$ DecayDelay : float
					PeppermintProps 188
						$ FireDuration : float
						$ FireDamageTick : float
						$ FireDamagePerTick : float
					WintermintProps 180
						$ ChillDuration : float
					EnlightenmintProps 180
					ReinforcemintProps 188
						$ KnockbackTime : float
						$ KnockbackHeight : float
						$ KnockbackDistance : float
					BombardmintProps 188
						$ TimeBetweenExplosions : float
						$ NumExplosions : int32
					AilmintProps 188
						$ PoisonDuration : float
						$ PoisonDamage : float
					EnchantmintProps 1A0
						$ NumHypnotizeTargets : int32
						$ CannotBeHypnotized : ZombieRestrictionSet
						$ HealsOnHypnosis : bool
						$ HypnotismHealPercentage : float
					ContainmintProps 180
						$ StunDuration : float
					EnforcemintProps 198
						$ ShrinkTime : float
						$ NumShrinkTargets : int32
						$ CannotBeShrunk : ZombieRestrictionSet
					ArmamintProps 190
						$ StunDuration : float
						$ FireTime : float
						$ NumProjectiles : int32
						$ TargetOffset : SexyVector2
					ConcealmintProps 238
						$ NumSwallowTargets : int32
						$ CannotBeSwallowed : ZombieRestrictionSet
						$ BoostRadius : ComponentConditionRadiusProps
					SpearmintProps 190
						$ NumPlantsToSpawn : int32
						$ LevelOfSpawnedPlants : int32
						$ PlantTypeToSpawn : std::string
					AppeasemintProps 188
						$ NumberOfProjectiles : int32
						$ NumberOfChildProjectiles : int32
						$ TimeBetweenShots : float
				ShadowPeashooterProps 168
					$ PlantFoodProjectileCount : int32
					$ PoweredAttackSlowDuration : float
					$ PoweredAttackSlowMinimumDuration : float
					$ PoweredAttackDecayPerZombieHit : float
					$ ShadowBoostedZombieSwallows : int32
					$ PlantFoodBombTravelTime : float
					$ ZombieSwallowExcludeList : std::vector<std::string>
				PoisonPeashooterProps 180
					$ MaxStacks : int32
					$ PoisonDPSPerStack : float
					$ SpeedPercentDecreasePerStack : float
					$ PoisonAndSlowDuration : float
					$ PlantfoodPoisonDPS : float
					$ PlantfoodSpeedPercentDecrease : float
					$ PlantfoodPoisonAndSlowDuration : float
					$ PlantfoodKnockBackDistance : float
					$ PlantfoodKnockBackTime : float
					$ PlantfoodKnockBackHeight : float
					$ GridItemLifetime : float
					$ GridItemPoisonAndSlowDuration : float
					$ GridItemSpeedPercentDebuff : float
					$ GridItemPoisonDPS : float
				ArmamintPeashooterProps 158
					$ ProjectileLobHeight : float
					$ ProjectileTimeOfFlight : float
					$ NumberOfShots : int32
					$ NumberOfPlantFoodShots : int32
				GraveBusterProps 150
					$ EatTime : float
					$ DirtFadeTime : float
				CabbagepultProps 1A8
					$ NormalLaunchProps : PultProjectileProps
					$ PlantfoodLaunchProps : PultProjectileProps
				BowlingBulbProps 150
					$ MaxAmmo : int32
					$ AmmoRefreshTime : float
					$ RegenOrder : BowlingBulbRegenOrder
				ChilibeanProps 158
					$ DuplicationInformation : DuplicatableProps
				LightningReedProps 168
					$ NumShotBounces : int32
					$ BounceDamagePercent : float
					$ BounceDelay : float
					$ DecayDelay : float
					$ PlantFoodCloudSpeed : float
					$ PlantFoodLightningBoltDamage : float
					$ PlantFoodAttackCooldown : float
					$ PlantFoodCloudDuration : float
				SunflowerProps 148
					$ PlantFoodSunCount : int32
					SunshroomProps 148
				PeashooterProps 148
					$ PlantFoodProjectileCount : int32
					PeanutProps 150
						$ PlantFoodShieldHitpoints : float
				PrimalWallnutProps 148
					$ SmashDamage : float
				PlantPerfumeShroomProps 188
					$ CharmBurstProps : ComponentPropagatedBurstProps
				PotatomineProps 238
					$ DuplicationInformation : DuplicatableProps
					$ ExplodeRadius : ComponentDamageRadiusProps
					$ TimeUntilArmed : float
				PhatBeetProps 150
					$ PowerfulAttackRatioMin : float
					$ PowerfulAttackRatioMax : float
				CeleryStalkerProps 158
					$ PlantFoodPlantsToSpawn : int32
					$ RetractionDelay : float
					$ HitPointRemainingForDamage1 : float
					$ HitPointRemainingForDamage2 : float
				ThymeWarpProps 168
					$ TimeBeforeWarpStart : float
					$ TimeOfWarpOut : float
					$ TimeZombieIsGone : float
					$ TimeOfWarpIn : float
					$ WarpZombieHP : float
					$ ConditionsRemovedByWarping : std::vector<ZombieConditions>
				GarlicProps 1E8
					$ FromEating : GarlicStateInfo
					$ FromPlantfood : GarlicStateInfo
					$ PlantFoodGasEffectDelay : float
					$ ZombiesAffectedByEating : ZombieRestrictionSet
					$ ZombiesAffectedByPlantfood : ZombieRestrictionSet
					- GarlicStateInfo
						$ EatDuration : float
						$ RegretfulDuration : float
						$ LaneChangeDuration : float
						$ StunDuration : float
						$ IndifferenceDuration : float
						$ SoundOfRegret : std::string
						$ SoundOfMoveUp : std::string
						$ SoundOfMoveDown : std::string
						$ ShouldRegret : bool
				SporeshroomProps 1B8
					$ DuplicatableZombies : ZombieRestrictionSet
					$ NormalLaunchProps : PultProjectileProps
					$ PlantfoodLaunchProps : PultProjectileProps
				IntensiveCarrotProps 150
					$ PercentageOfHealthForRaisedPlant : float
					$ NewPlantFadeInTime : float
				CitronProps 148
					$ ChargeTimeMultiplier : float
				GoldbloomProps 148
				ElectricCurrantProps 1A0
					$ FromEating : GarlicStateInfo
					$ ZombiesAffectedByEating : ZombieRestrictionSet
					$ KnockbackDetails : KnockbackInfo
					- KnockbackInfo
						$ KnockbackHeight : float
						$ KnockbackDistance : float
				KiwiBeastProps 4D0
					$ GrowthStageOneDamageLimit : float
					$ GrowthStageTwoDamageLimit : float
					$ GrowthStageOneDamageRadius : ComponentDamageRadiusProps
					$ GrowthStageTwoDamageRadius : ComponentDamageRadiusProps
					$ GrowthStageThreeDamageRadius : ComponentDamageRadiusProps
					$ PlantfoodDamageRadius : ComponentDamageRadiusProps
				AloeProps 168
					$ HealCooldown : float
					$ TargetHPTriggerPercent : float
					$ TargetHPHealAmount : float
					$ PFTargetHPHealPercent : float
					$ UnhealablePlants : PlantRestrictionSet
				SproutProps 158
					$ TimeToGerminate : float
					$ PlantWeights : std::vector<std::vector<SproutPlantWeights>>
				HotPotatoProps 150
					$ BlockMeltingDuration : float
					$ ProximityDPS : float
					$ CanRemoveOctopus : float
				PepperpultProps 150
					$ ProjectileLobHeight : float
					$ ProjectileTimeOfFlight : float
					$ PlantfoodProjectilesToFire : int32
				ChardGuardProps 170
					$ PushesPerLeaf : int32
					$ KnockbackTime : float
					$ KnockbackOffset : float
					$ KnockbackHeight : float
					$ PFKnockbackTime : float
					$ PFKnockbackOffset : float
					$ PFKnockbackHeight : float
					$ RectZombieProximity : Rect
				StunionProps 158
					$ PlantfoodProjectileDistance : float
					$ PoisonDPS : float
					$ StaticGasCloudPAMOffset : SexyVector2
				XShotProps 150
					$ PlantFoodProjectileCount : int32
					$ PlantFoodAngleVarianceInDegrees : float
					$ FireHeight : float
				AkeeProps 158
					$ ProjectileLobHeight : float
					$ ProjectileTimeOfFlight : float
					$ NormalProjectileBounceCount : int32
					$ PFProjectileBounceCount : int32
				EndurianProps 148
					$ PlantFoodShieldHitpoints : float
				StalliaProps 150
					$ Knockback : float
					$ StallDuration : float
					$ PlantfoodStallDuration : float
				GoldLeafProps 148
				MoonFlowerProps 208
					$ BoostRadius : ComponentConditionRadiusProps
					$ SunPerNeighbor : int32
					$ MaxSunProduction : int32
					$ ShadowBoostable : PlantRestrictionSet
				NightshadeProps 190
					$ MeleeDamage : float
					$ PFMeleeDamage : float
					$ LeafRespawnCooldown : float
					$ TargetProps : TargetInfoProps
				ShadowShroomProps 158
					$ PoisonDPS : float
					$ PoisonDuration : float
					$ CannotBePoisoned : std::vector<std::string>
				DusklobberProps 150
					$ ProjectileLobHeight : float
					$ ProjectileTimeOfFlight : float
					$ PlantfoodProjectilesToFire : int32
				GrimroseProps 1E0
					$ MaxPlantfoodKills : int32
					$ NumTimesToActivateWhenNotPowered : int32
					$ NumTimesToActivateWhenPowered : int32
					$ ShadowStretcherProps : ComponentVisualStretcherProps
					$ ZombieDeathExcludeList : std::vector<std::string>
					$ SlapDamage : float
				SnapdragonProps 150
					$ ProjectilePAM : std::string
				IceweedProps 170
					$ PFSpikeDamage : int32
					$ PFSpikeOffset : SexyVector2
					$ PlantFoodDPS : int32
					$ PFSpikes : int32
					$ PFBladeDistance : float
					$ PFBladeKnockback : float
					$ HitPointsUpgraded : float
				FirePeashooterProps 350
					$ FlameThrowerLengthInNumTiles : float
					$ PercentChanceOfPlasmaPea : float
					$ NormalWarmingRadius : ComponentWarmingRadiusProps
					$ PlantfoodWarmingRadius : ComponentWarmingRadiusProps
				TorchwoodProps 358
					$ ConvertProjectiles : std::vector<ConvertProjectileNameNode>
					$ NormalWarmingRadius : ComponentWarmingRadiusProps
					$ PlantfoodWarmingRadius : ComponentWarmingRadiusProps
					$ LevelToStartAutoBoost : int32
					- ConvertProjectileNameNode
						$ InputType : std::string
						$ OutputType : std::string
						$ PFOutputType : std::string
						$ AudioEventName : std::string
				GhostPepperProps 168
					$ DamagePerPulse : float
					$ RateOfDamagePulsing : float
					$ ChainDamage : float
					$ NumChainJumps : int32
					$ Lifetime : float
					$ DeathExplosionDamage : float
					$ DeathExplosionRadius : float
					$ PlantfoodDamageMult : float
					$ PlantfoodDamageRadiusMult : float
				HomingThistleProps 158
					$ ThistlePlantfoodMinTargets : int32
					$ ThistlePlantfoodUnaimedRepeatCount : int32
					$ ThistleUnaimedOffsetStart : int32
					$ ThistleAimedOffsetStart : int32
					$ ThistleUnaimedSlotDegrees : int32
				SweetPotatoProps 188
					$ MovableZombies : ZombieRestrictionSet
					$ NormalAttractRect : Rect
					$ PlantfoodAttractRect : Rect
					$ LaneChangeTime : float
					$ TimeBetweenLaneChanges : float
					$ DrawAttractRects : bool
					HotDateProps 288
						$ NormalWarmingRadius : ComponentWarmingRadiusProps
				LavaGuavaProps 350
					$ ExplosionRadius : float
					$ ExplosionDamage : float
					$ CrackLengthInNumTiles : float
					$ NormalWarmingRadius : ComponentWarmingRadiusProps
					$ PlantfoodWarmingRadius : ComponentWarmingRadiusProps
				SapflingProps 1C0
					$ PlantfoodPineconeCount : int32
					$ AmountToAimLeftOfZombie : float
					$ TargetableZombieTypes : ClassRestrictionSet
					$ NormalLaunchProps : PultProjectileProps
					$ PlantfoodLaunchProps : PultProjectileProps
				OlivePitProps 1C0
					$ PitCapacity : int32
					$ ChewTime : float
					$ PitExcludelist : ClassRestrictionSet
					$ PitCapacityExcludelist : ClassRestrictionSet
					$ OilItemName : std::string
					$ OilSpitRecharge : float
					$ OilSpitRange : Rect
					$ OilDuration : float
					$ OilCondition : ZombieConditions
					$ CanBeTargetedByList : ClassRestrictionSet
					$ ZombieFallTime : float
					$ PFZombiePullTime : float
					$ PFZombieFallTime : float
				HurrikaleProps 160
					$ FlyingZombieBlowingSpeed : float
					$ FlyingZombieUpAccelerationFactor : float
					$ GroundZombieBlowingSpeed : float
					$ BlowDuration : float
					$ ChillDuration : float
					$ WindGiveHelpLimit : int32
				DandelionProps 158
					$ PlantfoodProjectilesToFire : int32
					$ WindHelperProjectilesToFire : int32
					$ WindHelperCooldown : float
					$ WindHelpProjectilePeriod : ValueRange
				ToadstoolProps 2A0
					$ ZombieChewExcludelist : std::vector<std::string>
					$ TongueOffRowRangeOffset : int32
					$ TimeBetweenBites : float
					$ RectInstantGulpTriggerRange : Rect
					$ NormalTongueStretcherProps : ComponentVisualStretcherProps
					$ NormalTongueRange : float
					$ NormalTongueSlapDamage : float
					$ NormalTongueWaitTimeSeconds : float
					$ NormalChewTimeSeconds : float
					$ NormalAmountOfSunProducedPerZombie : int32
					$ PFTongueStretcherProps : ComponentVisualStretcherProps
					$ PFTargetSearchExpirationSeconds : float
					$ PFMaxNumberOfTargets : int32
					$ PFTongueRange : float
					$ PFTongueSlapDamage : float
					$ PFTongueWaitTimeSeconds : float
					$ PFChewTimeSeconds : float
					$ PFAmountOfSunProducedPerZombie : int32
				StrawburstProps 180
					$ MinimumSpeedScaleWhilePushing : float
					$ NumPushedZombiesForMinSpeed : int32
					$ ExplodeAtXPosition : float
					$ NormalLaunchProps : PultProjectileProps
				CactusProps 198
					$ DuckAndCoverRange : Rect
					$ StayDuckedRange : Rect
					$ SpikeRange : Rect
					$ SpikeDamage : int32
					$ SpikeCooldown : float
					$ PFSpikeDamage : int32
					$ PFSpikeCooldown : float
					$ ZombiesWhichDoNotCauseCower : ZombieRestrictionSet
				ElectricBlueberryProps 178
					$ PlantFoodLightningTargets : int32
					$ PlantFoodCloudSpeed : float
					$ PlantFoodLightningBoltDamage : float
					$ PlantFoodResistantLightningBoltDamage : float
					$ PlantFoodAttackCooldown : float
					$ NormalLightningTargets : int32
					$ NormalCloudSpeed : float
					$ NormalLightningBoltDamage : float
					$ NormalResistantLightningBoltDamage : float
					$ NormalAttackCooldown : float
					$ WeightTargetNormalZombie : int32
					$ WeightTargetGargantuarZombie : int32
					$ WeightTargetOtherZombie : int32
				JackOLanternProps 278
					$ WarmingRadius : ComponentWarmingRadiusProps
					$ FlameOffset : SexyVector2
					$ GridLengthOfFlamethrower : int32
					$ FlamethrowerDPS : float
					$ MaximumFireAmount : float
					$ FlamethrowerActivateCost : float
					$ FlamethrowerSustainCostPerSecond : float
					$ FlamethrowerDamageIncrementTime : float
					$ FlamethrowerDamageIncrementPercent : float
					$ FireRegenerationPerSecond : float
					$ PFWispCount : int32
				ShrinkingVioletProps 160
					$ ShrinkTime : float
					$ DamageMultiplier : float
					$ UnshrinkableZombies : ZombieRestrictionSet
				BloomingHeartsProps 150
					$ ProjectileLobHeight : float
					$ ProjectileTimeOfFlight : float
					$ PlantfoodProjectilesToFire : int32
				EscapeRootProps 178
					$ UnswappablePlants : PlantingRestrictionSet
					$ ExplodingPlantWeights : std::vector<PlantWeights>
					$ TimeUntilArmed : float
					$ SwapCooldownTime : float
					$ PlantfoodAttackCount : int32
				WasabiWhipProps 350
					$ NormalWarmingRadius : ComponentWarmingRadiusProps
					$ PlantfoodWarmingRadius : ComponentWarmingRadiusProps
					$ TargetCount : float
				AppleMortarProps 150
					$ ProjectileLobHeight : float
					$ ProjectileTimeOfFlight : float
				MissileToeProps 160
					$ NumPlantfoodRockets : int32
					$ FireTime : float
					$ PlantfoodFireTime : float
					$ TargetOffset : SexyVector2
					$ ChillDuration : float
					$ FreezeDuration : float
				ParsnipProps 148
				WitchHazelProps 198
					$ MagicOffset : SexyVector2
					$ DecayDelay : float
					$ BasicTransformationType : std::string
					$ PlantfoodTransformationType : std::string
					$ BasicTransformationLevel : int32
					$ PlantfoodTransformationLevel : int32
					$ ZombieTransformationExcludelist : ClassRestrictionSet
					$ ZombieTargetingExcludelist : ClassRestrictionSet
				CaulipowerProps 188
					$ PlantFoodTargets : int32
					$ PlantFoodAttackCooldown : float
					$ PlantFoodPushBackDistance : float
					$ PlantFoodPushBackHeight : float
					$ PlantFoodPushBackTime : float
					$ NormalHypnoTargets : int32
					$ NormalAttackCooldown : float
					$ HealsOnHypnosis : bool
					$ HypnotismHealPercentage : float
					$ WeightTargetNormalZombie : int32
					$ WeightTargetGargantuarZombie : int32
					$ WeightTargetOtherZombie : int32
					$ CannotBeHypnotized : ZombieRestrictionSet
				PlantSolarTomatoProps 158
					$ SolarFlareStunDuration : float
					$ SolarFlareDamage : float
					$ ExplosionWidth : int32
					$ ExplosionHeight : int32
				ElectricPeashooterProps 160
					$ BoltFrequency : float
					$ BoltCount : int32
					$ BoltRange : float
					$ BoltDamage : float
					$ PFProjectileSpawnCount : int32
					$ PFSubProjectileSpawnCount : int32
				HollyBarrierLeafProps 170
					$ AttackEffectPopAnimID : std::string
					$ AttackEffectAnim : std::string
					$ DamagePhases : DamageLifetime
					$ IsFromPlantFood : bool
				MiniPeashooterProps 158
					$ MiniPeasNeededBetweenTiers : int32
					$ MaxDamageTier : int32
					$ BaseDamageMultiplier : float
					$ DamageTierMultiplier : float
				SnapPeaProps 190
					$ ChewTimeSeconds : float
					$ FiredZombieHeadAttackCooldownSeconds : float
					$ CouldNotEatAttackCooldownSeconds : float
					$ PlantfoodTargetCount : int32
					$ ZombieEatTypeExcludelist : ZombieRestrictionSet
					$ ZombieEatExcludelist : ClassRestrictionSet
					$ ZombieBurrowAttackExcludelist : ClassRestrictionSet
				BurnadeProps 170
					$ MaxUsesAfterPlantfood : int32
					$ TimedExplosionProps : ComponentTimedExplosionProps
				ZoybeanPodProps 168
					$ ZombieTypeToSpawn : std::string
					$ PlantFoodZombieTypeToSpawn : std::string
					$ ZombieLevel : int32
					$ PlantFoodZombieLevel : int32
					$ CycleTime : float
				PlantReincarnationProps 150
					$ PetalAmount : int32
					$ RecoveryTime : float
				ElectriciteaProps 168
					$ BoltCount : int32
					$ BoltRange : float
					$ ElectricBurstBoltCount : int32
					$ ElectricBurstBoltRange : float
					$ ElectricBurstNumBounces : int32
					$ ElectricBurstBounceDamagePercent : float
					$ ElectricBurstDecayDelay : float
					$ ElectricBurstBounceDelay : float
				BlastberryProps 168
					$ ProjectileLobHeight : float
					$ ProjectileTimeOfFlight : float
					$ PlantfoodProjectilesToFire : int32
					$ ChildProjectileNum : int32
					$ PFChildProjectileNum : int32
					$ ChildDamage : float
					$ PFChildDamage : float
					$ ChildSplashRadius : float
					$ PFChildSplashRadius : float
				PokraProps 170
					$ RecoveryTime : float
					$ SlowDuration : float
					$ SlowDurationFinal : float
					$ SlowDurationPF : float
					$ TimeBetweenAttacks : float
					$ PhaseOneAttackRateOverrideValue : float
					$ PhaseTwoAttackRateOverrideValue : float
					$ PhaseThreeAttackRateOverrideValue : float
					$ PhaseFourAttackRateOverrideValue : float
					$ BasicProjectileAttackRateOverrideValue : float
					$ PlantfoodProjectileAttackRateOverrideValue : float
				ImpPearProps 170
					$ PFZombiesImped : int32
					$ ImpIndigestion : int32
					$ ZombiePFExcludelist : ClassRestrictionSet
					$ ImpType : std::string
				PyreVineProps 260
					$ WarmingRadius : ComponentWarmingRadiusProps
					$ FlameOffset : SexyVector2
					$ PFFlameDamage : int32
					$ GridLengthOfFlamethrower : int32
					$ FlamethrowerDPS : float
				IceBloomProps 158
					$ IceBlockDamagePhases : DamageLifetime
					$ IceBlockHealth : float
				UltomatoProps 178
					$ BeamStartOffset : Point
					$ BeamStartArtOffset : Point
					$ BeamEndArtOffset : Point
					$ BeamDPSUpgrade1 : int32
					$ BeamDPSUpgrade2 : int32
					$ BeamDPSUpgrade3 : int32
					$ HitpointsUpgrade2 : int32
					$ HitpointsUpgrade3 : int32
					$ CostPerExistingPlant : int32
					$ ResetLaunchTimeOnUpgrade : float
				DartichokeProps 180
					$ ThistlePlantfoodUnaimedRepeatCount : int32
					$ ThistleUnaimedOffsetStart : int32
					$ ThistleAimedOffsetStart : int32
					$ ThistleUnaimedSlotDegrees : int32
					$ DartichokeNormalBoostChance : float
					$ MainTargetPriority : ClassBucketFilter
					$ PlantfoodStartOffset : std::vector<ValueRange>
					$ DartichokeMaxAmmo : int32
					$ DartichokeOutOfAmmoSadSeconds : float
				GumnutProps 178
					$ GumZombieType : std::string
					$ BaseGumHealth : float
					$ ZombieGumHealthPercent : float
					$ PFZombiesGummed : int32
					$ ProjectileLobHeight : float
					$ ProjectileTimeOfFlight : float
					$ TargetPriorityBuckets : ClassBucketFilter
				ShineVineProps 160
					$ SunProductionModifier : int32
					$ SunProducerExcludelist : PlantRestrictionSet
				TumbleweedProps 160
					$ BonusTumblersChance : float
					$ BonusTumblersAmount : int32
					$ BonusTumblersTimeBetween : float
					$ TumbleStunChance : float
					$ TumbleStunDuration : float
					$ KnockbackDistance : float
					$ KnockbackChance : float
				PuffballProps 150
					$ DecayPoisonDPS : float
					$ ConfettiPropagationDelay : float
				ExplodeOVineProps 160
					$ InitialExplosionDamage : float
					$ RegularExplosionDamage : float
					$ PFExplosionDamage : float
					$ KnockbackRadius : float
					$ KnockbackDistance : float
					$ KnockbackTime : float
					$ KnockbackHeight : float
				MurkadamiaProps 180
					$ MurkRegenerationDelay : float
					$ MurkRegenerationDPS : float
					$ MurkArmorMax : float
					$ MurkArmorInitial : float
					$ MurkReflectionDamage : float
					$ MurkDamageAnimThreshold : float
					$ MurkUnboostedLayers : std::vector<std::string>
					$ MurkBoostedLayers : std::vector<std::string>
					$ BoostAnimLayers : std::map<std::string RT_COMMA std::vector<std::string>>
				TurkeypultProps 1C8
					$ TurkeyTypeToSpawn : std::string
					$ PlantfoodTurkeyTypeToSpawn : std::string
					$ TurkeyLevel : int32
					$ NormalLaunchProps : PultProjectileProps
					$ PlantfoodLaunchProps : PultProjectileProps
				HeadbutterLettuceProps 160
					$ ButterChance : float
					$ MinButterQuantity : int32
					$ MaxButterQuantity : int32
					$ PFButterQuantity : int32
					$ ButterDuration : float
					$ ButterTimeOfFlight : float
					$ ButterLobHeight : float
				BoingsettaProps 160
					$ ZombiePlantfoodDamage : float
					$ KnockbackTime : float
					$ KnockbackHeight : float
					$ KnockbackOffset : float
					$ PlantfoodKnockbackTime : float
					$ PlantfoodKnockbackHeight : float
					$ PlantfoodKnockbackOffset : float
				StickybombRiceProps 170
					$ ProjectileLobHeight : float
					$ ProjectileTimeOfFlight : float
					$ ProjectileCount : int32
					$ CreatedBombTimer : float
					$ CreatedBombExplodeRadius : float
					$ CreatedBombBaseDamage : float
					$ CreatedBombPropagationMultiplier : float
					$ PlantfoodCreatedBombTimer : float
					$ PlantfoodCreatedBombExplodeRadius : float
					$ PlantfoodCreatedBombBaseDamage : float
					$ PlantfoodCreatedBombPropagationMultiplier : float
				HocusCrocusProps 170
					$ TeleportRechargeTime : float
					$ TeleportInitialDelay : float
					$ TimeZombieGone : float
					$ TeleportDamage : float
					$ PFZombiesTeleported : int32
					$ CannotTeleport : ZombieRestrictionSet
				GloomVineProps 1E8
					$ BoostRadius : ComponentConditionRadiusProps
				DraftodilProps 168
					$ FlyingZombieBlowingSpeed : float
					$ FlyingZombieUpAccelerationFactor : float
					$ SlowDuration : float
					$ SlowdownPercentage : float
					$ BlowDuration : float
					$ WindGiveHelpLimit : int32
					$ PFShots : int32
					$ LightweightZombieFlickChance : float
					$ PFLightweightZombieFlickChance : float
				PvineProps 1F8
					$ PlantFoodProjectileCount : int32
					$ BoostRadius : ComponentFamilyConditionRadiusProps
				InfernoProps 150
					$ TornadoDuration : float
					$ PFTornadoDuration : float
					$ CycloneZombieCap : int32
				SolarSageProps 178
					$ IlluminationExcludeList : ClassRestrictionSet
					$ SunSpawnOffset : SexyVector2
					$ InfectivityPercentage : float
					$ InfectivityPercentagePF : float
					$ SunProductionTimer : float
					$ SunProductionTimerCap : float
					$ InfectivityCooldown : float
					$ InfectivityRange : float
				PowerVineProps 180
					$ PFRotationAngleDegrees : float
					$ NetworkPlantMin : int32
					$ NetworkShots : int32
					$ NetworkedPlantFoodPlayCount : int32
					$ NetworkShotCooldown : float
					$ PFEmpBurstIncludeList : ZombieRestrictionSet
					$ EmpBurstActivationRadius : float
					$ EmpBurstStunTime : float
					$ PFProjectileRotationOffset : ValueRange
				NoctarineProps 190
					$ PoweredActionDamage : float
					$ ExplosionPAMOffset : SexyVector2
					$ ActionDamageCloud : float
					$ PoweredActionDamageCloud : float
					$ GasDamageBonus : float
					$ PoweredGasDamageBonus : float
					$ GasDuration : float
					$ PoweredGasDuration : float
					$ PoweredSlowDuration : float
					$ PoweredExplosionChance : float
					$ CorpseExplosionDamage : float
					$ CorpseExplosionGridSquareHeight : float
					$ CorpseExplosionGridSquareWidth : float
					$ ZombieExcludeList : ClassRestrictionSet
				NoctarineCloudProps 1F8
					$ BoostRadius : ComponentFamilyConditionRadiusProps
				HeathSeekerProps 160
					$ DartCount : int32
					$ DartStartOffset : int32
					$ DartSlotDegree : int32
					$ PiercingDamage : int32
					$ FinalDamage : int32
					$ MaxTargets : int32
					$ DartsDiffTime : float
				TigerGrassProps 1B8
					$ TigerHealing : float
					$ TigerRegenTime : float
					$ GrowthTime : float
					$ TigerHealth : float
					$ GlobalGrowthMultiplier : float
					$ TigerPFHealth : float
					$ PounceDamageMultiplier : float
					$ TigerTypeToSpawn : std::string
					$ NormalLaunchProps : PultProjectileProps
					$ ZombiesExcludeList : ClassRestrictionSet
				TeleportatoMineProps 178
					$ ArmingTime : float
					$ TeleportationUnitLimit : int32
					$ CannotTeleport : ZombieRestrictionSet
					$ TimeOfWarpOut : float
					$ TimeZombieIsGone : float
					$ TimeOfWarpIn : float
					$ ConditionsRemovedByWarping : std::vector<ZombieConditions>
				ButtercupProps 1D0
					$ AmountToAimLeftOfZombie : float
					$ ZombiesExcludeList : ClassRestrictionSet
					$ NormalLaunchProps : PultProjectileProps
					$ PlantfoodLaunchProps : PultProjectileProps
					$ ButterLifetime : float
					$ PFButterLifetime : float
					$ ButterConditionDuration : float
					$ PFButterConditionDuration : float
				BlockoliProps 150
					$ ShieldSmashStunDuration : float
					$ ShieldSmashCooldown : float
				BrambleBushProps 188
					$ TrapNumber : int32
					$ KnockbackDistance : float
					$ KnockbackHeight : float
					$ KnockbackTime : float
					$ RetrapDelay : float
					$ ZombieDragSpeed : float
					$ ZombieTrapExcludelist : ClassRestrictionSet
					$ ZombieTrapUseExcludelist : ClassRestrictionSet
				RhubarbarianProps 190
					$ LifespanTimer : float
					$ TimerPauseDuration : float
					$ InitialSmashDamage : float
					$ InitialStunDuration : float
					$ InitialSmashDamageWidth : float
					$ InitialSmashDamageHeight : float
					$ LeapStunDamageWidth : float
					$ LeapStunDamageHeight : float
					$ LeapDistanceCap : float
					$ LeapStunDuration : float
					$ LeapDamage : float
					$ LeapProps : RhubarbarianLeapProps
					$ ZombieFlickExcludeList : ClassRestrictionSet
					- RhubarbarianLeapProps
						$ FlightTime : float
						$ ApexHeight : float
				MegaGatlingProps 150
					$ ChanceToPF : float
					$ PlantFoodDurationSeconds : float
					$ PlantFoodProjectileCount : int32
				LevitaterProps 198
					$ LevitateAttackCoolDown : float
					$ ZombieFloatTime : float
					$ ZombieFloatTimePF : float
					$ ChanceTo2ndLevitate : float
					$ ChanceToLevitatePF : float
					$ ChanceTo2ndLevitatePF : float
					$ FlickHeight : float
					$ RotationVelocity : float
					$ PFLevitationFrequency : float
					$ NoOfTilesToLevitate : float
					$ ZombiesExcludeList : ClassRestrictionSet
					$ ZombiesDestroyList : ClassRestrictionSet
				TombTanglerProps 1A8
					$ FogZombieSlowDownPercentage : float
					$ HealthConversionPercentage : float
					$ FogPullChance : float
					$ FogPullChanceTickTime : float
					$ PFTargets : int32
					$ UndergroundDamage : int32
					$ PullZombieExcludelist : ClassRestrictionSet
					$ SlowDownExcludelist : ClassRestrictionSet
					$ InvulnerableZombieIncludelist : ClassRestrictionSet
					$ PullExcludeZombieConditions : std::vector<ZombieConditions>
				- Rect
					$ mX : int32
					$ mY : int32
					$ mWidth : int32
					$ mHeight : int32
				- PowerNode
					$ Type : PowerType
					$ Context : PowerContext
					$ Props : std::string
				- PowerSet
					$ List : std::vector<PowerNode>
				- PlantAction
					$ Type : PlantActionType
					$ Projectile : RtWeakPtr<ProjectilePropertySheet>
					$ ExplodeType : SplashDamageType
					$ ExplodeRadius : float
					$ TriggerType : PlantActionTriggerType
					$ DieAfterExplode : bool
					$ InitialMinCooldownTime : float
					$ CooldownTimeMin : float
					$ CooldownTimeMax : float
					$ XVelocityOverride : float
					$ Damage : int32
					$ SplashDamage : int32
					$ Burns : bool
					$ PushbackAmount : int32
					$ ChillDuration : float
					$ FreezeDuration : float
					$ StunDuration : float
					$ RectTriggerRange : Rect
					$ ProjectileLaunchSound : std::string
					$ SpawnOffset : SexyVector2
					$ SecondaryAction : bool
				- PlantBoost
					$ PlantBoostProps : RtWeakPtr<PlantBoostPropertySheet>
					$ Value : float
					$ CooldownDurationSeconds : float
			PultProjectileProps 030
				$ TimeOfFlight : float
				$ LobHeight : float
				$ TimeOfFlightVariance : float
				$ LobHeightVariance : float
				$ FireOnlyForward : bool
			ProjectilePropertySheet 188
				$ ClassName : std::string
				$ BaseDamage : float
				$ HealAmount : float
				$ CollisionFlags : std::vector<CollisionTypeFlags>
				$ DamageFlags : std::vector<DamageTypeFlags>
				$ SplashDamage : float
				$ SplashRadius : float
				$ StunDuration : float
				$ SplashRadiusBaseDamageCutoff : float
				$ ShakeBoardOnSplash : bool
				$ DiesOnImpact : bool
				$ HasShadow : bool
				$ ImpactSoundForce : bool
				$ RotateToMatchVelocity : bool
				$ FollowsGround : bool
				$ OverrideStunCondition : ZombieConditions
				$ InitialVelocity : std::vector<ValueRange>
				$ InitialAcceleration : std::vector<ValueRange>
				$ InitialVelocityScale : std::vector<ValueRange>
				$ InitialHeight : ValueRange
				$ InitialRotation : ValueRange
				$ InitialAngularVelocity : ValueRange
				$ InitialScale : ValueRange
				$ AttachedPAM : std::string
				$ AttachedPAMAnimRigClass : std::string
				$ AttachedPAMOffset : SexyVector2
				$ AttachedPAMEffectOffset : SexyVector2
				$ AttachedPAMAnimationToPlay : std::vector<std::string>
				$ ShadowImage : std::string
				$ SpawnPAM : std::string
				$ SpawnPAMAnimationToPlay : std::vector<std::string>
				$ SpawnPAMOffset : std::vector<ValueRange>
				$ RenderColor : Color
				$ RenderImage : std::string
				$ CollisionRect : FRect
				$ ImpactSoundEvent : std::string
				$ ImpactSoundThrottleTimer : float
				$ ImpactPAM : std::string
				$ ImpactPAMAnimationToPlay : std::vector<std::string>
				$ ImpactOffset : std::vector<ValueRange>
				$ ImpactShowsAtZombieFeet : bool
				$ Conditions : std::vector<ZombieConditionEntry>
				PennyPerkShockwaveProjectileProperties 188
				SnowballProjectileProps 190
					$ MinZombieDamagePct : float
					$ MaxDamage : float
				SandbagProjectileProps 190
					$ ImpactRadiusX : int32
					$ ImpactRadiusY : int32
				ShockWaveProjectileProps 188
				PowerDrinkProjectileProps 190
					$ ConditionToApply : ZombieConditions
				HelpdeskLaptopProjectileProps 188
				BouncingAndRollingProjectileProps 190
					$ BounceAngleInRadians : float
					$ BounceOutwardTendency : float
					BowlingBulbProjectileProps 1A0
						$ HitsUntilFirstAward : int32
						$ HitsUntilRepeatAward : int32
						$ LootAwardOnHits : Loot
					TumbleweedProjectileProps 1B8
						$ KnockbackTime : float
						$ KnockbackHeight : float
						$ TossChanceBuckets : ClassBucketFilter
						$ TossChance : std::vector<float>
				FishHookProjectileProps 188
				GuacodileProjectileProps 190
					$ ChompsPerSecond : float
					$ DamagePerChomp : float
				PrimalPeashooterProjectileProps 1A0
					$ StunDuration : float
					$ KnockbackChance : float
					$ KnockbackDistance : float
					$ KnockbackTime : float
					$ KnockbackHeight : float
				GiantPlasmaProjectileProps 198
					$ MinTossAngle : float
					$ MaxTossAngle : float
					$ TossSpeed : float
					$ TossSpinRadiansPerSecond : float
				AkeeProjectileProps 198
					$ ProjectileRetargetingRadius : float
					$ PropertyReductionMultiplierPerBounce : float
					$ DamageReductionAmountPerBounce : float
				DusklobberPlantfoodProjectileProps 198
					$ ShrapnelDamage : float
					$ ShrapnelRadius : float
					$ PauseBeforeStartingFlower : float
				SnowPeaProjectileProps 190
					$ LinearAOE : float
				SnowPeaFreezingProjectileProps 190
					$ LinearAOE : float
				HomingThistleLeafProps 190
					$ MaxRotationsPerSecond : float
					$ Lifetime : float
				SapflingProjectileProps 198
					$ SapItemName : std::string
				ButtercupProjectileProps 198
					$ ButterItemName : std::string
				DandelionProjectileProps 1A8
					$ ResistancePerSecond : float
					$ LaneChangeStartOffsetY : float
					$ LaneChangeStartVelocityY : float
					$ DriftDecayZPeriod : float
					$ DriftDecayZTargetVelocity : float
					$ DriftDecayXPeriod : float
					$ DriftDecayXTargetVelocity : float
				CactusProjectileProps 190
					$ InitialPierceChance : int32
					$ PierceChanceReductionPerHit : int32
				GrapeshotProjectileProps 1A0
					$ BounceAngleInRadians : float
					$ BounceOutwardTendency : float
					$ BouncesUntilSelfDestruct : int32
					$ EndingPAM : std::string
				BloomingHeartsProjectileProps 198
					$ MaximumStacks : float
					$ StacksToAdd : float
					$ AdditionalDamagePerStack : float
				ParsnipProjectileProps 190
					$ ChompsPerSecond : float
					$ DamagePerChomp : float
				CaulipowerProjectileProps 190
					$ InitialPositionOffset : SexyVector2
				ElectricPeaPlantfoodSubProps 190
					$ SlowDownPercentage : float
					$ SlowDownTime : float
				HollyKnightLeafProps 1A8
					$ KnockbackChance : float
					$ KnockbackTime : float
					$ KnockbackHeight : float
					$ ShieldType : std::string
					$ IsFromPlantFood : bool
				PoisonPeashooterPlantFoodProjectileProps 188
				PoisonPeashooterProjectileProps 188
				SnapPeaMedusaProjectileProps 1C0
					$ PetrificationArea : Rect
					$ CannotBePetrified : ClassRestrictionSet
					$ PetrifiedHealthMultiplier : float
					$ PetrifiedZombieType : std::string
				BlastberryMainProjectileProps 1A0
					$ ChildProjectileType : std::string
					$ ChildProjectileXStart : float
					$ ChildProjectileXSpacing : float
				DartichokeLeafProps 190
					$ MaxRotationsPerSecond : float
					$ Lifetime : float
				DraftodilProjectileProps 1A8
					$ WindAccel : float
					$ UpPercent : float
					$ CanBlowAway : ClassRestrictionSet
				BoomFlowerProjectileProps 190
					$ BalloonLifetime : int32
					$ BalloonMaxMerge : int32
				BoomFlowerPlantfoodProjectileProps 188
				InfernoProjectileProps 1C8
					$ TimeBetweenDamagePulses : float
					$ DamagePulseMultiple : float
					$ UnmovableZombies : ZombieRestrictionSet
					$ MeltableGridItems : GridItemRestrictionSet
					$ InitialExtraVelocityStart : float
					$ InitialExtraVelocitySeconds : float
					$ InitialExtraVelocityCurve : CurveType
					InfernoPFProjectileProps 1D0
						$ LaneChangeTime : float
						$ TimeBetweenLaneChanges : float
						$ CyclonePullSquareRange : float
				HeathSeekerProjectileProps 190
					$ MaxRotationsPerSecond : float
					$ Lifetime : float
				BoulderProjectileProps 1A0
					$ RollingVelocity : SexyVector3
					$ BounceElasticity : float
					$ BounceThreshold : float
			QuestRewardTablesProps 028
				$ TablesConfig : std::vector<QuestRewardsTablesConfig>
				- QuestRewardsWeightedAwardEntry
					$ Type : AwardType
					$ SubType : std::string
					$ MinAmount : int32
					$ MaxAmount : int32
					$ Weight : int32
				- QuestRewardsTablesConfig
					$ Difficulty : int32
					$ Awards : std::vector<QuestRewardsWeightedAwardEntry>
			JoustPropertySheet 0C8
				$ ReplayRecordEventBasePeriodSecondsMin : float
				$ ReplayRecordEventBasePeriodSecondsMax : float
				$ FreePlayRechargeTimeSeconds : float
				$ NetworkTimeoutSeconds : float
				$ MaxRewardStreakMultiplier : int32
				$ RewardStreakRetentionCost : std::vector<int>
				$ LeagueIcons : std::vector<std::string>
				$ LeagueNames : std::vector<std::string>
				$ ShortLeagueNames : std::vector<std::string>
				$ PlantReplayRestrictions : PlantReplayRestrictionsData
				$ LeagueReplayRestrictions : std::vector<LeagueReplayRestrictionEntry>
				$ PredefinedLoadouts : std::vector<PredefinedLoadoutGroup>
				$ HowToPlayData : HowToPlayScreenData
				$ PlantsRequiredToUnlock : int32
				$ EndOfTournamentManagement : EndOfTournamentManagementInfo
				$ MatchRequestRetryCount : int32
				- PredefinedLoadoutEntry
					$ PlantType : std::string
					$ PlantLevel : int32
					$ IsImitater : bool
				- PredefinedLoadoutGroup
					$ Name : std::string
					$ Loadouts : std::vector<std::vector<PredefinedLoadoutEntry>>
				- TimedPlantExcludelistEntry
					$ Plant : std::string
					$ UnvaultDate : uint64
				- PlantReplayRestrictionsData
					$ InvalidPlants : std::vector<TimedPlantExcludelistEntry>
					$ MaxNumberOfPlants : int32
				- LeagueReplayRestrictionEntry
					$ MaxAveragePlantLevel : float
					$ MaxSinglePlantLevel : int32
					$ MaxAveragePlantMastery : float
					$ MaxSinglePlantMastery : int32
					$ MaxScore : uint64
				- EndOfTournamentManagementInfo
					$ ForcedMaintenanceTimeMin : int32
					$ ForcedMaintenanceTimeMax : int32
					$ LocalNoteMinDelayTime : int32
					$ LocalNoteMaxDelayTime : int32
			JoustProfilePropertySheet 058
				$ MaxAvatarIcon : int32
				$ MaxStartingAvatarIcon : int32
				$ AvatarIconPattern : std::string
				$ JoustNames : std::vector<std::string>
				$ AvatarEarnHints : std::vector<AvatarEarnHint>
				$ AvatarPages : std::vector<AvatarPage>
				- AvatarEarnHint
					$ StartIndex : int32
					$ EndIndex : int32
					$ Hint : std::string
					$ Feature : GameFeature
					$ Plant : std::string
					$ PlantLevel : int32
					$ Mystery : bool
				- AvatarPage
					$ Title : std::string
					$ Icons : std::vector<int>
			JoustSeasonSchedule 028
				$ SeasonDefinitions : std::vector<JoustSeasonDefinition>
				- JoustSeasonDefinition
					$ StartDate : uint64
					$ EndDate : uint64
					$ Name : std::string
					$ RewardsKey : std::string
			JoustSeasonRewards 070
				$ ProgressionRewards : std::vector<JoustSeasonProgressionReward>
				$ AlternateGrandPrize : JoustSeasonProgressionReward
				- JoustSeasonProgressionReward
					$ RewardThreshold : int32
					$ Reward : LevelOfTheDay_RewardItemType
					$ IsGrandPrize : bool
			ArmorPropertySheetUtils 028
				$ ToggleLayers : std::map<std::string RT_COMMA std::vector<std::string>>
			ArmorPropertySheet 088
				$ ClassName : std::string
				$ ArmorType : std::string
				$ BaseHealth : float
				$ ArmorLayers : std::vector<std::string>
				$ ArmorLayerHealth : std::vector<float>
				$ ParticleLayerOverride : std::vector<std::string>
				$ ImpactSoundEvent : std::string
				$ DropSoundEvent : std::string
				$ ArmorFlags : std::vector<ArmorTypeFlags>
				NewspaperArmorPropertySheet 090
					$ FireLayer : std::string
			DamageInfoProps 038
				$ BaseDamage : float
				$ DamageFlags : std::vector<DamageTypeFlags>
				$ Conditions : std::vector<ZombieConditionEntry>
				- ValueRange
					$ Min : float
					$ Max : float
				- ZombieConditionEntry
					$ Condition : ZombieConditions
					$ Duration : ValueRange
				- PlantConditionEntry
					$ Condition : PlantConditions
					$ Duration : ValueRange
			ComponentWarmingRadiusGlobalProperties 040
				$ WarmableGridItems : GridItemRestrictionSet
				$ StagesThatEnableWarming : std::vector<RtWeakPtr<const class LevelModuleProperties>>
			TargetInfoProps 040
				$ IgnoreZombiesFlagged : std::vector<ZombieTestFlag>
				$ IgnoreGridItemsFlagged : std::vector<GridItemTestFlag>
			TideEffectsProps 028
				$ Effects : std::vector<SexyVector2>
			ComponentTimedExplosionProps 028
				$ TimeUntilExplosion : float
				$ ExplosionDamageBasedOffZombieMaxHpPercent : float
				$ ExplosionRadius : float
			MiniGameMusicEnableList 038
				$ EnabledMiniGameSuffixes : std::vector<std::string>
				$ EnabledMiniGameWorlds : std::vector<std::string>
			PVZLiveConfig 110
				$ CDNRefreshMinutes : int32
				$ LODEventTime : int32
				$ LoadingTextCycleTime : int32
				$ CDNDownloadTimeoutSeconds : float
				$ CDNForceDownloadTimeoutSeconds : float
				$ CDNCacheExpirationMinutes : float
				$ DraperLocalNotesPollFrequency : float
				$ SeasonalCostumeLayers : std::string
				$ TestIdSeedKey : std::string
				$ TitleBackground : std::string
				$ TitleShowLogo : bool
				$ Toggles : std::vector<Toggle>
				$ EASquaredAwaitAdRewardTimeout : float
				$ EASquaredServerRetriesRemaining : int32
				$ EASquaredNextServerRetryTime : int32
				$ NimbleAgeGateTimeOut : float
				$ MetricsUploadTimeOut : float
				$ StoreReceiptValidationRetryAttempts : int32
				$ StoreReceiptValidationTimeout : int32
				$ DraperAdNetworkTimeout : int32
				$ DraperAdDisplayTimeout : float
				$ DraperEnabledLogging : DraperLogEventSettings
				$ OptionsScreenVariant : OptionsScreenUIVariants
				$ AdConfig : InGameAdConfig
				$ MemoryLimits : AppMemoryLimits
				$ GATSThrottles : std::vector<GATSThrottle>
				$ NimbleIdentityAwards : std::vector<LevelOfTheDay_RewardItemType>
				- Toggle
					$ Key : std::string
					$ Enabled : bool
					$ DisplayName : std::string
					$ Category : ToggleCategory
				- GATSThrottle
					$ Key : std::string
					$ iOS : float
					$ Android : float
					$ Value : float
				- InGameAdConfig
					$ FlamethrowerOfferProbability : float
					$ FlamethrowerOfferCooldown : float
				- OSSpecificAppMemoryLimits
					$ AppTooLowAvailablePercent : double
					$ AppTooLowAvailableMemory : uint64
					$ AppTooHighUsedMemory : uint64
					$ AppTooLowMaxMemory : uint64
				- AppMemoryLimits
					$ IPhoneFourUsageLimit : double
					$ AndroidConfig : OSSpecificAppMemoryLimits
					$ IOSConfig : OSSpecificAppMemoryLimits
			ZombieSpeedConditionsMap 028
				$ Groups : std::vector<std::vector<ZombieConditionFloatValue>>
				- ZombieConditionFloatValue
					$ Condition : ZombieConditions
					$ Value : float
			HotUIComponentProperties 038
				$ Targets : std::vector<RtId>
				HotUIPropertyAnimatorProperties 060
					$ Curve : CurveType
					$ TargetProperty : PropertyAnimatorTarget
					$ FirstTargetCurve : PropertyAnimatorCurveParams
					$ NextTargetDelta : PropertyAnimatorCurveParams
					- PropertyAnimatorCurveParams
						$ StartValue : float
						$ EndValue : float
						$ Duration : float
						$ PhaseOffset : float
			LevelOfTheDayEventEntry 098
				$ Name : std::string
				$ PrimaryLevelName : std::string
				$ LocalNoteDailyMessageOverride : std::string
				$ Holiday : std::string
				$ HolidayBannerName : std::string
				$ ReplayLevelCurrency : MarketPurchaseCurrency
				$ ReplayLevelCost : int32
				$ NumReplaysAtDiscountedCost : int32
				$ LootCommonPinata : std::string
				$ LootValuablePinata : std::string
				$ LootMegaPinata : std::string
				$ AutocadoKey : std::string
			LevelOfTheDayEvents 028
				$ Events : std::vector<LevelOfTheDayEventEntry>
			HotUIWidgetProperties 158
				$ Name : std::string
				$ Width : DynamicSizeData
				$ Height : DynamicSizeData
				$ MinWidth : DynamicSizeData
				$ MinHeight : DynamicSizeData
				$ MaxWidth : DynamicSizeData
				$ MaxHeight : DynamicSizeData
				$ Padding : DynamicPadding
				$ Children : std::vector<RtId>
				$ Anchor : AnchorDescriptor
				$ EntryPoint : bool
				$ IgnoreMouseInput : bool
				$ DarkenBackground : float
				$ IgnoreClipRect : bool
				$ ClearClipRect : bool
				$ IgnoreSafeArea : bool
				$ Resources : std::vector<std::string>
				HotUIRiftPerkProgressScreenProperties 158
				HotUIEventsResultsScreenProperties 158
				HotUITouchLayerProperties 158
				HotUIAnimProperties 1A0
					$ PopAnimName : std::string
					$ PopAnimRigClass : std::string
					$ OffsetPercentX : float
					$ OffsetPercentY : float
					$ ScaleOverride : float
					$ RotationDegrees : float
					$ InitialAnimationName : std::string
					$ AnimLayersToDisable : std::vector<std::string>
					$ DrawStyle : UIImageDrawStyle
					$ PlayStyle : HotUIAnimPlayStyle
					HotUIAnimPathProperties 1A0
					HotUIPlantAnimProperties 1C8
						$ PlantConfig : HotUIPlantAnimConfig
						- HotUIPlantAnimConfig
							$ PlantType : std::string
							$ CostumeLayer : std::string
							$ CostumeIDString : std::string
							$ DrawShadow : bool
				HotUIVerticalListProperties 170
					$ SpaceBetweenWidgets : DynamicSizeData
					$ NumColumns : int32
				HotUIHorizontalListProperties 170
					$ SpaceBetweenWidgets : DynamicSizeData
					HotUIHorizontalGridProperties 180
						$ SpaceBetweenWidgetsVertically : DynamicSizeData
				HotUIJoustCrownCollectionEffectProperties 180
					$ CrownImage : std::string
					$ ImageWidth : float
					$ FadeInTime : float
					$ TweenCurve : CurveType
					$ TweenTime : float
					$ TweenDistance : float
					$ MinAngleRadians : float
					$ MaxAngleRadians : float
				HotUILayoutListProperties 170
					$ ForceCompactLayout : bool
					$ CompactLayoutGap : DynamicSizeData
					HotUIButtonListProperties 170
					HotUITableViewProperties 188
						$ SpaceBetweenRows : DynamicSizeData
				HotUISeedPacketProperties 1C0
					$ PacketConfig : HotUISeedPacketConfig
					$ RenderOptions : PacketRenderOptions
					- HotUISeedPacketConfig
						$ PlantType : std::string
						$ IsImitater : bool
						$ PlantLevel : int32
						$ PlantMasteryLevel : int32
						$ PlantTierBadge : int32
						$ Grayscale : bool
						$ DrawEnvelope : bool
						$ DrawFamily : bool
					- PacketRenderOptions
						$ DrawSelectionBorder : bool
						$ DrawEnvelope : bool
						$ DrawFamily : bool
						$ DrawCost : int32
						$ DrawPlantLevel : int32
						$ DrawMasteryLevel : int32
				HotUISeedPacketListProperties 158
				HotUILabelProperties 188
					$ Label : std::string
					$ HorizontalJustification : UITextHorizontalJustification
					$ VerticalJustification : UITextVerticalJustification
					$ Font : std::string
					$ Color : std::string
				HotUIPowerUpButtonProperties 158
				HotUIToUIWidgetTouchLayerProperties 158
				HotUIButtonProperties 228
					$ Label : std::string
					$ LabelInset : DynamicPadding
					$ LabelHorizontalJustification : UITextHorizontalJustification
					$ UpImage : std::string
					$ DownImage : std::string
					$ HideButtonImages : bool
					$ ButtonImageType : UIImageType
					$ ButtonImageDrawStyle : UIImageDrawStyle
					$ ButtonImageColor : std::string
					$ UpAudio : std::string
					$ DownAudio : std::string
					$ Font : std::string
					$ Color : std::string
					$ IncludelistID : std::string
					HotUIToggleButtonProperties 228
						$ ToggleOnPress : bool
					HotUIPurchaseButtonProperties 240
						$ CostLabel : std::string
						$ CostLabelX : int32
						$ CostLabelY : int32
						$ CostLabelMaxWidth : int32
						HotUIStorePurchaseButtonProperties 240
					HotUITableViewCellProperties 228
				HotUIJoustResultsScreenProperties 170
					$ ScoreFillStartDelay : float
					$ ScoreFillLength : float
					$ CrownFillStartDelay : float
					$ CrownFillLength : float
					$ CrownFillEffectLength : float
					$ ShieldBreakLength : float
				HotUITextEntryProperties 170
					$ DefaultText : std::string
					$ MaxCharacters : int32
					$ UseNumericKeyboard : bool
				HotUISliderProperties 180
					$ SliderKnobImage : std::string
					$ SliderBarImage : std::string
					$ SliderFillImage : std::string
				HotUIRiftResultsScreenProperties 158
				HotUIScrollWidgetProperties 240
					$ ScrollMode : UIScrollMode
					$ ShowScrollIndicators : bool
					$ AlwaysShowScrollIndicators : bool
					$ ShowEdgeGradients : bool
					$ ScrollInsets : DynamicPadding
					$ ScrollIndicatorInsets : DynamicPadding
					$ ScrollIndicatorDistanceFromEdge : DynamicSizeData
					$ EdgeGradientLengthOffsetMin : DynamicSizeData
					$ EdgeGradientLengthOffsetMax : DynamicSizeData
				HotUIClickableLinkProperties 180
					$ Link : std::string
					$ Text : std::string
					$ Font : std::string
				HotUIProgressBarProperties 170
					$ ProgressBarBackground : std::string
					$ ProgressBarImage : std::string
				HotUIMessageBarProperties 158
				HotUIPrefabProperties 170
					$ UIFileName : std::string
					$ AdaptorClassName : std::string
				HotUIImageProperties 1E8
					$ DrawType : UIImageType
					$ DrawStyle : UIImageDrawStyle
					$ Image : std::string
					$ ImageInsets : DynamicPadding
					$ Rotation : float
					$ RotationCenterX : float
					$ RotationCenterY : float
					$ ImageScale : float
					$ ImageColor : std::string
					HotUIMultiImageProperties 1F0
						$ ImageList : std::vector<std::string>
					JukeboxProgressBarProperties 1E8
					HotUIImageBorderProperties 258
						$ BorderDrawType : UIImageType
						$ BorderDrawStyle : UIImageDrawStyle
						$ BorderImage : std::string
						$ BorderInsets : DynamicPadding
						$ BorderColor : Color
				- DynamicSizeData
					% Value_CmdPropertyGet : *
					% Value_CmdPropertySet : *
					# Value : std::string
				- AnchorDescriptor
					$ AnchorPoint : HotAnchorType
					$ ParentAnchorPoint : HotAnchorType
					$ Parent : <void *>
					$ OffsetX : DynamicSizeData
					$ OffsetY : DynamicSizeData
				- DynamicPadding
					$ Left : DynamicSizeData
					$ Top : DynamicSizeData
					$ Right : DynamicSizeData
					$ Bottom : DynamicSizeData
			WaveManagerProperties 078
				$ Waves : std::vector<std::vector<RtWeakPtr<WaveActionProperties> > >
				$ FlagWaveInterval : int32
				$ AdditionalFlagWaves : std::vector<int>
				$ WaveCount : int32
				$ SuppressFlagZombie : bool
				$ WavesAlwaysRandomized : bool
				$ FlagWaveVeteranOverrideTypes : std::vector<int>
				$ SuppressedDynamicZombieWaves : std::vector<int>
				$ LevelJam : std::string
				$ MinNextWaveHealthPercentage : float
				$ MaxNextWaveHealthPercentage : float
				$ ZombieCountdownFirstWaveSecs : float
				$ ZombieCountdownFirstWaveConveyorSecs : float
				$ ZombieCountdownHugeWaveDelay : float
			WaveActionProperties 038
				$ ResourceGroupNames : std::vector<std::string>
				$ NotificationEvents : std::vector<std::string>
				TidalChangeWaveActionProps 040
					$ TidalChange : TidalChangeDescription
					- TidalChangeDescription
						$ ChangeType : TidalChangeType
						$ ChangeAmount : float
				ZombieSpawnerActionProps 038
					SpawnZombiesJitteredWaveActionProps 078
						$ Zombies : std::vector<SpawnZombiesJitteredInstruction>
						$ AdditionalPlantfood : int32
						$ DynamicPlantfood : std::vector<int>
						$ JitterOffsets : RtWeakPtr<ZombieJitterOffsets>
						$ ZombieSpawnPattern : std::string
						$ ForcedCondition : ZombieSpawnerConditionData
						SpawnZombiesFromGroundSpawnerProps 080
							$ ColumnStart : int32
							$ ColumnEnd : int32
						SpawnZombiesFromGridItemSpawnerProps 098
							$ GridTypes : std::vector< RtWeakPtr<GridItemType> >
							$ WaveStartMessage : std::string
							$ ZombieSpawnWaitTime : float
							$ SuppressActionIfNoGridItemsFound : bool
							SpawnZombiesDelayedFromGridItemsProps 0A8
								$ GroupSize : int32
								$ TimeBetweenGroups : float
								$ TimeBeforeFullSpawn : float
								$ ZombieCondition : ZombieConditions
								SpawnWhackAZombiesProps 0A8
						- SpawnZombiesJitteredInstruction
							$ Type : RtWeakPtr<ZombieType>
							$ Row : RowSpawnInstruction::RowSpawnInstruction
							$ FriendZombie : bool
						- ZombieSpawnerConditionData
							$ Condition : ZombieConditions
							$ Duration : float
					ZombieRainSpawnerProps 068
						$ GroupSize : int32
						$ SpiderCount : int32
						$ TimeBetweenGroups : float
						$ TimeBeforeFullSpawn : float
						$ ZombieFallTime : float
						$ ColumnStart : int32
						$ ColumnEnd : int32
						$ SpiderZombieName : std::string
						$ WaveStartMessage : std::string
						SpiderRainZombieSpawnerProps 068
						ParachuteRainZombieSpawnerProps 068
					StormZombieSpawnerProps 060
						$ Zombies : std::vector<StormZombieInstruction>
						$ AdditionalPlantfood : int32
						$ GroupSize : int32
						$ TimeBetweenGroups : float
						$ TimeBeforeFullSpawn : float
						$ ColumnStart : int32
						$ ColumnEnd : int32
						$ Type : StormType
						- StormZombieInstruction
							$ Type : RtWeakPtr<ZombieType>
							$ HasPlantfood : bool
					HamsterZombieSpawnerProps 058
						$ Zombies : std::vector<HamsterZombieInstruction>
						$ AdditionalPlantfood : int32
						$ GroupSize : int32
						$ TimeBetweenGroups : float
						$ TimeBeforeFullSpawn : float
						$ ColumnStart : int32
						$ ColumnEnd : int32
						- HamsterZombieInstruction
							$ Type : RtWeakPtr<ZombieType>
							$ HasPlantfood : bool
							$ Behavior : int32
							$ SpeedBeforeImpact : float
							$ ZombieInsideBallType : RtWeakPtr<ZombieType>
					RaidingPartyZombieSpawnerProps 048
						$ SwashbucklerCount : int32
						$ GroupSize : int32
						$ TimeBetweenGroups : float
						$ TimeBeforeFullSpawn : float
					BeachStageEventZombieSpawnerProps 068
						$ GroupSize : int32
						$ ZombieCount : int32
						$ TimeBetweenGroups : float
						$ TimeBeforeFullSpawn : float
						$ ColumnStart : int32
						$ ColumnEnd : int32
						$ ZombieName : std::string
						$ WaveStartMessage : std::string
				ModifyConveyorWaveActionProps 050
					$ Add : std::vector<ConveyorAddSeedInstruction>
					$ Remove : std::vector<ConveyorRemoveSeedInstruction>
					- ConveyorAddSeedInstruction
						$ Type : RtWeakPtr<PlantType>
						$ ToolType : std::string
						$ Weight : int32
						$ MaxCount : int32
						$ MinCount : int32
						$ MaxDelivered : int32
						$ MinWeightFactor : float
						$ MaxWeightFactor : float
						$ MaxCountCooldownSeconds : float
					- ConveyorRemoveSeedInstruction
						$ Type : RtWeakPtr<PlantType>
						$ ToolType : std::string
				SpawnGridItemsWaveActionProps 068
					$ SpawnEffectAnimID : std::string
					$ SpawnEffectAnimPlay : std::string
					$ SpawnSoundID : std::string
					$ DisplacePlants : bool
					$ ShakeScreen : bool
					$ RandomPlacement : bool
					$ GridClassesToDestroy : std::vector<std::string>
					SpawnModernPortalsWaveActionProps 090
						$ PortalColumn : int32
						$ PortalRow : int32
						$ PortalType : std::string
					SpawnGravestonesWaveActionProps 090
						$ GravestonePool : std::vector<GridItemPoolEntry>
						$ SpawnPositionsPool : std::vector<Point>
						$ SpawnPositionsRect : Rect
					- GridItemPoolEntry
						$ Type : RtWeakPtr<GridItemType>
						$ Count : int32
				DinoWaveActionProps 040
					$ DinoType : DinoSpawnType
					$ DinoWaveDuration : int32
					$ DinoRow : int32
				SunDropperWaveActionProps 038
					$ SunAmountToDrop : int32
				SproutPlantingWaveActionProps 048
					$ WaveSproutCount : int32
					$ WaveDuration : float
					$ PlantWeights : std::vector<std::vector<SproutPlantWeights>>
				FrostWindWaveActionProps 040
					$ Winds : std::vector<FrostWindDescription>
					- FrostWindDescription
						$ Direction : FrostWindDirection
						$ Row : int32
			ComponentVisualStretcherProps 080
				$ StretchSpeed : float
				$ BaseAnimName : std::string
				$ StretchAnimName : std::string
				$ TipAnimName : std::string
				$ InitialBaseAnimAnimation : std::string
				$ InitialStretchAnimAnimation : std::string
				$ InitialTipAnimAnimation : std::string
				$ BaseAnimOffset : SexyVector2
				$ StretchAnimOffset : SexyVector2
				$ TipAnimOffset : SexyVector2
			LevelPowerupSet 030
				$ UnlimitedUse : bool
				$ Powerups : std::vector<std::string>
			UniversalLinkTranslationPropertySheet 030
				$ Version : int32
				$ Entries : std::vector<UniversalLinkData>
				- UniversalLinkData
					$ UniversalLink : std::string
					$ AppAction : std::string
			GamePropertySheet 078
				$ PlantTypeOrder : std::vector<std::string>
				$ ZombieAlmanacOrder : std::vector<std::string>
				$ SproutFirstLevelThreshold : std::vector<std::string>
				$ StarsPerCostume : int32
				$ KeysPerCostume : int32
				$ CoinsPerKey : int32
				$ LawnMowerPurchasePriceInCoins : int32
				$ PowerTilePropagationAlpha : float
				$ PowerTilePropagationDelay : float
				$ PowerTilePropagationInitialDelay : float
				$ ZombieVsZombieCrushingDamageScale : float
				$ ZombieVsFriendlyZombieDamageScale : float
				$ ZombieConditionsWhichInvincibleOverrides : std::vector<ZombieConditions>
				$ SeedSlotRentalCost : int32
			SeedChooserPriorityList 040
				$ ClassicList : std::vector<std::string>
				$ FeatureList : std::vector<std::string>
				$ PromoList : std::vector<std::string>
			SeedChooserFamilyPriorityList 028
				$ PrioritizedFamilyList : std::vector<std::string>
			PlantBoostPropertySheet 050
				$ Type : PlantBoostType
				$ Name : std::string
				$ Description : std::string
				$ DetailDescription : std::string
				$ HarvestImage : std::string
			PlayerProfileProperties 028
				$ InitialPlantList : std::vector<std::string>
			CalendarConfig 058
				$ StreakPreservationCost : int32
				$ OrderingConfig : CalendarOrderingConfig
				- CalendarOrderingConfig
					$ PrimaryOrderingCategory : OrderingCategory
					$ PrimaryOrder : OrderType
					$ SecondaryOrderingCategory : OrderingCategory
					$ SecondaryOrder : OrderType
					$ CalendarNameOrder : std::vector<std::string>
					$ CalendarCategoryOrder : std::vector<CalendarCategory>
					$ CalendarUniqueIdOrder : std::vector<int32>
			GridItemAction 0B8
				$ Damage : float
				$ SecondsBetweenEffects : float
				$ RangeInGridSquares : float
				$ ZConditions : std::vector<ZombieConditionEntry>
				$ PConditions : std::vector<PlantConditionEntry>
				$ GConditions : std::vector<GridItemConditionEntry>
				$ Type : GridItemEffectType
				$ TeamsToAffect : std::vector<TeamFlags>
				$ EntitiesToAffect : std::vector<BoardEntityTypeFlag>
				$ TargetArea : GridItemTargetingArea
				$ ActionAnimationName : std::string
				$ HitPopAnim : std::string
				$ HitAnimStartName : std::string
				$ HitAnimLoopName : std::string
				$ HitAnimLoopTime : float
				$ HitAnimEndName : std::string
				$ HitAffectOffset : Point
			ZombieDropProps 038
				$ Collectables : std::vector<std::string>
				$ Zombies : std::vector<ZombieDropZombieProps>
				- ZombieDropZombieProps
					$ Type : std::string
					$ Hypnotized : bool
					$ TossGridXDelta : float
					$ TossGridYDelta : int32
					$ SpawnGridXDelta : float
					$ SpawnGridYDelta : int32
					$ SpawnGridZDelta : float
					$ TossDuration : float
					$ TossApexHeight : float
			BoardGridMapProps 028
				$ Values : std::vector<std::vector<uint32>>
			PVZManifest 028
				$ Versions : std::vector<PVZManifestEntry>
				- PVZManifestPlatform
					$ PlatformName : std::string
					$ DiffSize : int32
					$ RSBSize : int32
					$ full_MD5 : std::string
					$ patch_MD5 : std::string
				- PVZManifestEntry
					$ Version : PVZVersion
					$ Platform : std::vector<PVZManifestPlatform>
					$ Reset : bool
			CDNConfigData 028
				$ PushKey : std::string
			TreasureYetiSchedulingProps 048
				$ MinimumMinutesBetweenYetis : int32
				$ MaximumMinutesBetweenYetis : int32
				$ MinimumMinutesBetweenYetisOnRetry : int32
				$ MaximumMinutesBetweenYetisOnRetry : int32
				$ LatestYetiIntroLevel : std::string
				$ SoonestYetiIntroLevel : std::string
				$ MinimumMinutesBeforeYeti : float
			TreasureYetiExcludelistProps 028
				$ LevelExcludelist : std::vector<std::string>
			RiftFirstClearRewards 038
				$ LevelClearRewards : std::vector<RiftFirstClearRewardsDefinition>
				$ DefaultLevelClearRewards : RiftFirstClearRewardsDefinition
				- RiftFirstClearRewardsDefinition
					$ FirstClearRewards : std::vector<LevelOfTheDay_RewardItemType>
			NotificationStringProperties 0D0
				$ DangerRoomPrompts : std::vector<std::string>
				$ LODNotesUpcoming : std::vector<std::string>
				$ LODNotesCurrent : std::vector<std::string>
				$ YetiReady : std::vector<std::string>
				$ ZENPlantsSingleReady : std::vector<std::string>
				$ ZENPlantsAllReady : std::vector<std::string>
				$ ZENPlantsAllReadyLong : std::vector<std::string>
				$ ZENPlantsBoostSingleReady : std::vector<std::string>
				$ ZENPlantsBoostAllReady : std::vector<std::string>
				$ ZENPlantsBoostAllReadyLong : std::vector<std::string>
				$ ZENPlantsMarigoldSingleReady : std::vector<std::string>
				$ ZENPlantsMarigoldBoostSingleReady : std::vector<std::string>
				$ ZENPlantsMarigoldBoostSingleReadyLong : std::vector<std::string>
				$ ZENEmptyPots1 : std::vector<std::string>
				$ ZENEmptyPots2 : std::vector<std::string>
			ScheduleProps 058
				$ DefaultSchedule : ScheduleEntry
				$ SegmentFilter : ScheduleSegmentationFilter
				PlantRentalScheduleProps 060
					$ RAPScheduleEntries : std::vector<PlantRentalScheduleEvent>
					- PlantRentalData
						$ PlantType : std::string
						$ Segments : std::vector<std::string>
					- PlantRentalScheduleEvent
						$ Slot : SlotType
						$ Plants : std::vector<PlantRentalData>
				EventScheduleProps 060
					$ EventScheduleEntries : std::vector<EventScheduleEntry>
					- EventScheduleEntry
						$ QuestUniqueIDs : std::vector<std::string>
						$ LodEventIDs : std::vector<std::string>
						$ LodCommonLoot : std::string
						$ LodValuableLoot : std::string
				MarketScheduleProps 060
					$ MarketScheduleEntries : std::vector<MarketScheduleEvent>
					- MarketScheduleEvent
						$ ScheduledProducts : std::vector<MarketScheduleProductConfig>
						$ RepeatStyle : MarketEventRepeatStyle
						$ SmartFilter : MarketEventSmartFilter
						$ VisualTheme : std::string
						$ RandomPulls : int32
						$ RandomFallbackPicking : bool
						$ RandomPersist : bool
						$ RandomPersistVersion : int32
						$ RandomSeed : int32
				- ScheduleEntry
					$ Name : std::string
					$ StartDateTime : int64
					$ EndDateTime : int64
					$ Segments : std::vector<std::string>
			CalendarThemeProps 168
				$ BottomLeftImage : std::string
				$ BottomRightImage : std::string
				$ TimerCharacter : std::string
				$ BackgroundImage : std::string
				$ OuterBorderImage : std::string
				$ InnerBorderImage : std::string
				$ RewardBackgroundImage : std::string
				$ MonthlyDayImage : std::string
				$ WeeklyDayImage : std::string
				$ Event10DayImage : std::string
				$ Event14DayImage : std::string
				$ LargeDayImage : std::string
				$ Event14BannerImage : std::string
				$ Event7BannerImage : std::string
				$ Event10BannerImage : std::string
				$ TabUpIcon : std::string
				$ TabDownIcon : std::string
				$ TabTextColor : Color
				$ NameColor : Color
				$ DayTextColor : Color
				$ LargeDayTextColor : Color
				$ ClaimableDayTextColor : Color
				$ TimerTextColor : Color
				$ RewardTextColor : Color
				$ CustomCellsForDays : std::map<std::string RT_COMMA std::string>
			CalendarSchedule 030
				$ CalendarBaseStartDate : uint64
				$ Calendars : std::vector<CalendarDefinition>
				- CalendarDefinition
					$ StartDateTime : uint64
					$ EndDateTime : uint64
					$ UniqueID : int32
					$ Rewards : std::vector<LevelOfTheDay_RewardItemType>
					$ LoginType : CalendarLoginType
					$ Name : std::string
					$ Category : CalendarCategory
					$ Theme : std::string
					$ ShowTimer : bool
					$ RetainForever : bool
			SpawnEffectAnimIDResourceGroup 028
				$ GroupsForAnims : std::vector<SpawnEffectAnimIDResourceGroupEntry>
				- SpawnEffectAnimIDResourceGroupEntry
					$ Anim : std::string
					$ ResourceGroup : std::string
			CoreLoopRewardsTablesProps 028
				$ RewardsTables : std::map<std::string RT_COMMA CoreLoopRewardTable>
				- CoreLoopPlantXpRewardEntry
					$ PlantType : std::string
					$ Min : int32
					$ Max : int32
					$ Weight : int32
					$ Tag : std::string
				- CoreLoopCurrencyRewardEntry
					$ Min : int32
					$ Max : int32
					$ Weight : int32
					$ Tag : std::string
				- CoreLoopRewardTable
					$ PlantXP : std::vector<CoreLoopPlantXpRewardEntry>
					$ Coins : std::vector<CoreLoopCurrencyRewardEntry>
					$ Gems : std::vector<CoreLoopCurrencyRewardEntry>
					$ Mints : std::vector<CoreLoopCurrencyRewardEntry>
					$ SeasonCrowns : std::vector<CoreLoopCurrencyRewardEntry>
			ZenGardenPropertySheet 068
				$ Pots : std::vector<ZenGardenPotProps>
				$ BackgroundImageID : std::string
				$ PlantGrowDurationInSeconds : float
				$ NormalPlantCoinRewardAmount : int32
				$ TreasurePlantSpawnRate : int32
				$ GrowingSpeedupCalcMultiplyFactor : float
				$ GrowingSpeedupCalcAddFactor : float
				$ GrowingSpeedupCalcMaxTimeSeconds : int32
				$ PotCosts : ZenGardenPotCosts
				- ZenGardenPotCosts
					$ GemCostDefault : int32
					$ GemCostPurchased0 : int32
					$ GemCostPurchased1 : int32
					$ GemCostPurchased2 : int32
					$ GemCostPurchased3 : int32
					$ GemCostPurchased4 : int32
					$ GemCostPurchased5 : int32
				- ZenGardenPotProps
					$ PositionKey : int32
					$ Position : Point
					$ IsLocked : bool
					$ UnlockIndex : int32
			ZenGardenPlantSlotProps 078
				$ EffectsOffset : SexyVector2
				$ WateringEffectID : std::string
				$ SproutRevealEffectID : std::string
				$ BoostEffectID : std::string
				$ BoostEffectOffset : SexyVector2
				$ RemoveEffectID : std::string
				$ RemoveEffectOffset : SexyVector2
				$ WaterIndicatorID : std::string
				$ WaterIndicatorOffset : SexyVector2
			ZenGardenFloatingTextProps 028
				$ Duration : float
				$ InitialVelocity : float
			RiftZombossRewards 038
				$ PinataTypeForOpeningSequence : std::string
				$ ProgressionRewards : std::vector<RiftZombossRewardDifficultySet>
				- RiftZombossRewardDifficultyEntry
					$ Rewards : std::vector<LevelOfTheDay_RewardItemType>
				- RiftZombossRewardDifficultySet
					$ Attempt : int32
					$ DifficultyList : std::vector<RiftZombossRewardDifficultyEntry>
			RiftConfigSheet 080
				$ ZombossUnlockCost : int32
				$ ZPSResetValue : int32
				$ ZPSCap : int32
				$ ZPSDecayPeriodSeconds : uint64
				$ ZombossAvailableHours : int32
				$ RiftLevelCosts : std::vector<int>
				$ ZPSGainedPerDifficultyLevel : std::vector<int>
				$ EnergyRefillPeriodSeconds : uint64
				$ EnergyRefillCap : int32
				$ PerkSelectionCosts : std::vector<int>
				$ ZPSBackupRewards : std::vector<LevelOfTheDay_RewardItemType>
				$ ZombossCycleHours : int32
				$ ZombossFightsPerCycle : int32
			ZombiePropertySheet 198
				$ Speed : float
				$ SpeedVariance : float
				$ Hitpoints : float
				$ TimeToKillInSeconds : float
				$ EatDPS : float
				$ PowerUpDamageModifier : float
				$ FireDamageMultiplier : float
				$ FoeEatDamageReflectPct : float
				$ Ammo : int32
				$ Size : ZombieSize
				$ CanSpawnPlantFood : bool
				$ CanTriggerZombieWin : bool
				$ CanSurrender : bool
				$ ExplodesWhenMowed : bool
				$ NormalDeathWhenMowed : bool
				$ IsValidPinchTarget : bool
				$ NormalDeathOnExplosion : bool
				$ ChillInsteadOfFreeze : bool
				$ CanBePlantTossedStrong : bool
				$ CanBePlantTossedWeak : bool
				$ SkipHeadDropState : bool
				$ ArmDropFraction : float
				$ Helm : HelmType
				$ HelmHitpoints : float
				$ HelmDamageLayerIndices : int32
				$ HelmAbsorbsOverflowDamage : bool
				$ MetallicBodyParts : bool
				$ GridHeight : int32
				$ HitRect : Rect
				$ AttackRect : Rect
				$ Cost : int32
				$ WavePointCost : int32
				$ Weight : int32
				$ StreetSize : SexyVector2
				$ StreetCriticalSize : SexyVector2
				$ StreetOffset : SexyVector2
				$ ArtScale : float
				$ ArtCenter : SexyVector2
				$ ShadowOffset : SexyVector3
				$ ShadowScaling : SexyVector2
				$ GroundTrackName : std::string
				$ ArtCenterBurnEffectOffset : SexyVector2
				$ GridExtents : Point
				$ ZombieStats : std::vector<BoardEntityStat>
				$ ZombieArmorProps : std::vector<RtWeakPtr<RtObject> >
				$ ConditionImmunities : std::vector<ZombieConditionImmunity>
				$ IgnoreWaterLine : bool
				$ MaxTideLoweredPercent : float
				$ SoundOnDeath : std::string
				$ SoundOnTakeDamage : std::string
				$ SoundOnWalk : std::string
				$ SoundOnEat : std::string
				$ SoundOnIdle : std::string
				$ SoundOnAsh : std::string
				$ SoundOnElectrocute : std::string
				$ HypnoshroomEffectOffset : SexyVector2
				$ AlmanacScale : float
				$ AlmanacOffset : SexyVector2
				$ CanBeFlicked : bool
				$ CanBeFlickedOff : bool
				$ FlickIsLaneRestricted : bool
				$ IsSpawnedFlying : bool
				$ ShrunkenScale : float
				$ ScoreOverride : float
				ZombieBeachFishermanProps 1D0
					$ DelayBetweenCasting : float
					$ DelayBeforeReeling : float
					$ CastingAreaMinRange : int32
					$ CastingAreaMaxRange : int32
					$ CastingAreaHeight : int32
					$ CastTimePerGridSquare : float
					$ ReelTimePerGridSquare : float
					$ PlantablePlants : std::vector<std::string>
					$ AllowedLowPlants : std::vector<std::string>
				ZombieZombossMechProps 208
					$ SquashZombies : bool
					$ SquashGridItems : bool
					$ EnterRow : int32
					$ EnterColumn : int32
					$ HideDuringIntro : bool
					$ CrosshairPopAnim : std::string
					$ CrosshairAnimation : std::string
					$ RocketAnimation : std::string
					$ RocketExplosionAnimation : std::string
					$ UnlimitedStages : ZombossStageScoring
					$ Stages : std::vector<ZombossStage>
					ZombieZombossMechBeachProps 228
						$ TangleKelpStunDuration : float
						$ TangleKelpStunShouldUseKnockback : bool
						$ TangleKelpStunShouldUseFlash : bool
						$ RetreatSubmergedDuration : float
						$ MinionParameters : SharkMinionParameters
					ZombieZombossMechCowboyProps 208
					ZombieZombossMechDarkProps 208
						$ MagnetStunDuration : float
					ZombieZombossMechDinoProps 228
						$ SplashRadius : float
						$ SplashDamage : float
						$ EyeLaserWarmUpTime : float
						$ EyeLaserSweepTime : float
						$ LaserOffset : Point
						$ LaserMaxColumn : int32
						$ LaserMinColumn : int32
					ZombieZombossMechEgyptProps 210
						$ NumRocketGravestones : int32
						$ BoneProjectileType : RtWeakPtr<RtObject>
					ZombieZombossMechEightiesProps 220
						$ StageJamOrder : std::vector<std::string>
						$ ZombossAnimOrder : std::vector<std::string>
					ZombieZombossMechFutureProps 208
					ZombieZombossMechIceAgeProps 220
						$ IceCrustHealth : int32
						$ RevealAction : RtWeakPtr<RtObject>
						$ CoverUpAction : RtWeakPtr<RtObject>
					ZombieZombossMechLostCityProps 218
						$ SpawnZombieAction : RtWeakPtr<RtObject>
						$ DropSandbagAction : RtWeakPtr<RtObject>
					ZombieZombossMechPirateProps 208
					- ZombossStageScoring
						$ UseUnlimitedStages : bool
						$ DefinedScores : std::vector<int>
						$ DefinedStagesToInterpolate : std::vector<int>
						$ PostDefinedStages : ZombossPostStageScoring
					- ZombossPostStageScoring
						$ HitPoints : int32
						$ Score : int32
					- ZombossStage
						$ HitPoints : int32
						$ DamageIndexFull : int32
						$ DamageIndexHalf : int32
						$ MinColumn : int32
						$ MaxColumn : int32
						$ AnimRateModifier : float
						$ ChilledDurationFromFrozen : float
						$ SlowDurationFromStun : float
						$ IdleTime : ValueRange
						$ RetreatAction : RtWeakPtr<RtObject>
						$ StunTime : float
						$ StunDamageScale : float
						$ StunStaggerBackTime : float
						$ StunStaggerBackMovement : float
						$ Actions : std::vector<RtWeakPtr<RtObject>>
				ZombieChickenFarmerProps 1C8
					$ ChickeningHealthPercentage : float
					$ ChickenTypeName : std::string
					$ ChickeningSound : std::string
					$ ChickeningDuration : float
					$ ChickeningDurationVariance : float
					$ ChickeningInterval : float
					$ ChickeningIntervalVariance : float
				ZombieTombRaiserProps 1B0
					$ TimeBetweenCasts : float
					$ TimeBetweenRaisings : float
					$ NumberOfTombsToSpawn : int32
					$ Projectile : RtWeakPtr<ProjectilePropertySheet>
				ZombieDarkJugglerProps 1F0
					$ LaunchVelocity : SexyVector3
					$ LaunchAcceleration : SexyVector3
					$ LaunchHeight : ValueRange
					$ MaxProjectilesToJuggle : int32
					$ JuggleLaunchDelay : float
					$ MoveSpeedMultiplierWhileJuggling : float
					$ CatchArcDegrees : float
					$ JuggleableProjectiles : std::vector<std::string>
					$ UnthrowableProjectiles : std::vector<std::string>
					$ AngleAgnosticProjectiles : std::vector<std::string>
				ZombieDarkKingProps 1C8
					$ DelayBetweenKnightings : float
					$ KnightingAreaX : int32
					$ KnightingAreaY : int32
					$ KnightHelm : HelmType
					$ KnightHelmHitpoints : float
					$ ValidKnightTargets : std::vector<std::string>
					$ PlantablePlants : std::vector<std::string>
				ZombieDinoBullyVeteranProps 1B0
					$ SmashDuration : float
					$ SmashDamage : float
					$ SoundOnSmash : std::string
					$ CraterLifetime : float
				ZombieEightiesBoomboxProps 1C8
					$ PlantBoomRestrictionSet : PlantRestrictionSet
					$ JamStyle : std::string
					$ BoomBoxDuration : float
					$ PlantFreezeRadius : int32
					$ BoomBoxColumn : float
				ZombieEightiesBreakDancerProps 1D8
					$ JamStyle : std::string
					$ JamWalkSpeedMult : float
					$ TossTime : float
					$ TossHeight : float
					$ TossDistance : float
					$ TossTargetRect : Rect
					$ ZombiesToNotKick : ClassRestrictionSet
				ZombieEightiesGlitterProps 1A8
					$ JamStyle : std::string
					$ RainbowTrailLength : int32
				ZombieEightiesMCProps 1B0
					$ JamStyle : std::string
					$ JamAttackRadius : float
					$ JamAttackDamage : float
				ZombieEightiesPunkProps 1C8
					$ JamStyle : std::string
					$ PushCooldown : float
					$ PushDamageToZombies : float
					$ KickFallbackDPS : float
					$ PlantsToKickInsteadOfPush : PlantRestrictionSet
				ZombieModernAllStarProps 1A8
					$ SmashDamage : int32
					$ RunningSpeedScale : float
				ZombieBarrelPusherProps 1A8
					$ BarrelType : std::string
				ZombieGumProps 1A8
					$ DamagePhases : DamageLifetime
				ZombieStatueProps 1B8
					$ DamagePhases : DamageLifetime
					$ BreakEffect : std::string
				ZombieTigerGrassTigerProps 1F0
					$ TigerLaunchProps : PultProjectileProps
					$ TigerSpawnOffset : SexyVector2
					$ TigerDieAnimationOffset : SexyVector2
					$ SwipeImpactEffectOffset : SexyVector2
					$ TigerProjectile : RtWeakPtr<RtObject>
					$ SwipeAttackRate : float
					$ TigerWaitTime : float
				ZombieBugProps 1C8
					$ BasicHelm : BasicHelmType
					$ DamageFraction : float
					$ PlantsWhichAlsoKillBasic : PlantRestrictionSet
					$ DamageAmountWhichAlsoKillsBasic : float
					$ SpawnedZombieName : std::string
				ZombieCrystalSkullProps 1B0
					$ ChargingTime : float
					$ ChargingTimeDecrementPerFiveSun : float
					$ LaserBeamLength : float
					$ LaserBeamDamage : float
					$ LaserCooldownTime : float
				ZombieExcavatorProps 1F0
					$ CatchArcDegrees : float
					$ PreferredDistanceToThrowPlant : int32
					$ ShovelAttackRectOffsetX : int32
					$ ShovelRect : Rect
					$ PlantsShovelableWhileInvincible : PlantRestrictionSet
					$ PlantsToBashInsteadOfShovel : PlantRestrictionSet
					$ ProjectileClassesToNeverBlock : StringRestrictionSet
				ZombieImpPorterProps 1A0
					$ TentTargetingOffsetX : float
				ZombieLostCityJaneProps 1B0
					$ ProjectileBounceHeight : int32
					$ ProjectileBounceTime : float
					$ ProjectileBounceDistance : int32
					$ BounceableProjectiles : std::vector<RtWeakPtr<ProjectilePropertySheet>>
				ZombieSwashbucklerProps 1A0
					$ MinLandingColumn : int8
					$ MaxLandingColumn : int8
					$ FallIntoDrinkChance : float
					ZombieLostCityRelicHunterProps 1A0
				ZombieModernNewspaperProps 1A0
					$ EnragedSpeedScale : float
					$ EnragedDpsScale : float
				ZombieModernSuperfanImpProps 1A8
					$ MinTriggerColumn : int32
					$ MaxTriggerColumn : int32
					$ ExplosionDamage : float
					$ ExplosionRadius : float
				ZombieSeagullProps 1A0
					$ DropsHeadOnDeath : bool
					$ SpawnBirdOnDeath : bool
				ZombieRomanImpProps 1A0
					$ NetSuspendSeconds : int32
				ZombieRomanBallistaProps 1E8
					$ InitialShotCooldown : float
					$ ShotCooldown : float
					$ ChanceImpFallsInWater : float
					$ TimeToWalkInToPosition : float
					$ VaseShotHeight : float
					$ VaseShotTime : float
					$ VaseTargetLeftmostGridXOffset : int32
					$ VaseTargetRightmostGridXOffset : int32
					$ VaseDefaultGridX : int32
					$ VaseProjectile : RtWeakPtr<RtObject>
					$ ZombieSpawnData : ProbabilityTypeContainer
				ZombieZCorpImpProps 1A0
					$ SmashDamage : float
				ZombieZCorpConsultantProps 1C8
					$ ForwardShovePercentage : float
					$ ShoveHeight : float
					$ ShoveTime : float
					$ SlideTime : float
					$ SlideCooldown : float
					$ TimeBetweenDirectionChanges : float
					$ ShoveExcludeList : ClassRestrictionSet
				ZombieZcorpRacerProps 1C0
					$ RacerRect : Rect
					$ RacerSpeed : float
					$ LaunchZombieDistance : float
					$ LaunchZombieApex : float
					$ LaunchZombieTimeToLand : float
					$ ChairCollideDamage : float
				ZombieCarnieFireBreatherProps 1B8
					$ FlamePAMOffset : SexyVector2
					$ FlameRange : float
					$ FlameDamagePerSecond : float
					$ FlameCooldownTime : float
					$ DeathExplosionDamage : float
					$ DeathExplosionRadius : float
				ZombieMechProps 1B8
					$ SoundOnActivate : std::string
					$ SoundOnDeactivate : std::string
					$ NumDamageStates : int32
					ZombieFutureProtectorProps 1E8
						$ ShieldActivationColumn : float
						$ ShieldSizeX : float
						$ ShieldSizeY : float
						$ ShieldHP : float
						$ ShieldCount : int32
						$ ShieldReactivationDelay : float
						$ ShieldDiesUponLossOfControl : bool
					ZombieMechFootballProps 1C8
						$ SoundOnPush : std::string
						$ PushDamageToZombies : float
					ZombieMechDiscoProps 1D0
						$ DanceCountdown : float
						$ DanceDuration : float
						$ SummonDuration : float
						$ SoundOnSummon : std::string
				ZombieGargantuarProps 1F0
					$ HealthThresholdToImpAmmoLayers : std::vector<ZombieGargantuarProjectilePair>
					$ MinPosXThrowImp : float
					$ ThrowImpDuration : float
					$ ImpTargetColumn : int32
					$ ImpApex : float
					$ ImpFlightTime : float
					$ ImpSpawnOffset : SexyVector3
					$ SmashDuration : float
					$ SmashDamage : float
					$ ImpType : std::string
					$ SoundOnSmash : std::string
					$ SoundOnCannon : std::string
					ZombieEightiesGargantuarProps 210
						$ JamStyle : std::string
						$ ArbitrarySmashDelay : float
						$ ArbitrarySmashDelayVariance : float
						$ ShockWaveSpawnOffset : SexyVector2
					ZombieGargantuarMechProps 228
						$ EyeLaserDelayBetweenShots : float
						$ EyeLaserWarmUpTime : float
						$ EyeLaserSweepTime : float
						$ EyeLaserTotalDamage : float
						$ EyeLaserMinDistance : float
						$ EyeLaserMaxDistance : float
						$ EyeLaserSweepLength : float
						$ SoundOnDeactivate : std::string
						$ SoundOnActivate : std::string
					- ZombieGargantuarProjectilePair
						$ HealthPercentThrowImp : float
						$ ProjectileLayersToHide : std::vector<std::string>
				ZombieCamelProps 1B8
					$ CamelSegmentOffset : int32
					$ CamelSegmentTooCloseBuffer : int32
					$ CamelSegmentTooFarBuffer : int32
					$ WalkCycleOffset : int32
					$ SpawnManyCamelSegmentAtPosition : int32
					$ PropagateSignDestruction : bool
					$ OnlyHeadZombieEats : bool
					$ SurprisedTime : float
					$ DropArmOnSignDrop : bool
					$ SwitchToHeadCamelSign : bool
					ZombieCamelTouchProps 1C0
						$ PostMatchStunChance : float
						$ PostMatchStunDuration : float
				ZombieRaProps 1A0
					$ MaxClaimedSunCurrency : int32
				ZombieSarcophagusProps 1A0
					$ RunSpeed : float
				ZombiePirateCannonProps 1D8
					$ InitialShotCooldown : float
					$ ShotCooldown : float
					$ ChanceImpFallsInWater : float
					$ TimeToWalkInToPosition : float
					$ ImpShotHeight : float
					$ ImpShotTime : float
					$ ExplosionImpSpawnCount : int32
					$ ExplosionImpTargetColumnMin : int32
					$ ExplosionImpTargetColumnMax : int32
					$ ExplosionImpLaunchHeight : float
					$ ExplosionImpLaunchTime : float
					$ ExplosionImpLaunchTimeVariance : float
					$ ImpType : std::string
				ZombiePirateCaptainProps 1A0
					$ ParrotCooldown : float
					$ ParrotRetryCooldown : float
				ZombiePirateCaptainParrotProps 1B0
					$ LiftSpeed : float
					$ PlantLiftingWaitTime : float
					$ ReturningToCaptainWaitTime : float
					$ ParrotTargetExcludeList : std::vector<std::string>
					ZombieCarnieMagicianDoveProps 1B8
						$ FeatherEffectSpawnOffset : SexyVector2
				ZombieProspectorProps 1A8
					$ LaunchCountdown : float
					$ StunTime : float
					$ TimeToTravel : float
					$ Apex : float
				ZombieBullProps 1B8
					$ BuckRect : Rect
					$ BullRunSpeed : float
					$ BullPawLocation : float
					$ BullEnterSpeed : float
					ZombieBullVeteranProps 1C0
						$ BullRunAgainDelay : float
						$ BullRammingDamage : float
				ZombieBullRiderProps 1A8
					$ LaunchDistance : float
					$ LaunchHeight : float
					$ LaunchAirTime : float
				ZombiePonchoProps 1A8
					$ PonchoHealth : float
					$ PlateProbability : float
					$ PlateHealth : float
				ZombieBarrelProps 1D0
					$ TargetByIncludelist : PlantRestrictionSet
					$ PlantsWhichBreakBarrelOnCollision : PlantRestrictionSet
					$ BurstDelay : float
					$ ImpType : std::string
				ZombiePianoProps 1B0
					$ FastMoveSpeed : float
					$ PlantsWhichBreakPianoOnCollision : PlantRestrictionSet
				ZombieExplorerProps 1A0
					$ MaxTorchReach : float
				ZombieFutureJetpackProps 1A0
					$ DiscoMode : bool
				ZombieHeroProps 1A8
					$ HeroBehavior : ZombieHeroBehavior
					$ HeroBehaviorProps : RtWeakPtr<PropertySheetBase>
				ZombieTreasureYetiProps 1A8
					$ WalkTime : float
					$ CollectableType : std::string
				ZombieBeachFastSwimmerProps 1A0
					$ SwimSpeedMultiplier : float
				ZombieHamsterBallProps 1D8
					$ TargetByIncludelist : PlantRestrictionSet
					$ PlantsWhichBreakBarrelOnCollision : PlantRestrictionSet
					$ ZombieInsideBallType : std::string
					$ Behavior : int32
					$ SpeedBeforeImpact : float
					$ RicochetLaneChangeTime : float
				ZombieWithActionsProps 1A8
					$ Actions : std::vector<RtWeakPtr<RtObject>>
					ZombieEightiesArcadeProps 1B0
						$ JamStyle : std::string
					ZombieGeneralProps 1B8
						$ LifetimeSeconds : float
						$ GeneralPhase : int32
						$ CollidePlants : ZombieGeneralCollide
						$ CollideHypnotizedZombies : ZombieGeneralCollide
						ZombieGeneralCaesarProps 1C8
							$ ActionAttackTargetRect : Rect
						ZombieGeneralTreadmillProps 1C8
							$ PowerDrinkTargetRect : Rect
						ZombieGeneralZmechProps 1F0
							$ CrosshairPopAnim : std::string
							$ CrosshairAnimation : std::string
							$ RocketAnimation : std::string
							$ RocketExplosionAnimation : std::string
							$ CraterLifetime : int32
							$ StunTime : float
						ZombieCakeTankProps 1C0
							$ CustomDamageSteps : std::vector<GeneralDamageStep>
							- GeneralDamageStep
								$ MaxDamagePercent : float
								$ ActionOnStart : RtWeakPtr<RtObject>
					ZombieIceAgeDodoProps 1F8
						$ PlantsToFlyOver : PlantRestrictionSet
						$ GridItemsToFlyOver : GridItemRestrictionSet
						$ MaximumGridSquaresToFlyOver : int32
						$ MinRandomGridSquaresToFlyOver : int32
						$ MaxRandomGridSquaresToFlyOver : int32
						$ CooldownSecondsUntilNextJumpAvailable : int32
						$ InitialSetRandomChanceForJump : float
						$ LandedResetRandomChanceForJump : float
						$ AddRandomChanceForJumpPerGridWalked : float
						$ ElectrocutePAMName : std::string
					ZombieIceAgeHunterProps 1B0
						$ NearAttackRange : int32
						$ FarAttackRange : int32
						$ SnowballsPerBarrage : int32
					ZombieIceAgeTroglobiteProps 1C0
						$ NumberOfIceblocksToSpawnWith : int32
						$ ImpType : std::string
						$ ConditionToApply : std::string
						ZombieRomanMedusaProps 1D0
							$ PetrifiedZombieHealthMultiplier : float
							$ PetrifiedZombieType : std::string
					ZombieLostCityLostPilotProps 1B0
						$ HangingAttackRectOffsetY : int32
						$ HangingNoEatTimeUntilDrop : float
						ZombieZCorpHelpdeskProps 200
							$ EnragedSpeedScale : float
							$ EnragedDpsScale : float
							$ LaptopProjectile : RtWeakPtr<RtObject>
							$ LaptopSpawnOffset : SexyVector2
							$ ApexHeight : float
							$ TimeUntilHit : float
							$ MaxTossGridDistance : float
							$ DeathExplosionRadius : float
							$ DeathExplosionDamage : float
							$ DeathExplosionOffsetX : float
							$ DeathExplosionOffsetY : float
							$ DeathExplosionPAM : std::string
							$ DeathExplosionAnim : std::string
					ZombieCarnieMagicianProps 1D8
						$ TeleportOtherStartTime : float
						$ TeleportSelfStartTime : float
						$ DoveSpawnStartTime : float
						$ TimeBetweenTeleportOther : float
						$ TimeBetweenTeleportSelf : float
						$ TimeBetweenDoveSpawn : float
						$ TeleportationFailPercentage : float
						$ ImmuneToPlantRestrictionSet : PlantRestrictionSet
					ZombieRomanHealerProps 1D8
						$ GridItemToDrop : RtWeakPtr<GridItemType>
						$ BreaksStaff : PlantRestrictionSet
						$ BlocksStaff : PlantRestrictionSet
					ZombieDarkWizardProps 1A8
					ZombieBeachOctopusProps 1A8
				ZombieChickenProps 1B0
					$ BucketPercentage : float
					$ ElectrocutePAMName : std::string
					$ AffectedBySliders : bool
					ZombieCarnieMonkeyProps 1B8
						$ PercentageChanceToDropCoin : float
						$ CoinType : Loot
				ZombiePrototypeProps 1A8
					$ StaticArtImageAsset : std::string
				ZombieBeachSurferProps 1C8
					$ SurfSpeedMultiplier : float
					$ SurfboardAttackRectOffsetX : float
					$ BreaksSurfboard : PlantRestrictionSet
					$ BlocksSurfboard : PlantRestrictionSet
				ZombieBeachSnorkelProps 1D8
					$ TargetByIncludelist : PlantRestrictionSet
					$ DamageWhileSubmerged : PlantRestrictionSet
					$ DamageWhileSubmergedPlantfoodOnly : PlantRestrictionSet
				ZombieCarnieImpTwinsProps 1A8
					$ SpawnImpType : std::string
				ZombieCarnieGrinderheadProps 1A0
					$ MonkeyAudioFrequency : float
				- ZombieConditionImmunity
					$ Percent : float
					$ Condition : ZombieConditions
			ZombieHeroBehaviorProps 030
				$ TriggerAtHP : float
				$ TriggerAtTime : float
				$ TriggerInterval : float
				$ TriggerMax : int32
				ZombieHeroSpawnerProps 040
					$ ZombieSpawnType : std::string
					$ SpawnPattern : ZombieSpawnPattern
			ComponentPropagatedBurstProps 040
				$ Shape : PropagationShape
				$ PropagationDelay : float
				$ PopAnimEffectName : std::string
				$ Action : PropagationAction
				$ ContinualAction : bool
				$ EffectLoop : bool
				$ EffectLoopCount : int32
			MarketLayoutProps 098
				$ Markets : std::vector<MarketProps>
				$ Clusters : std::vector<MarketClusterProps>
				$ Tabs : std::vector<MarketTabProps>
				$ Categories : std::vector<MarketCategoryProps>
				$ PromotionSlots : std::vector<MarketPromotionSlotProps>
				$ ItemThemes : std::vector<MarketItemTheme>
				$ GlobalConfig : MarketLayoutGlobalProps
				- MarketProps
					$ Type : std::string
					$ QuickStoreInnerHeader : std::string
					$ ShowInnerHeaderOnlyForMultipleProfiles : bool
					$ Clusters : std::vector<std::string>
					$ LegacyStoreMap : std::vector<std::string>
				- MarketClusterProps
					$ Type : std::string
					$ Tabs : std::vector<std::string>
				- MarketTabProps
					$ Type : std::string
					$ Name : std::string
					$ ImageDown : std::string
					$ ImageActive : std::string
					$ Categories : std::vector<std::string>
				- MarketCategoryProps
					$ Type : std::string
					$ LabelText : std::string
					$ Card : std::string
					$ MaxCount : int32
					$ ShowTimer : bool
					$ DebugOnly : bool
					$ PromotionSlots : std::vector<std::string>
				- MarketPromotionSlotProps
					$ Type : std::string
					$ GroupPriority : std::vector<std::string>
					$ FallbackCategory : std::string
				- MarketLayoutGlobalProps
					$ NotificationTimerEvent : std::string
					$ NotificationDailyGiftCategory : std::string
					$ BasicPlantXPPinataType : std::string
					$ DefaultTabType : std::string
				- MarketItemTheme
					$ Type : std::string
					$ CardImage : std::string
			LevelOfTheDayPropertySheet 070
				$ KilledZombieExcludelist : std::vector<RtWeakPtr<ZombieType> >
				$ FirstTimeNarrative : std::string
				$ SenorPinataInterval : int32
				$ ReplayLevelCost : int32
				$ ReplayLevelCurrency : MarketPurchaseCurrency
				$ NotificationStartOffset : uint64
				$ AndroidExcludelist : std::vector<std::string>
				$ ConsecutiveCostumeRewardConsolationCategory : std::string
				$ SoonestIntroLevel : std::string
			LevelOfTheDayRewards 028
				$ Rewards : std::vector<LevelOfTheDay_RewardItemType>
			LevelOfTheDayHolidays 038
				$ HolidayEvents : std::vector<HolidayEventProperties>
				$ HolidayDefault : std::string
			WorldMapPropertySheet 070
				$ ParallaxSpeedLayerForeground4 : float
				$ ParallaxSpeedLayerForeground3 : float
				$ ParallaxSpeedLayerForeground2 : float
				$ ParallaxSpeedLayerForeground1 : float
				$ ParallaxSpeedLayer1 : float
				$ ParallaxSpeedLayer2 : float
				$ ParallaxSpeedLayer3 : float
				$ ParallaxSpeedLayer4 : float
				$ ParallaxSpeedLayer5 : float
				$ ParallaxSpeedLayer6 : float
				$ ParallaxSpeedLayer7 : float
				$ ParallaxSpeedLayer8 : float
				$ ParallaxSpeedLayer9 : float
				$ ParallaxSpeedLayer10 : float
				$ PathUnlockSpeed : float
				$ SnapGrid : SexyVector2
				$ EditorSafeZoneYStart : float
				$ EditorSafeZoneYEnd : float
			JoustSchedule 028
				$ TournamentDefinitions : std::vector<JoustTournamentDefinition>
				- JoustTournamentDefinition
					$ StartDate : uint64
					$ HideDetailsInFutureSchedule : bool
					$ LeaderboardDefinitionKey : std::string
					$ CrownRewardKey : std::string
					$ LevelSetKey : std::string
					$ ProgressiveRewardKeys : std::vector<std::string>
					$ TournamentRewardKeys : std::vector<std::string>
			JoustLeaderboardDefinition 038
				$ NumLeagues : int32
				$ LeaderboardSize : int32
				$ PromotionCount : int32
				$ DemotionCount : int32
				$ MinimumPlayerCountBeforeDemotion : int32
				$ MinimumLeagueBeforeDemotion : int32
			JoustCrownRewardDefinition 030
				$ CrownsWinBase : int32
				$ CrownsLoss : int32
				$ CrownsProgressiveBonus : std::vector<int>
			JoustLevelSet 038
				$ LevelName : std::string
				$ LevelSeeds : std::vector<std::string>
			JoustProgressiveRewardDefinition 028
				$ ProgressiveRewards : std::vector<LevelOfTheDay_RewardItemType>
			JoustTournamentRewardDefinition 028
				$ PlacementRewards : std::vector<std::vector<LevelOfTheDay_RewardItemType> >
			UIWidgetSheet 0B0
				$ Class : std::string
				$ Parent : std::string
				$ ParentAnchor : AnchorType
				$ Anchor : AnchorType
				$ ResourceGroup : std::string
				$ Width : uint16
				$ Height : uint16
				$ VirtualWidth : uint16
				$ BoardScaledVirtualWidth : uint16
				$ VirtualHeight : uint16
				$ SizeFromImage : std::string
				$ SizeFromScreen : bool
				$ WidthFromImage : std::string
				$ HeightFromImage : std::string
				$ WidthFromScreen : bool
				$ HeightFromScreen : bool
				$ InputPriority : int8
				$ RenderOrder : int16
				$ PositionOffset : SexyVector2
				$ ScalePositionOffset : bool
				$ ImmuneToDeviceScaling : bool
				$ VirtualHitInsets : Insets
				$ IncludelistID : std::string
				$ IgnoreSafeArea : bool
				- Insets
					$ mLeft : int32
					$ mTop : int32
					$ mRight : int32
					$ mBottom : int32
			PVZVersion 028
				$ major : int32
				$ minor : int32
				$ content : int32
			ForceUpdateConfigData 058
				$ MinVersion : std::string
				$ MinJoustVersion : std::string
				$ MinRiftVersion : std::string
				$ iOSURL : std::string
				$ AndroidURL : std::string
			ZenGardenPlantRewardsPropertySheet 050
				$ LootCategories : std::vector<LevelOfTheDay_RewardItemType>
				$ CoinRewards : std::vector<LevelOfTheDay_RewardItemType>
				$ GemRewards : std::vector<LevelOfTheDay_RewardItemType>
				$ PowerupRewards : std::vector<LevelOfTheDay_RewardItemType>
			ProductFilterPropertySheet 028
				$ ObjectTypeFilters : std::vector<ProductFilterProps>
			BoardPropertySheet 0A8
				$ PlantTargetingXThreshold : float
				$ MaxSunCurrency : uint16
				$ ZombieThreatLowAlert_TriggerPositionX : float
				$ ZombieThreatHighAlert_TriggerPositionX : float
				$ ZombieThreatLowAlert_StarChallengeOffsetX : float
				$ ZombieThreatHighAlert_StarChallengeOffsetX : float
				$ ZombieThreatLowAlert_ProtectPlantOffsetX : float
				$ ZombieThreatHighAlert_ProtectPlantOffsetX : float
				$ CoinAlert_LowBalanceThreshold : int32
				$ RequiredSubsystems : std::vector<std::string>
				$ ZombieTideMaxHeightPct : float
				$ DefaultTideMaxHeightPct : float
				$ MaxTideDropoffDistance : float
				$ DynamicDifficultyMowerImmunity : std::vector<float>
				$ DynamicDifficultyMowerCooldown : std::vector<float>
				$ DangerRoomMowerImmunity : float
				$ DangerRoomMowerCooldown : float
				$ LastStandPlantExcludelist : std::vector<std::string>
				$ PlantFrostExcludelist : std::vector<std::string>
				$ ProtectThePlantAdditionalPlantingExcludelist : std::vector<std::string>
				$ PlantSmashAttackExcludelist : std::vector<std::string>
			MarketScheduleEventCacheData 028
				$ Events : std::vector<MarketScheduleEventCached>
				- MarketScheduleEventCached
					$ VersionKey : int64
					$ Event : MarketScheduleEvent
			LevelModuleDifficultyProps 048
				$ Description : std::string
				$ Name : std::string
				$ DisplayPriority : DifficultyDisplayPriority
				$ DisplayPriorityOverrides : std::vector<DisplayPriorityOverride>
				- DisplayPriorityOverride
					$ EventSubType : MapEventSubType
					$ DisplayPriority : DifficultyDisplayPriority
			LevelModuleProperties 050
				$ ResourceGroupNames : std::vector<std::string>
				$ DifficultyProps : <void *>
				$ IconImage : std::string
				$ IconText : std::string
				DefeatGeneralPhasesChallengeProps 060
					$ Description : std::string
					$ NumPhasesToKill : int32
				InitialPlantProperties 060
					$ InitialPlantPlacements : std::vector<PlantPlacementProperties>
					$ IsInitialIntensiveCarrotPlacements : bool
					- PlantPlacementProperties
						$ TypeName : std::string
						$ GridX : int32
						$ GridY : int32
						$ Condition : PlantConditions
						$ Level : int32
				PaddedRoomProperties ?
					<NONE>
				SpawnGravestoneZombiesOnFlagWavesProperties 050
				StarChallengeSaveMowersProps 050
				PickupCollectableTutorialProperties 078
					$ PickupAdvice : std::string
					$ PostPickupAdvice : std::string
					$ DropperZombieType : std::string
					$ LootType : Loot
				LevelScoringModuleProperties 070
					$ PlantBonuses : std::vector<LevelScoringPlantBonusTier>
					$ PlantBonusMultiplier : float
					$ ScoringRulesType : std::string
					$ StartingPlantfood : int32
					- LevelScoringPlantBonusTier
						$ Multiple : int32
						$ Plants : std::vector<std::string>
				LevelMutatorStartingPlantfoodProps 050
					$ StartingPlantfoodOverride : int32
				LevelMutatorSeedSlotCountProps 050
					$ SeedSlotCountOverride : int32
				LevelMutatorPowerupSetProps 058
					$ PowerupSetOverride : std::string
				LevelMutatorMaxSunProps 050
					$ MaxSunOverride : int32
				LevelMutatorStartSunProps 050
					$ StartSunModifier : int32
				LevelMutatorMowerSpawnProps 050
					$ SpawnOverride : MowerSpawnOverride
				LevelMutatorZombieCountdownFirstWaveSecsProps 050
					$ FirstWaveSecs : int32
				LevelMutatorZombieLevelProps 050
					$ BaseZombieLevel : int32
				LevelMutatorZombieGeneralLevelProps 050
					$ BaseZombieLevel : int32
				LevelMutatorSunDropperProps 058
					$ LevelModuleOverride : <void *>
				LevelMutatorRiftZombossPhasesProps 050
					$ ZombossPhases : int32
				LevelMutatorGridItemLevelProps 050
					$ BaseGridItemLevel : int32
				PointOfLossModuleProperties 068
					$ EscalatingGemCostPerLevel : std::vector<int>
					$ AdUsesAvailablePerLevel : int32
					$ TotalUsesAvailablePerLevel : int32
					$ ExtraTimeGems : float
					$ ExtraTimeAd : float
					ZombossRiftPointOfLossModuleProperties 068
					SecurityGourdPointOfLossModuleProperties 068
					JoustPointOfLossModuleProperties 070
						$ ExtraTimeGems : float
						$ ExtraTimeAd : float
				InitialGridItemProperties 058
					$ InitialGridItemPlacements : std::vector<GridItemPlacementProperties>
					- GridItemPlacementProperties
						$ TypeName : std::string
						$ GridX : int32
						$ GridY : int32
				PlantCooldownModifierProperties 060
					$ HomeworldToExcludeFromOverride : std::string
					$ CooldownMultiplier : float
				BoardTimerProperties 050
				SunDropperProperties 060
					$ InitialSunDropDelay : float
					$ SunCountdownBase : float
					$ SunCountdownRange : float
					$ SunCountdownMax : float
					$ SunCountdownIncreasePerSun : float
				PiratePlankProperties 058
					$ PlankRows : std::vector<int>
				ChallengeModuleProperties 068
					$ Challenges : std::vector<std::vector<RtWeakPtr<LevelModuleProperties> > >
					BaseChallengeModuleProperties 068
						$ Difficulties : std::vector<int>
						$ ChallengesAlwaysAvailable : bool
						StarChallengeModuleProperties 068
						BonusChallengeModuleProperties 068
				TideProperties 058
					$ StartingWaveLocation : float
					$ ShowTideMarker : bool
				GravestoneProperties 078
					$ GravestoneTypeName : std::string
					$ GravestoneCount : int32
					$ GravestoneCountIncludesForceSpawns : bool
					$ SpawnColumnStart : int32
					$ SpawnColumnEnd : int32
					$ ForceSpawnData : std::vector<GravestoneForceSpawnData>
					- GravestoneForceSpawnData
						$ TypeName : std::string
						$ GridX : int32
						$ GridY : int32
				StageModuleProperties 140
					$ BackgroundResourceGroup : std::string
					$ BackgroundImagePrefix : std::string
					$ StagePrefix : std::string
					$ BasicZombieTypeName : std::string
					$ FlagZombieTypeName : std::string
					$ FlagVeteranZombieTypeNames : std::vector<std::string>
					$ Armor1ZombieTypeName : std::string
					$ Armor2ZombieTypeName : std::string
					$ Armor4ZombieTypeName : std::string
					$ MusicSuffix : std::string
					$ MusicSuffixMinigame : std::string
					$ AmbientAudioSuffix : std::string
					$ RailcartDefaultTypeName : std::string
					$ GravestoneDefaultTypeName : std::string
					$ DirtSpawnEffectName : std::string
					$ LevelPowerupSet : std::string
					$ ZombieEventAudio : std::string
					$ DisabledStreetCells : std::vector<Point>
					$ ProgressFlagAsset : std::string
					$ StarChallengeUnlockLevel : std::string
					DinoStageProperties 140
					LunarStageProperties 140
					SportzballStageProperties 140
					JoustStageProperties 140
						$ DrawMultiplierOverlay : bool
						$ DrawMultiplierLabels : bool
					FutureStageProperties 140
					DarkStageProperties 148
						$ Armor3ZombieTypeName : std::string
					CarnivalStageProperties 140
					EgyptStageProperties 140
					WestStageProperties 140
					ModernStageProperties 140
					LostCityStageProperties 140
					PirateStageProperties 158
						$ BreakerInterval : float
						$ PlantsWhichCannotBePlantedOnPlanks : PlantRestrictionSet
					BeachStageProperties 140
					IceAgeStageProperties 140
					EightiesStageProperties 140
					FrontLawnStageProperties 140
						HeroesStageProperties 140
				ProtectThePlantChallengeProperties 060
					$ MustProtectCount : int32
					$ Plants : std::vector<ProtectedPlantEntry>
					- ProtectedPlantEntry
						$ PlantType : std::string
						$ GridX : int32
						$ GridY : int32
						$ Level : int32
				StarChallengeSimultaneousPlantsProps 050
					$ MaximumPlants : int32
				LevelSongOverrideProperties 078
					$ StartEvent : std::string
					$ StopEvent : std::string
					$ AudioGroup : std::string
					$ MusicDelayForLastStandStart : bool
				WaveManagerModuleProperties 068
					$ WaveManagerProps : RtWeakPtr<WaveManagerProperties>
					$ ManualStartup : bool
					$ DynamicZombies : std::vector<DynamicZombiesInstruction>
					- DynamicZombiesInstruction
						$ StartingPoints : int32
						$ PointIncrementPerWave : int32
						$ MaxPoints : int32
						$ StartingWave : int32
						$ ZombiePool : std::vector<RtWeakPtr<ZombieType> >
				CannonMinigameProperties 090
					$ Lanes : std::vector<PirateLane>
					$ BaseMovementRate : float
					$ SlowdownMovementRate : float
					$ BufferDistance : float
					$ RowHasCannon : std::vector<int>
					$ UseLevelScoringModule : bool
					$ ComboBrackets : std::vector<ComboBracket>
					$ BaseZombieKillScore : int32
					$ MinRewardGold : int32
					$ MaxRewardGold : int32
					$ MinScore : int32
					- PirateLane
						$ SplinePoints : std::vector<SexyVector2>
					- ComboBracket
						$ ZombiesKilled : int32
						$ ScoreMultiplier : float
						$ MessageColor : Color
						$ AudioCue : std::string
						$ Exclamations : std::vector<std::string>
				ZombiePotionModuleProperties 068
					$ PotionSpawnTimer : ValueRange
					$ PotionTypes : std::vector<std::string>
					$ MaxPotionCount : int32
					$ InitialPotionCount : int32
				DestroyGridItemsChallengeProps 068
					$ GridItemsToDestroy : int32
					$ GridItemType : std::string
					$ ChallengeDescription : std::string
				StarChallengeCannonMinigameProps 070
					$ Description : std::string
					$ DescriptionFailure : std::string
					$ DescriptiveName : std::string
				StarChallengeFamilyPlantsProps 060
					$ PlantCount : int32
					$ FamilyName : std::string
				CoreLoopRewardsLevelModuleProps ?
					<NONE>
				StarChallengeLevelTimerProperties 050
					$ TimeLimit : float
				PlantFullRowChallengeProps 050
					$ NumPlantsInRowNeeded : int32
				GridItemPlacementModuleProps 060
					$ Type : std::string
					$ Locations : RtWeakPtr<BoardGridMapProps>
					GridItemPlacementChallengeModuleProps 060
				SproutOverrideProperties 058
					$ PlantWeights : std::vector<std::vector<SproutPlantWeights>>
				StarChallengeTargetScoreProps 078
					$ TargetScore : float
					$ Description : std::string
					$ DescriptionFailure : std::string
					$ DescriptiveName : std::string
				LevelEscalationModuleProperties 080
					$ WaveManagerProps : RtWeakPtr<WaveManagerProperties>
					$ ZombiePool : std::vector<RtWeakPtr<ZombieType> >
					$ FlagCount : int32
					$ WavesPerFlag : int32
					$ PlantfoodToSpawnCount : int32
					$ PointIncrementPerWave : int32
					$ StartingPoints : int32
					$ MaxPoints : int32
					LevelOfTheDayModuleProperties 080
				SecurityGourdModuleProperties 078
					$ DestroyZombiesAffectedColumns : int32
					$ DestroyZombiesUnderHealthPercent : float
					$ KnockbackAffectedColumns : int32
					$ KnockbackDistance : float
					$ KnockbackTime : float
					$ KnockbackHeight : float
					$ ResetPlantCooldowns : bool
					$ ZombieClassKillIncludelist : std::vector<std::string>
				JoustGameModuleProperties 088
					$ TimeLimit : float
					$ WaveSetsToAppend : int32
					$ PeriodOfWavesToLoop : int32
					$ LeagueModifiers : std::vector<JoustGameLeagueInitParams>
					$ SuggestedLoadout : std::string
					$ LevelLoadouts : PredefinedLoadoutGroup
					- JoustGameLeagueInitParams
						$ LeagueThreshold : int32
						$ AddZombieLevel : int32
						$ AddTimeLimit : int32
				CrazyOlafTestProperties 0A0
					$ PlantIncludelist : std::vector<std::string>
					$ PlantExcludelist : std::vector<std::string>
					$ PlantRequiredList : std::vector<std::string>
					$ Actions : std::vector<ActionWeights>
					$ CreatureList : std::vector<CreatureListType>
					$ ActionTimer : float
					$ RestartLevelTimer : float
					$ MaxPlantTypes : int32
					$ MaxPerType : int32
					$ PlantBeforeColumn : int32
					- ActionWeights
						$ Action : TestActionsCrazyOlafStyle
						$ Weight : int32
					- CreatureListType
						$ CreatureTypeName : std::string
						$ MaxCountInRow : int32
				StarChallengeBeatTheLevelProps 068
					$ Description : std::string
					$ DescriptiveName : std::string
				LevelMutatorModuleProperties 058
					$ MutatorTables : std::vector<RtId>
				ZombieResistancesModuleProperties 058
					$ FamilyResistances : std::map<std::string RT_COMMA std::vector<PlantFamilyResistance> >
				StarChallengeZombieDistanceProps 050
					$ TargetDistance : float
				GeneralZombieModuleProperties 058
					$ Phases : std::vector<GeneralZombieEntry>
					- GeneralZombieEntry
						$ ZombieType : std::string
						$ SpawnDelay : float
						$ ZombieLifetime : float
						$ ZombieLevelOverride : int32
						$ ZombieLevelAddLeagueBase : bool
						$ LaneToSpawnMin : int32
						$ LaneToSpawnMax : int32
				VaseBreakerFlowModuleProperties 050
				StarChallengeSunUsedProps 050
					$ MaximumSun : int32
				PowerTileProperties 058
					$ LinkedTiles : std::vector<PowerTileEntry>
					- PowerTileEntry
						$ Location : Point
						$ Group : PowerTileClass
				PerkHandlerModuleProperties 050
				IntroModuleProperties 050
					StandardLevelIntroProperties 070
						$ PanStartOffset : float
						$ PanEndOffset : float
						$ PanRightDuration : float
						$ PanLeftDuration : float
						$ NarrationID : int32
						$ SubsequentPlayNarrationID : int32
						$ AdditionalStartingSun : int32
						$ PreSeedchooserFlow : PreSeedchooserFlowType
						SproutPlantingMinigameProperties 080
							$ StartingSproutCount : int32
							$ TimeToPlantAllSprouts : float
							$ PlantWeights : std::vector<std::vector<SproutPlantWeights>>
						TutorialLevel4Properties 070
						CamelMinigameProperties 098
							$ ShowTutorial : bool
							$ CardTypesUsed : int32
							$ CardMatchingTime : float
							$ CardMatchTime : float
							$ CardNoMatchTime : float
							$ MinSpawnXStart : float
							$ MinSpawnXEnd : float
							$ MaxSpawnX : float
							$ InitialTutorialZombieRiseDelay : float
							$ CamelSegmentRiseStagger : float
							$ AdditionalXBufferBetweenChains : float
						IntroCinemaProperties 070
						PirateCannonTutorialProperties 070
							$ ShowTutorial : bool
						TutorialLevel1Properties 070
						TutorialLevel3Properties 070
						TutorialLevel2Properties 070
						LastStandMinigameProperties 078
							$ StartingSun : int32
							$ StartingPlantfood : int32
						PowerupPurchaseIntroProperties 078
							$ Narrative : std::string
						MagnifyingGrassTutorialIntroProperties 070
						DangerRoomLevelIntroProperties 070
						RailcartTutorialIntroProperties 070
						PowerupTutorialIntroProperties ?
							<NONE>
						BananaTutorialProperties 070
						MissileToeTutorialProperties 070
						PlantfoodPurchaseTutorialIntroProperties 070
						TutorialLevelMinesProperties 070
						LevelOfTheDayIntroProperties 070
						BeghouledIntroProperties 070
						PlantfoodTutorialIntroProperties 070
						PowerTileIntroProperties 070
						ZombossBattleIntroProperties 078
							$ ZombossPhaseCount : int32
							$ SkipShowingStreet : bool
				LootOverrideModuleProperties 058
					$ Overrides : std::vector<LootOverrideEntry>
					- LootOverrideEntry
						$ ZombieType : RtWeakPtr<ZombieType>
						$ LootOverride : Loot
				OutroModuleProperties 050
					VictoryOutroProperties 078
						$ FlagSpawnTime : float
						$ BaseCoinAwardValue : int32
						$ CoinsPerMower : int32
						$ CoinShowerStartTime : float
						$ CoinShowerDuration : float
						$ CoinShowerDelayBetweenMowers : float
						$ CoinInitialHeight : float
						$ CoinCollectTime : float
						$ AdditionalEndingDelay : float
						$ BoardFadeTime : float
						ZombossVictoryOutroProperties 078
					ZombiesAteYourBrainsOutroProperties 050
					EventsOutroProperties 050
					JoustOutroProperties 050
					RiftOutroProperties 050
					LevelOfTheDayOutroPropeties 050
					FadeOutOutroProperties 070
						$ DefaultMessage : std::string
						$ FadeColor : Color
						$ FadeDuration : float
						$ PostFadeDelay : float
				RailcartProperties 070
					$ RailcartType : std::string
					$ Rails : std::vector<RailcartRail>
					$ Railcarts : std::vector<RailcartLocation>
					- RailcartLocation
						$ Column : int32
						$ Row : int32
					- RailcartRail
						$ Column : int32
						$ RowStart : int32
						$ RowEnd : int32
				SimpleZombieSpawnerProperties 058
					$ Stages : std::vector<ZSEntryList>
					BeghouledZombieSpawnerProperties 068
						$ MatchCountsToStageAdvance : std::vector<MatchStageMap>
						- MatchStageMap
							$ StageNumber : int32
							$ MatchCount : int32
					- ZombieSpawnerEntry
						$ ZombieType : std::string
						$ Weight : int32
					- ZSEntryList
						$ Types : std::vector<ZombieSpawnerEntry>
						$ SpawnCount : int32
						$ SpawnDelay : float
						$ PlantFoodInterval : int32
				InvisighoulMinigameProperties 050
				GlacierModuleProperties 068
					$ ZombieSpawnData : std::vector<ProbabilityTypeContainer>
					$ GlacierType : std::string
				ApplyZombieConditionsChallengeProps 060
					$ NumZombieConditionsToApply : int32
					$ ConditionToInflict : std::vector<ZombieConditions>
					$ IncludeBurnedToAsh : bool
					$ IncludeElectrified : bool
				SunBombChallengeProperties 060
					$ PlantBombExplosionRadius : float
					$ ZombieBombExplosionRadius : float
					$ PlantDamage : float
					$ ZombieDamage : float
				CowboyMinigameProperties 058
					$ ShowTutorial : bool
					$ BeginString : std::string
				SeedBankProperties 0B0
					$ SelectionMethod : SeedBankSelectionMethod
					$ AlwaysUseChooser : bool
					$ PlantIncludeList : std::vector<std::string>
					$ PlantExcludeList : std::vector<std::string>
					$ ExcludeListLiftedBy : std::string
					$ ExcludeListSunProducers : bool
					$ PresetPlantList : std::vector<PresetPlantEntry>
					$ PresetPlantCostumeList : std::vector<PresetPlantCostumeEntry>
					$ BeghouledUpgradeList : std::vector<std::string>
					$ SuggestPlantList : std::vector<std::vector<std::string>>
					$ OverrideSeedSlotsCount : int32
					ConveyorSeedBankProperties 0D8
						$ ManualPacketSpawning : bool
						$ InitialPlantList : std::vector<ConveyorPlantEntry>
						$ DropDelayConditions : std::vector<ConveyorDropDelayCondition>
						$ SpeedConditions : std::vector<ConveyorSpeedCondition>
						- ConveyorPlantEntry
							$ PlantType : std::string
							$ Weight : int32
							$ MinCount : int32
							$ MinWeightFactor : float
							$ MaxCount : int32
							$ MaxWeightFactor : float
							$ DeliveredSoFar : int32
							$ MaxDelivered : int32
							$ MaxCountCooldownSeconds : float
							$ CooldownAvailableTime : float
							$ ForceBoosted : bool
							$ Level : int32
						- ConveyorSpeedCondition
							$ MaxPackets : int32
							$ Speed : float
						- ConveyorDropDelayCondition
							$ MaxPackets : int32
							$ Delay : float
					BeghouledSeedBankProperties 0B0
					- PresetPlantEntry
						$ PlantType : std::string
						$ Level : int32
					- PresetPlantCostumeEntry
						$ PlantType : std::string
						$ CostumeID : int32
				JamZombiesModuleProperties 050
				StarChallengeKillZombiesInTimeProps 058
					$ ZombiesToKill : int32
					$ Time : float
				ZombossBattleModuleProperties 070
					$ ZombossSpawnGridPosition : Point
					$ ReservedColumnCount : int32
					$ ZombossMechType : std::string
					$ ZombossDeathRow : int32
					$ ZombossDeathColumn : int32
					$ ShowInStreetView : bool
					$ SlideInStreetView : bool
					ZombossRiftBattleModuleProperties 078
						$ ZombossPhases : int32
						$ TimeLimit : float
				BoosteramaModuleProperties 050
				TutorialPeashooterDeathProperties 050
				LootOverrideZombossRiftModuleProps 058
					$ Entries : std::vector<ZombossRiftLootEntry>
					- ZombossRiftLootEntry
						$ MinSeconds : float
						$ MaxSeconds : float
						$ Drop : Loot
				StarChallengeSpendSunHoldoutProps 050
					$ HoldoutSeconds : int32
				ZombiesDeadWinConProperties 050
				VaseBreakerProperties 050
					VaseBreakerPresetProperties 080
						$ MinColumnIndex : int32
						$ MaxColumnIndex : int32
						$ Vases : std::vector<VaseContentProperties>
						$ NumColoredPlantVases : int32
						$ NumColoredZombieVases : int32
						$ GridSquareExcludelist : std::vector<Point>
						$ VaseGridItemType : std::string
					VaseBreakerEndlessProperties 080
						$ TestEndlessLevel : int32
						$ VaseGridItemType : std::string
						$ StarZombieAndPlantPair : VaseBreakerEndlessStarZombiePlantPair
						$ Stages : std::vector<VaseBreakerEndlessStage>
						- VaseBreakerEndlessStarZombiePlantPair
							$ ZombieType : std::string
							$ PlantType : std::string
						- VaseBreakerEndlessEntityAndCountPair
							$ Type : std::string
							$ Count : int32
						- VaseBreakerEndlessStage
							$ StartingLevel : int32
							$ EscalationRate : int32
							$ MinColumnIndex : int32
							$ MaxColumnIndex : int32
							$ NumberOfColoredPlants : int32
							$ PlantTypes : std::vector<VaseBreakerEndlessEntityAndCountPair>
							$ CollectableTypes : std::vector<VaseBreakerEndlessEntityAndCountPair>
							$ FixedZombieTypes : std::vector<VaseBreakerEndlessEntityAndCountPair>
							$ EscalatingZombieTypes : std::vector<VaseBreakerEndlessEntityAndCountPair>
					- VaseContentProperties
						$ ZombieTypeName : std::string
						$ PlantTypeName : std::string
						$ CollectableTypeName : std::string
						$ Count : int32
				MinigameWhackAZombieModuleProperties 068
					$ HammerTapsToDecay : std::vector<int>
					$ HammerHitValue : std::vector<float>
				ColumnMinigameProperties 050
				InitialZombieProperties 058
					$ InitialZombiePlacements : std::vector<ZombiePlacementProperties>
					- ZombiePlacementProperties
						$ TypeName : std::string
						$ GridX : int32
						$ GridY : int32
						$ Condition : ZombieConditions
				BeghouledProperties 050
					BeghouledPresetProperties 068
						$ MatchesToWin : int32
						$ InitialPlants : std::vector<std::string>
						$ UpgradeMap : std::vector<BeghouledUpgradeMap>
						- BeghouledUpgradeMap
							$ BasePlant : std::string
							$ UpgradedPlant : std::string
				DefeatZombiesOfTypeChallengeProps 070
					$ Description : std::string
					$ NumZombiesToKill : int32
					$ TypesToKill : ZombieRestrictionSet
				ArcadeModuleProperties 050
					BeghouledArcadeModuleProperties ?
						<NONE>
					VaseBreakerArcadeModuleProperties ?
						<NONE>
				MoldColonyChallengeProps 058
					$ Locations : RtWeakPtr<BoardGridMapProps>
				StarChallengeSunProducedProps 050
					$ TargetSun : float
				DangerRoomLevelDesignerProperties 060
					$ RngSeed : uint32
					$ LevelDesigners : std::vector<DangerRoomLevelDesignerParams>
					- DangerRoomLevelDesignerParams
						$ LevelToUse : int32
						$ Designer : RtWeakPtr<DangerRoomLevelDesigner>
				StarChallengePlantsLostProps 050
					$ MaximumPlantsLost : int32
				BowlingMinigameProperties 050
					$ BowlingFoulLine : int32
				LawnMowerProperties 080
					$ MowerEntryAnimDuration : float
					$ MowerPopAnim : std::string
					$ MowerActivatedAudioEvent : std::string
					$ MowerIdleAnimWeights : std::vector<int>
					$ MowerExplodeAtGridX : int32
					$ UnlimitedMowers : bool
				DangerRoomModuleProperties 068
					$ WorldSpecificProperties : RtWeakPtr<WorldSpecificDangerRoomProperties>
					$ LevelDesigners : std::vector<RtWeakPtr<DangerRoomLevelDesigner>>
				OttoBotBoardStateObserverLevelModuleProperties 050
				WaveDuplicatorModuleProperties 058
					$ WaveSetsToAppend : int32
					$ PeriodOfWavesToLoop : int32
				ZombieModifierProperties 050
					$ Speedy : bool
				WaveDistributorModuleProperties 068
					$ WavesToDistribute : std::vector<RtWeakPtr<WaveActionProperties>>
					$ Count : int32
					$ LevelEndpoint : float
					$ Pattern : WaveDistributorPattern
				ZombiesAteYourBrainsProperties 058
					$ ZombieWinPositionX : float
					$ ZombieDiesInsteadOfWinning : bool
				LevelDifficultyScalingModuleProperties 068
					$ DifficultyRulesType : std::string
					$ ZombieLevelSwaps : std::vector<ZombieLevelSwapPool>
					- ZombieLevelSwapEntry
						$ From : RtWeakPtr<ZombieType>
						$ To : std::vector<RtWeakPtr<ZombieType>>
					- ZombieLevelSwapPool
						$ Level : int32
						$ Swaps : std::vector<ZombieLevelSwapEntry>
			EASquaredPropertySheet 068
				$ MinimumDaysSinceInstall : int32
				$ FreeCoinsAwarded : int32
				$ FreeGemsAwarded : int32
				$ FreeGemsButtonMaxThrottle : int32
				$ FreeTicketsAwarded : int32
				$ FreeTicketsButtonMaxThrottle : int32
				$ FreeMintsAwarded : int32
				$ FreeMintsButtonMaxThrottle : int32
				$ FreePennyFuelAwarded : int32
				$ FreePennyFuelButtonMaxThrottle : int32
				$ EnableAdMobMediation : bool
				$ EnableIronSource : bool
				$ FreePowerupsAwarded : int32
				$ FreePowerupsMaxThrottle : int32
				$ FreePinatasMaxThrottle : int32
				$ PowerupType : std::string
				$ FreeCoinsButtonMaxThrottle : int32
			LevelDefinition 278
				$ Name : std::string
				$ Description : std::string
				$ MainObjective : std::string
				$ StartingSun : int16
				$ AddBonusStartingSun : bool
				$ LevelNumber : int32
				$ SuppressSunSpawn : bool
				$ FlickPowerupRightEdgeOffset : int32
				$ StageModule : RtWeakPtr<StageModuleProperties>
				$ VictoryModule : RtWeakPtr<OutroModuleProperties>
				$ LossModule : RtWeakPtr<OutroModuleProperties>
				$ LevelMutator : RtWeakPtr<LevelMutatorModuleProperties>
				$ Modules : std::vector<RtId>
				$ Loot : RtWeakPtr<LootConfig>
				$ NormalPresentTable : std::string
				$ ShinyPresentTable : std::string
				$ SuppressAwardScreen : bool
				$ FirstRewardType : AwardType
				$ FirstRewardParam : std::string
				$ ReplayRewardType : AwardType
				$ ReplayRewardParam : std::string
				$ GameOverDialogShowBrain : bool
				$ ShowZombieThreatAlerts : bool
				$ FirstIntroNarrative : std::string
				$ ReplayIntroNarrative : std::string
				$ FirstOutroNarrative : std::string
				$ ReplayOutroNarrative : std::string
				$ ForceNextLevel : std::string
				$ ForceWarpTunnel : bool
				$ ForceToWorldMap : bool
				$ RepeatPlayForceToWorldMap : bool
				$ IsVasebreaker : bool
				$ IsDangerRoom : bool
				$ IsLevelOfTheDay : bool
				$ DisableRestart : bool
				$ CompletionAchievement : std::string
				$ GameFeaturesToUnlock : std::vector<GameFeature>
				$ MusicType : std::string
				$ ResourceGroupNames : std::vector<std::string>
				$ GroupsToUnloadForAds : std::vector<std::string>
				$ LevelPrerequisites : std::vector<std::string>
				$ DraperPromo : std::string
				$ LevelPowerupSet : std::string
				$ LevelJam : std::string
				$ DoMusicChanges : bool
				$ RandomLevelSet : std::vector<std::string>
				$ LoadDefaultMusic : bool
				$ SuppressDynamicTutorial : bool
				$ ZombieLevel : int32
				$ GridItemLevel : int32
				$ FixedPlantLevel : int32
				$ SuppressPlantfoodPurchase : bool
				$ SuppressAccountUpgrades : bool
				$ DisablePlantBoosts : bool
				$ DisableSaveGame : bool
				$ GeneratorResults : LevelGenResults
				$ PerksDisabledInLevel : std::vector<std::string>
				$ PerksDisabledPerDifficulty : std::vector<std::vector<std::string>>
			NPCDataSheet 108
				$ PopAnim : std::string
				$ StaticImage : std::string
				$ DialogStyle : NPCTextType
				$ FontType : NPCFontType
				$ SoundBankPrefix : std::string
				$ Name : std::string
				$ ArtCornerPosition : Point
				$ ArtIsMirrored : bool
				$ FlipHorizontally : bool
				$ LoadResourceGroups : std::vector<std::string>
				$ IdleAnim : std::string
				$ EnterAudioEvent : std::string
				$ ExitAudioEvent : std::string
				$ IdleAnim : std::string
				$ IdleWithItemAnim : std::string
				$ EatWithItemAnim : std::string
				$ TalkWithItemAnim : std::string
				$ TalkCrazyAnim : std::string
				$ TalkShortAnim : std::string
				$ TalkMediumAnim : std::string
				$ TalkLongAnim : std::string
				$ EnterAnim : std::string
				$ EnterWithItemAnim : std::string
				$ LeaveAnim : std::string
			GridItemPropertySheet 060
				$ Hitpoints : float
				$ HitRectOffsetX : int32
				$ HitRectOffsetWidth : int32
				$ Height : BoardEntityHeight
				$ CanBeMowed : bool
				$ PlantingRestrictions : PlantingRestrictionSet
				$ GridItemsOverride : GridItemRestrictionSet
				GridItemAnimationProps 0A0
					$ PopAnim : std::string
					$ PopAnimRigClass : std::string
					$ PopAnimRenderOffset : SexyVector2
					$ PopAnimRenderScale : SexyVector2
					$ LinkedPopAnim : std::string
					$ LinkedOffset : SexyVector3
					$ LinkedLayerOffset : int32
					GridItemCraterProps 0A0
						$ PopAnim : std::string
						$ PopAnimRenderOffset : SexyVector2
						GridItemCraterTimedProps 0A8
							$ Lifetime : float
					GridItemZombiePortalProps 0E8
						$ TimeBetweenSpawns : ValueRange
						$ ZombieTypesToSpawn : std::vector<BasicZombieWeights>
						$ ZombieSpawnPointOffset : int32
						$ ZombiesToSpawn : int32
						$ ZombieSpawnMethod : GridItemZombieSpawnMethod
						$ SpawnAnimation : std::string
						$ CloseAnimation : std::string
						$ World : std::string
					GridItemGoldTileProps 0B0
						$ SunGrantedPerPlant : int32
						$ SunGrantedOnFirstPlant : int32
						$ TimeBetweenPlantSpawnedSunDrops : float
					GridItemScoreTileProps 0A8
						$ ScoreMultiplier : float
					GridItemTriggerTileProps 0C0
						$ TriggeringEntityTypes : std::vector<BoardEntityTypeFlag>
						$ TriggerRect : Rect
						$ TimeBetweenTriggersInSeconds : float
						GridItemGridRegionAreaOfEffectTrapProps 0E8
							$ EffectObjectName : std::string
							$ TileBaseAnimation : std::string
							$ ColumnRadius : int32
							$ RowRadius : int32
							$ TimeBetweenDamageEffectSpawnsInSeconds : float
						GridItemSliderTileProps 0D0
							$ Direction : GridItemSliderDirection
							$ SlideDuration : float
							$ SlideZombieLaneChangeCooldown : float
						GridItemProjectileTrapProps 0F0
							$ PositioningFlags : std::vector<GridItemProjectileTrapPositioningFlags>
							$ ProjectileTypeToSpawn : RtWeakPtr<ProjectilePropertySheet>
							$ TileBaseAnimation : std::string
							$ ProjectileFireOriginOffset : SexyVector3
					GridItemPowerTileProps 0B8
						$ TileClass : PowerTileClass
						$ TileColor : Color
					ZombiePotionProps 0E8
						$ EffectStacks : std::vector<ZombieConditions>
						$ EffectSound : std::string
						$ DestroyedSound : std::string
						$ DestroyedSoundGargantuar : std::string
						$ PopAnimEffect : std::string
						$ PopAnimDestroyed : std::string
					GridItemLilyPadProps 0B8
						$ PlantsWhichCannotBePlantedOnLilypads : PlantRestrictionSet
					GridItemDusklobberFlowerProps 0B0
						$ PopAnim : std::string
						$ PopAnimRenderOffset : SexyVector2
						$ Lifetime : float
						$ BombProjectile : std::string
					GridItemLavaProps 1B8
						$ PopAnim : std::string
						$ PopAnimRenderOffset : SexyVector2
						$ Lifetime : float
						$ DamagePerSecond : float
						$ WarmingRadius : ComponentWarmingRadiusProps
						$ ZombieExcludelist : std::vector<std::string>
					GridItemSapProps 0B8
						$ PopAnim : std::string
						$ PopAnimRenderOffset : SexyVector2
						$ Lifetime : float
						$ SapTime : float
						$ ZombieExcludelist : std::vector<std::string>
					GridItemOilProps 0A8
						$ PopAnim : std::string
						$ PopAnimRenderOffset : SexyVector2
						$ OilTime : float
					GridItemButterProps 0D0
						$ PopAnim : std::string
						$ PopAnimRenderOffset : SexyVector2
						$ ZombiesExcludeList : ClassRestrictionSet
						$ ParentPlantType : std::string
						$ ZConditions : std::vector<ZombieConditionEntry>
					GridItemWispProps 0A8
						$ PopAnim : std::string
						$ PopAnimRenderOffset : SexyVector2
						$ Lifetime : float
					GridItemBombegranateSeedsProps 0C0
						$ TriggeringEntityTypes : std::vector<BoardEntityTypeFlag>
						$ TriggerRect : Rect
					PoisonGridItemProps 0A0
						$ PopAnim : std::string
						$ PopAnimRenderOffset : SexyVector2
					GridItemGravestonePropertySheet 0D8
						$ DamageStateCount : int8
						$ BreakEffect : std::string
						$ BreakEffectSound : std::string
						$ ArtCenter : SexyVector2
						$ CanBeEatenByGravebuster : bool
						$ GraveBusterEatTimeOveride : float
						$ GridExtents : Point
						$ IsAnimated : bool
						GridItemGravestoneSunOnDestructionPropertySheet 0E0
							$ AmountToSpawn : int32
						GridItemDestroyableProps 0F0
							$ DamageLayerRoot : std::string
							$ OverrideUndamagedLayer : std::string
						GridItemGravestonePlantOnDestructionPropertySheet 0E8
							$ PlantTypeToSpawn : std::string
						GridItemSurfboardProps 0E0
							$ CanBeEatenByGravebusterAtLevel : int32
						GridItemTentProps 0F8
							$ TimeBetweenSpawns : ValueRange
							$ ZombieTypesToSpawn : std::vector<BasicZombieWeights>
							$ ZombieSpawnPointOffset : int32
							$ CanBeEatenByGravebusterAtLevel : int32
						GridItemBackpackProps 0E0
							$ CanBeEatenByGravebusterAtLevel : int32
						GridItemGravestoneZombieTimeSpawnerPropertySheet 100
							$ MinInitialSpawnWaitSeconds : int32
							$ MaxInitialSpawnWaitSeconds : int32
							$ MinSpawnWaitSeconds : int32
							$ MaxSpawnWaitSeconds : int32
							$ MinSelfDestructWaitSeconds : int32
							$ MaxSelfDestructWaitSeconds : int32
							$ ZombieTypeName : std::string
					GridItemBoostTileProps 0A8
						$ BoostLimit : int32
						$ BoostAnimDurationSeconds : float
					GridItemBreakableTargetProps 110
						$ Regenerates : bool
						$ HealthRegenRate : float
						$ DelayBeforeRegen : float
						$ PopAnimSpawnAnim : std::string
						$ PopAnimIdleAnim : std::string
						$ PopAnimHitAnim : std::string
						$ PopAnimDeathAnim : std::string
						$ BreakEffect : std::string
						$ BreakEffectSound : std::string
						$ DamagePhases : DamageLifetime
						GridItemEightiesArcadeCabinetProps 140
							$ JamStyle : std::string
							$ TimeBetweenSpawns : ValueRange
							$ InitialPause : ValueRange
							$ PauseAfterZombieCreationWhereCabinetDoesNotMove : float
							$ ZombieTypesToSpawn : std::vector<BasicZombieWeights>
							$ ZombieSpawnPointOffset : float
						GridItemEntityTargetingProps 128
							$ Teams : std::vector<TeamFlags>
							$ Actions : std::vector<GridItemAction>
							GridItemHealerStaffProps 140
								$ UnhealableZombies : ZombieRestrictionSet
						GridItemSpeakerProps 118
							$ SonicDamageAmount : int32
							GridItemSpeakerZombossProps 120
								$ ShockWaveSpawnOffset : SexyVector2
						GridItemBoardEntityConditionTargetProps 110
							SaucedPlantConditionTargetProps 118
								$ EvaporateTimeSeconds : float
				GridItemVaseProps 080
					$ PopAnimNormal : std::string
					$ PopAnimPlant : std::string
					$ PopAnimGargantuar : std::string
				GridItemProtectorShieldProps 080
					$ SoundOnActivate : std::string
					$ SoundOnDeactivate : std::string
					$ SoundOnHit : std::string
				GridItemRailcartPropertySheet 070
					$ ImagePrefix : std::string
					$ GlobalProperties : RtWeakPtr<GridItemRailcartGlobalProperties>
			GridItemRailcartGlobalProperties 070
				$ StationaryPlants : PlantRestrictionSet
				$ StationaryPlantfoodedPlants : PlantRestrictionSet
				$ StationaryGridItems : GridItemRestrictionSet
				$ ImmovablePlants : PlantRestrictionSet
			CoreLoopRewardsSlotConfigProps 028
				$ SlotConfigs : std::map<std::string RT_COMMA CoreLoopRewardsSlotsConfig>
				- CoreLoopRewardsSlotsConfig
					$ PinataType : std::string
					$ RewardsTable : std::string
					$ PercentBonusAward : float
					$ BonusTable : std::string
					$ Slots : std::vector<std::string>
			StackImageProps 038
				$ Image : std::vector<std::string>
				$ Threshold : std::vector<int>
			EffectObjectPropertySheet 060
				$ PopAnim : std::string
				$ PopAnimRenderOffset : SexyVector2
				$ SpawnSoundID : std::string
				$ SpawnAnimations : std::vector<std::string>
				$ Centered : bool
				$ CenterInGrid : bool
				$ PopAnimScaleX : float
				$ PopAnimScaleY : float
				$ ShakeBoard : Point
				$ LayerOverride : RenderLayer
				EffectObject_StretchedScrollingImageProps 080
					$ ColorizeColor : Color
					$ DurationInSecondsToScroll : float
					$ DistanceToScroll : float
					$ Scale : float
				EffectObject_DamageOverTimeProps 0C0
					$ RampUpAnimation : std::string
					$ LoopingAnimation : std::string
					$ RampDownAnimation : std::string
					$ RampUpAudioEvent : std::string
					$ RampDownAudioEvent : std::string
					$ DamageArea : Rect
					$ DurationInSeconds : float
					$ DamagePerSecond : float
					$ DamageTypeFlags : std::vector<DamageTypeFlags>
				EffectObjectAnimSequencePropertySheet 088
					$ IntroAnimSequence : std::vector<std::vector<std::string>>
					$ LoopAnim : std::vector<std::string>
					$ OutroAnimSequence : std::vector<std::vector<std::string>>
				EffectObject_StrawburstPlantfoodProps 068
					$ DamageOnHit : float
				EffectObject_BurrowAttackProps 068
					$ AttackSpawnOffset : SexyVector2
			OttoBotData 068
				$ Config : OttoBotConfig
				$ PlantData : std::vector<OttoBotPlantData>
				$ Loadouts : std::vector<OttoBotLoadoutData>
				$ KeywordData : std::vector<OttoBotKeywordData>
				$ ScriptData : std::vector<OttoBotScriptData>
				- OttoBotConfig
					$ NumberValues : std::map<std::string RT_COMMA float>
					$ StringValues : std::map<std::string RT_COMMA std::string>
				- OttoBotPlantData
					$ PlantID : std::string
					$ Keywords : std::vector<OttoBotPlantKeyword>
				- OttoBotLoadoutData
					$ LoadoutID : int32
					$ Plants : std::vector<std::string>
				- OttoBotKeywordData
					$ Keyword : std::string
					$ LaneWeights : std::vector<float>
				- OttoBotScriptData
					$ ActionID : OttoBotScriptActionID
					$ Args : std::vector<std::string>
			GeneratedGradientPropertySheet 028
				$ Gradients : std::vector<GeneratedGradientProps>
				- GeneratedGradientProps
					$ Name : std::string
					$ FirstTimeBase : float
					$ FirstTimeAdd : float
					$ PeakStartBase : float
					$ PeakStartAdd : float
					$ PeakDurationBase : float
					$ PeakDurationAdd : float
					$ TargetRatioBase : float
					$ TargetRatioAdd : float
					$ TargetVarMin : float
					$ TargetVarMax : float
					$ PeakRatioBase : float
					$ PeakRatioAdd : float
					$ PeakRatioVarMin : float
					$ PeakRatioVarMax : float
					$ MinSeed : float
					$ MaxSeed : float
			DangerRoomLevelDesigner 020
				DangerRoomProtectThePlantChallengeDesigner 038
					$ Layouts : std::vector<ProtectThePlantConfig>
					$ CanPlaceOnGridTypes : std::vector<DangerRoomBoardGridType>
					- ProtectThePlantConfig
						$ ValidPlantTypes : std::vector<std::string>
						$ Locations : RtWeakPtr<BoardGridMapProps>
				DangerRoomModernDesigner 0B0
					$ LevelRange : ValueRange
					$ FirstPortalWavesMin : ValueRange
					$ FirstPortalWavesMax : ValueRange
					$ NextPortalWavesMin : ValueRange
					$ NextPortalWavesMax : ValueRange
					$ PortalTypesMin : ValueRange
					$ PortalTypesMax : ValueRange
					$ PortalCountInWaveMin : ValueRange
					$ PortalCountInWaveMax : ValueRange
					$ ColumnToSpawnMin : ValueRange
					$ ColumnToSpawnMax : ValueRange
					$ ZombiesToSpawnMin : ValueRange
					$ ZombiesToSpawnMax : ValueRange
					$ ZombieRandomListStartMin : ValueRange
					$ ZombieRandomListStartMax : ValueRange
					$ ZombieRandomListEndMin : ValueRange
					$ ZombieRandomListEndMax : ValueRange
					$ PortalTypePool : std::vector<StringWeightedOption>
				DangerRoomDinoDesigner 070
					$ LevelRange : ValueRange
					$ DinoTypesMin : ValueRange
					$ DinoTypesMax : ValueRange
					$ FirstDinoWavesMin : ValueRange
					$ FirstDinoWavesMax : ValueRange
					$ NextDinoWavesMin : ValueRange
					$ NextDinoWavesMax : ValueRange
					$ DinoCountInWaveMin : ValueRange
					$ DinoCountInWaveMax : ValueRange
					$ DinoTypePool : std::vector<StringWeightedOption>
				DangerRoomMoldChallengeDesigner 038
					$ Locations : std::vector<RtWeakPtr<BoardGridMapProps>>
					$ CanPlaceOnGridTypes : std::vector<DangerRoomBoardGridType>
				DangerRoomSpiderRainDesigner 038
					$ BaseSpiderRainCount : int32
					$ MaxSpiderRainCount : int32
					$ BaseSpiderRainCountPerLevel : float
					$ BaseSpiderRainZombieCount : int32
					$ MaxSpiderRainZombies : int32
					$ BaseSpiderRainZombiesCountPerLevel : float
					$ BaseSpiderRainStartWave : int32
					DangerRoomParachuteRainDesigner 038
				DangerRoomPowerTileDesigner 040
					$ BaseTileSetCount : int32
					$ BaseTileSetCountPerLevel : float
					$ MaxTileSetCount : int32
					$ ColumnCount : int32
					$ PickByRowColumn : bool
					$ TileSetLayouts : std::vector<std::vector<std::string> >
				DangerRoomBoardGridMapPowerTilePlacer 038
					$ GridMaps : std::vector<RtWeakPtr<BoardGridMapProps>>
					$ CanPlaceOnGridTypes : std::vector<DangerRoomBoardGridType>
				DangerRoomSandstormDesigner 050
					$ BaseSandstormCount : uint8
					$ BaseSandstormCountPerLevel : float
					$ MinSandstormCountPerLevel : float
					$ MaxSandstormsPerFlagWave : float
					$ BaseSandstormZombiesCount : uint8
					$ BaseSandstormZombiesCountPerLevel : float
					$ MinSandstormZombiesCountPerLevel : float
					$ MaxSandstormZombies : uint8
					$ MinStartingSandstormSpawnCol : uint8
					$ MaxStartingSandstormSpawnCol : uint8
					$ MaxStartingSandstormSpawnColOffsetPerLevel : float
					$ MinEndingSandstormSpawnCol : uint8
					$ MaxEndingSandstormSpawnCol : uint8
					$ MaxEndingSandstormSpawnColOffsetPerLevel : float
					$ UseBandedSandstormSpawnColumns : bool
					$ MinSpawnColumnBandCenter : uint8
					$ MaxSpawnColumnBandCenter : uint8
					$ MinSpawnColumnBandWidth : uint8
					$ MaxSpawnColumnBandWidth : uint8
					$ MinSpawnColumn : uint8
					$ MaxSpawnColumn : uint8
				DangerRoomRailcartDesigner 040
					$ BaseRailcartCount : uint8
					$ BaseRailcartCountPerLevel : float
					$ MaxGeneratedRailcarts : uint8
					$ Layouts : std::vector<std::string>
					$ RailcartType : std::string
				DangerRoomBoardGridMapRailCartPlacer 040
					$ RailcartType : std::string
					$ GridMaps : std::vector<RtWeakPtr<BoardGridMapProps>>
					$ CanPlaceOnGridTypes : std::vector<DangerRoomBoardGridType>
				DangerRoomZombieLineChallengeDesigner 028
					$ TargetDistances : std::vector<FloatWeightedOption>
				DangerRoomBeachTideChanger 4D8
					$ StartingTideLevel : BoundedRandomRegion
					$ FinalTideLevel : BoundedRandomRegion
					$ MinimumTideLevel : BoundedRandomRegion
					$ MaximumTideLevel : BoundedRandomRegion
					$ MinimumTideDelta : BoundedRandomRegion
					$ MaximumTideDelta : BoundedRandomRegion
					$ LowTideEventsPerFlagWave : BoundedRandomRegion
					$ LowTideStartLevel : BoundedRandomRegion
					$ LowTideRecedeAmount : BoundedRandomRegion
					$ BasicLowTideZombieType : std::string
					$ BasicLowTideZombiesPerLowTideEvent : BoundedRandomRegion
					$ SpecialLowTideZombieTypes : std::vector<std::string>
					$ SpecialLowTideZombiesPerLowTideEvent : BoundedRandomRegion
				DangerRoomBeachLilypadPlacer 160
					$ NumberOfLilypads : BoundedRandomRegion
					$ MinimumLilypadColumn : BoundedRandomRegion
					$ MaximumLilypadColumn : BoundedRandomRegion
				DangerRoomRaidingPartyDesigner 030
					$ BasePartyCount : uint8
					$ BasePartyCountPerLevel : float
					$ BasePartyZombiesCount : uint8
					$ BasePartyZombiesCountPerLevel : float
					$ MaxPartyZombies : uint8
					$ MaxPartyCount : uint8
					$ BasePartyStartWave : uint8
				DangerRoomPlankDesigner 028
					$ PlankLayouts : std::vector<std::string>
				DangerRoomFreezingWindDesigner 048
					$ LevelRange : ValueRange
					$ LaneCountMin : ValueRange
					$ LaneCountMax : ValueRange
					$ WavePercent : ValueRange
					$ DoubleBlastPercent : ValueRange
				DangerRoomIceBlockDesigner 080
					$ LevelRange : ValueRange
					$ PlantColumnMin : ValueRange
					$ PlantColumnMax : ValueRange
					$ ZombieColumnMin : ValueRange
					$ ZombieColumnMax : ValueRange
					$ BlocksMin : ValueRange
					$ BlocksMax : ValueRange
					$ PctGoodBlocks : ValueRange
					$ PlantTypeNames : std::vector<std::string>
					$ ZombieTypeNames : std::vector<std::string>
				DangerRoomBoardGridMapPlantIceBlockPlacer 038
					$ GridMapsAndPlantTypes : std::vector<DangerRoomBoardGridMapAndPlantTypeList>
					$ CanPlaceOnGridTypes : std::vector<DangerRoomBoardGridType>
					- DangerRoomBoardGridMapAndPlantTypeList
						$ GridMap : RtWeakPtr<BoardGridMapProps>
						$ PlantTypes : std::vector<std::string>
				DangerRoomBoardGridMapZombieIceBlockPlacer 050
					$ GridMaps : std::vector<RtWeakPtr<BoardGridMapProps>>
					$ ZombieTypeExcludeList : std::vector<std::string>
					$ ForceZombieType : std::string
					$ CanPlaceOnGridTypes : std::vector<DangerRoomBoardGridType>
				DangerRoomJamDesigner 070
					$ LevelRange : ValueRange
					$ JamTypesMin : ValueRange
					$ JamTypesMax : ValueRange
					$ FirstJamWavesMin : ValueRange
					$ FirstJamWavesMax : ValueRange
					$ NextJamWavesMin : ValueRange
					$ NextJamWavesMax : ValueRange
					$ ZombieAddLevelRange : ValueRange
					$ JamZombiesToReplaceMin : ValueRange
					$ JamZombiesToReplaceMax : ValueRange
					$ LevelToIntroduceMetalJam : int32
				DangerRoomJitteredWaveGenerator 030
					$ StartingPoints : uint16
					$ BasePointIncrementPerWave : uint16
					$ BasePointIncrementPerLevel : uint16
					$ MaxPoints : uint16
					$ ZombiePool : std::vector<RtWeakPtr<RtObject>>
				DangerRoomGravestoneGenerator 050
					$ MinGravestoneCount : uint8
					$ BaseGravestoneCountPerLevel : float
					$ MaxGeneratedGravestones : uint8
					$ MinStartingGravestoneSpawnCol : uint8
					$ MaxStartingGravestoneSpawnCol : uint8
					$ MaxStartingGravestoneSpawnColOffsetPerLevel : float
					$ MinEndingGravestoneSpawnCol : uint8
					$ MaxEndingGravestoneSpawnCol : uint8
					$ MaxEndingGravestoneSpawnColOffsetPerLevel : float
					$ GravestoneTypeName : std::string
					$ CanPlaceOnGridTypes : std::vector<DangerRoomBoardGridType>
				GridItemPatternPlacer 0A0
					$ NumberOfTiles : BoundedRandomRegion
					$ GridItemSpawnerPatterns : std::vector<RtWeakPtr<LevelModuleProperties> >
				DangerRoomBoardGridMapPlacer 048
					$ GridMaps : std::vector<RtWeakPtr<BoardGridMapProps>>
					$ GridItemTypes : std::vector<std::string>
					$ GridType : DangerRoomBoardGridType
					$ CanPlaceOnGridTypes : std::vector<DangerRoomBoardGridType>
				DangerRoomDarkEventGenerator 2C0
					$ GravestoneSpawnEventsPerFlagWaveMin : BoundedLine
					$ GravestoneSpawnEventsPerFlagWaveMax : BoundedLine
					$ GravestonesPerSpawnEventMin : BoundedLine
					$ GravestonesPerSpawnEventMax : BoundedLine
					$ BeneficialGravestonesPerSpawnEventMin : BoundedLine
					$ BeneficialGravestonesPerSpawnEventMax : BoundedLine
					$ ChanceThatBeneficialGravestoneIsPlantfoodNotSun : float
					$ GravestoneSpawnColumnMin : BoundedLine
					$ GravestoneSpawnColumnMax : BoundedLine
					$ NecromancyEventsPerFlagWaveMin : BoundedLine
					$ NecromancyEventsPerFlagWaveMax : BoundedLine
					$ ZombiesPerNecromancyEventMin : BoundedLine
					$ ZombiesPerNecromancyEventMax : BoundedLine
					$ SpawnZombieType : std::string
					$ GravestoneType : std::string
					$ SunGravestoneType : std::string
					$ PlantfoodGravestoneType : std::string
			ZenGardenBeePropertySheet 070
				$ PopAnim : std::string
				$ AnimRigClass : std::string
				$ BeeEffects : std::vector<ZenGardenBeeEffect>
				$ NextBeeTimeMinSeconds : int32
				$ NextBeeTimeMaxSeconds : int32
				$ BeeReadyTimeoutSeconds : float
				$ BeeWanderRange : FRect
				$ BeeRestSpot : SexyVector2
				$ BeeVelocity : int32
				$ BeeMovingToPlantVelocity : int32
				- ZenGardenBeeEffect
					$ Weight : int32
					$ PercentBonus : float
					$ SecondsBonus : float
					$ IsCriticalHit : bool
			PennyPerkProperties 068
				$ TypeName : std::string
				$ ClassName : std::string
				$ Description : std::string
				$ IconName : std::string
				$ LevelTypesWhereEnabled : std::vector<MapEventSubType>
				$ LevelTypesWhereDisabled : std::vector<MapEventSubType>
				PennyPerkGridIsYoursProperties 0D8
					$ SpawnCount : std::vector<int>
					$ TimesBetweenApplications : std::vector<int>
					$ MinColumnToTarget : int32
					$ MaxColumnToTarget : int32
					$ GridTypeToSpawn : std::string
					$ SortingMethod : BoardLocationSortingMethod
					$ PerkWarning : std::string
					$ SpawnEffectAnimID : std::string
					$ SpawnEffectAnimToPlay : std::string
					$ SpawnEffectResourceGroup : std::string
					$ GridBlockingTypes : std::vector<BoardEntityTypeFlag>
					$ AllowBlockingTypesAsFallbackLocations : bool
				PennyPerkShockwaveProperties 080
					$ TimesBetweenApplications : std::vector<float>
					$ PushBackDistance : std::vector<float>
				PennyPerkPlantHealingProperties 0A0
					$ TimesBetweenApplications : std::vector<float>
					$ PercentHealed : std::vector<float>
					$ MaxPercentHealth : std::vector<float>
					$ UnhealablePlants : PlantRestrictionSet
				PennyPerkBossBusterCannonProperties 0A0
					$ TimesBetweenStrikes : std::vector<float>
					$ NumberOfHitsPerStrike : std::vector<int>
					$ DamagePerHit : std::vector<int>
					$ Projectile : RtWeakPtr<ProjectilePropertySheet>
					$ Resources : std::vector<std::string>
				PennyPerkPennyShieldProperties 098
					$ TimesBetweenApplications : std::vector<float>
					$ ShieldHealth : std::vector<int>
					$ ShieldColumns : std::vector<std::vector<int>>
					$ NumberOfShields : std::vector<int>
				PennyPerkRandomFlickProperties 098
					$ TimesBetweenApplications : std::vector<float>
					$ NumberOfZombiesFlicked : std::vector<int>
					$ TargetPriority : ClassBucketFilter
					$ FlickVelocity : float
					$ FlingHeight : float
					$ RotationVelocity : float
				PennyPerkHeavyWateringProperties 080
					$ PercentCooldownReductions : std::vector<float>
					$ AffectedPlantFamilies : std::vector<std::string>
				PennyPerkTrafficJamProperties 070
					$ ZombieDelayLevels : std::vector<float>
				PennyPerkMoreScoreProperties 070
					$ ScoreBonusPercentage : std::vector<float>
				PennyPerkSunBreakProperties 080
					$ NumberOfBursts : std::vector<int>
					$ SunPerBurst : std::vector<int>
				PennyPerkZombieInhibitorProperties 098
					$ ZombiesToRemove : std::vector<ClassRestrictionSet>
					$ ZombieTypeToSwapIn : std::string
					$ DisplayName : std::string
					$ LevelDescriptions : std::vector<std::string>
				PennyPerkApplyConditionProperties 0B0
					$ TimesBetweenApplications : std::vector<float>
					$ ConditionDamageValues : std::vector<int>
					$ ConditionDurations : std::vector<float>
					$ ConditionsToApply : std::vector<ZombieConditions>
					$ MinZombiesToAffect : std::vector<int>
					$ MaxZombiesToAffect : std::vector<int>
				PennyPerkSunBankProperties 070
					$ AdditionalStartingSun : std::vector<int>
				PennyPerkQuickDeliveryProperties 070
					$ TimeReductionPercentage : std::vector<float>
				PennyPerkUtilityBeltProperties 098
					$ TimesBetweenApplications : std::vector<float>
					$ AdditionalPlantType : std::string
					$ PlantLevels : std::vector<int>
					$ IsBoosted : std::vector<std::string>
				PennyPerkMineIsYoursProperties 0A0
					$ SpawnCount : std::vector<int>
					$ TimesBetweenApplications : std::vector<int>
					$ MinColumnToTarget : int32
					$ MaxColumnToTarget : int32
					$ PlantTypeToSpawn : std::string
					$ SortingMethod : BoardLocationSortingMethod
					$ PerkWarning : std::string
			RiftPropertySheet 060
				$ HowToPlayData : HowToPlayScreenData
				$ PlantsRequiredToUnlock : int32
				$ EventEndNoteConfig : RiftLocalNoteConfig
				$ ZombossEndNoteConfig : RiftLocalNoteConfig
				$ ZombossPointOfLossGemCost : int32
				$ ZombossPointOfLossNumAvailable : int32
				$ ZombossPointOfLossTimeGained : int32
				- RiftLocalNoteConfig
					$ LocalNoteMinDelayTime : int32
					$ LocalNoteMaxDelayTime : int32
			ArcadePropertySheet 038
				$ ArcadeModes : std::vector<ArcadeMode>
				$ PowerUpCollections : std::vector<PowerUpCollection>
				- ArcadeReward
					$ Type : ArcadeRewardType
					$ ID : std::string
				- ArcadeLevel
					$ ID : std::string
				- ArcadeEndlessLevel
					$ Level : ArcadeLevel
					$ RewardPowerUp : std::string
					$ RewardPowerUpAfterWave : int32
				- ArcadeLevelPack
					$ ID : std::string
					$ Toggles : std::vector<std::string>
					$ PackNameLocalizationKey : std::string
					$ LayoutFile : std::string
					$ BackdropImage : std::string
					$ UnlockAfter : std::string
					$ Levels : std::vector<ArcadeLevel>
					$ Reward : ArcadeReward
				- ArcadeMode
					$ ID : std::string
					$ ModeNameLocalizationKey : std::string
					$ PowerUpCollectionID : std::string
					$ ArcadeMenuImage : std::string
					$ DisplayInArcadeMenu : bool
					$ EndlessLevel : ArcadeEndlessLevel
					$ UnlockEndlessAfter : std::string
					$ LevelPacks : std::vector<ArcadeLevelPack>
				- PowerUpMetaData
					$ ID : std::string
					$ UpImage : std::string
					$ DownImage : std::string
					$ GameFeature : std::string
					$ NameLocalizationKey : std::string
					$ DescriptionLocalizationKey : std::string
					$ UnlockHintLocalizationKey : std::string
				- PowerUpCollection
					$ ID : std::string
					$ PowerUps : std::vector<PowerUpMetaData>
			PerkProgressionProperties 028
				$ PerkProgressionRewards : std::vector<PerkProgressionReward>
				- PerkProgressionReward
					$ Perk : std::string
					$ Level : int32
					$ Threshold : int32
			RiftSubEventProperties 048
				$ Description : std::string
				$ FeaturedPlant : std::string
				$ PennyTechPerBonusObjective : int32
				$ AddedLevelModules : std::vector<RtId>
				- RiftLevelDefinition
					$ UnlockDaysFromStart : int16
					$ LockDaysFromStart : int16
			RiftLevelUnlocksProperties 038
				$ LevelUnlockSequence : std::vector<RiftLevelDefinition>
			RiftSchedule 028
				$ Events : std::vector<RiftEventDefinition>
				- RiftSubEventDefinition
					$ StartDeltaDays : uint64
					$ EndDeltaDays : uint64
					$ SubEventPropertyKey : std::string
				- RiftEventDefinition
					$ StartDate : uint64
					$ EndDate : uint64
					$ PerkProgressionKey : std::string
					$ RiftZombieSwapPropsKey : std::string
					$ SubEvents : std::vector<RiftSubEventDefinition>
					$ RiftConfigKey : std::string
					$ RiftWorld : std::string
					$ RiftLevelUnlocksKey : std::string
					$ RiftLevelFirstClearRewardsKey : std::string
					$ ZombossLevel : std::string
					$ ZombossRewards : std::string
					$ TitleText : std::string
			PowerPropertySheet 028
				$ TypeName : std::string
				PowerPropsSunProducer 030
					$ Amount : int32
					$ MinSpread : float
				PowerPropsShield 030
					$ Health : int32
				PowerPropsWarmingRadius 128
					$ WarmingRadius : ComponentWarmingRadiusProps
				PowerPropsDamageRadius 108
					$ DamageRadius : ComponentDamageRadiusProps
				PowerPropsLinearBurst 0E0
					$ LinearBurst : ComponentLinearBurstProps
				PowerPropsDuplicator 038
					$ DuplicationProps : DuplicatableProps
				PowerPropsSunshroomGrowth 038
					$ GrowthStages : std::vector<SunshroomGrowthStates>
				PowerPropsRedStingerLocationData 038
					$ LocationData : std::vector<StingerLocationStateData>
				PowerPropsStrawburstGrowth 038
					$ GrowthTimes : std::vector<pvztime_t>
				- DuplicatableProps
					$ NumberOfDuplicates : int32
					$ PlantingRanges : std::vector<std::map<std::string RT_COMMA int>>
			AutocadoList 048
				$ Name : std::string
				$ UniqueIDs : std::vector<std::string>
			MusicalJamProperties 040
				$ JamsToMusicSwitches : std::map<std::string RT_COMMA std::string>
				$ JamsToMusicEnterEvents : std::map<std::string RT_COMMA std::string>
				$ JamsToZombieConditionApplied : std::map<std::string RT_COMMA ZombieConditions>
			StoreTryPreviewPropertySheet 028
				$ PreviewList : std::vector<StoreTryPreviewItem>
			DangerRoomPropertySheet 068
				$ FlagWaveSetupList : std::vector<FlagWaveSetupData>
				$ PlantfoodSetupList : std::vector<PlantFoodSetupData>
				$ AssignMinPlantfoodPerFlagWave : uint8
				$ LevelsPerCheckpoint : uint8
				$ StartingLives : uint16
				$ MaxPlantfoodPurchases : int8
				$ MaxPowerupPurchases : int8
				$ RewardSmallMowerWeight : int32
				$ RewardSmallSunWeight : int32
				$ RewardSmallPlantfoodWeight : int32
				$ RewardPowerupWizardFingerWeight : int32
				$ RewardPowerupFlickWeight : int32
				$ RewardPowerupSnowballWeight : int32
				$ RewardPowerupFlamethrowerWeight : int32
				$ CashOutRanks : std::vector<uint16>
				$ CashOutPerLevelAfterMax : uint16
				$ ExtraCardCost : uint16
				- PlantFoodSetupData
					$ MinLevel : uint8
					$ MinPlantfoodPerFlagWave : uint8
					$ MaxPlantfoodPerFlagWave : uint8
				- FlagWaveSetupData
					$ MinLevel : uint8
					$ FlagCount : uint8
					$ MinWavesPerFlag : float
					$ MaxWavesPerFlag : float
			WorldSpecificDangerRoomProperties 038
				$ StartingPlants : std::vector<std::string>
				$ ExcludeList : std::vector<std::string>
			ThymedEventTrackDefinition 058
				$ Track : ThymedEventTrack
				$ ActiveTab : std::string
				$ DownTab : std::string
				$ EnergyCap : int32
				$ EnergyCostPerNode : std::vector<int>
				$ EnergyRefillPeriodSeconds : int32
				$ HintTexts : std::vector<std::string>
			ThymedEventSchedule 028
				$ Events : std::vector<ThymedEventDefinition>
				- ThymedEventDefinition
					$ EventName : std::string
					$ Track : ThymedEventTrack
					$ StartDate : uint64
					$ EndDate : uint64
					$ EventBackground : std::string
					$ CurrencyImage : std::string
					$ EnergyStackImage : std::string
					$ DashboardIconImage : std::string
					$ DashboardIconImageDown : std::string
					$ SpecialLevelIntroDescs : std::vector<std::string>
					$ ComingSoonEnableTime : uint64
					$ Disabled : bool
					$ Description : std::string
					$ InfoText : std::string
					$ ComingSoonTagline : std::string
					$ ComingSoonDescription : std::string
					$ Action : RtEmbeddedPtr<ThymedEventActionData RT_COMMA PVZDB::TABLE_THYMED_EVENT_SCHEDULE>
			PersonalConfig 038
				$ StartingConfig : RtWeakPtr<RtObject>
				$ SpringBeanURL : std::string
			PlantAnimRigPropertySheet 028
				$ AttackAnimations : std::vector<std::string>
			ZombieActionDefinition 040
				$ Weight : int32
				$ RepeatMin : int32
				$ RepeatMax : int32
				$ CanPickAgain : bool
				$ Invulnerable : bool
				$ SoundOnStart : std::string
				$ Phase : ZombieActionPhase
				$ PhaseAfter : ZombieActionPhase
				ZombossWalkActionDefinition 048
					$ WalkVerticalChance : float
					$ WalkPreferSquashChance : float
					ZombossDarkWalkActionDefinition 048
					ZombossDinoWalkActionDefinition 048
				ZombossJumpActionDefinition 050
					$ JumpHeight : float
					$ JumpHangTime : float
					$ JumpAnimRateModifier : float
				ZombossSpawnActionDefinition 070
					$ SpawnJumpAction : RtWeakPtr<RtObject>
					$ SpawnZombieTypes : std::vector<std::string>
					$ SpawnChargeTime : float
					$ SpawnCooldownTime : float
					$ SpawnWavesBetweenPlantFood : ValueRange
					$ SpawnZombieWavePointRange : ValueRange
				ZombossSummonActionDefinition 070
					$ SpawnDistanceVariance : int32
					$ SpawnColumnOffset : int32
					$ SpawnZombieTypes : std::vector<std::string>
					$ SpawnStartTime : float
					$ SpawnEndTime : float
					$ SpawnWavesBetweenPlantFood : ValueRange
					$ SpawnZombieWavePointRange : ValueRange
					ZombossSpawnDinoActionDefinition 078
						$ SpawnDinoType : std::string
				ZombossRushActionDefinition 070
					$ RushDamageToInterrupt : float
					$ RushTime : float
					$ RushLeadupTime : float
					$ RushLeadupStartRate : float
					$ RushLeadupEndRate : float
					$ RushLeadupBackup : float
					$ RushStartRate : float
					$ RushEndRate : float
					$ RushOvershoot : float
					$ RushSound : std::string
				ZombossFireActionDefinition 078
					$ FireMinColumn : int32
					$ FireMaxColumn : int32
					$ FireRowRange : int32
					$ FireTargetPlantWeight : int32
					$ FireTargetEmptyWeight : int32
					$ FireTargetRailsWeight : int32
					$ FireTargetTilesWeight : int32
					$ FireRocketHitTime : float
					$ FireRocketSpeed : float
					$ FireRocketDropSound : std::string
					$ FireRocketCount : ValueRange
					ZombieOrbitalStrikeActionDefinition 080
						$ NoRepeatTargets : bool
				ZombieDropActionDefinition 078
					$ Animation : std::string
					$ AwardDrop : RtWeakPtr<RtObject>
					$ EffectPam : std::string
					$ EffectAnim : std::string
					$ EffectOffsetX : float
					$ EffectOffsetY : float
				ZombossBeachDiveActionDefinition 048
					$ SubmergedDuration : float
					$ PreferSquashChance : float
				ZombossFanPullActionDefinition 058
					$ FanDuration : float
					$ PlantfoodDamageToInterrupt : float
					$ BasePullTimePerGridSquare : float
					$ AdditionalPullTimePerLinearDistanceFromFan : float
					$ AdditionalPullTimePerSquaredDistanceFromFan : float
				ZombossSharkMinionAttackActionDefinition 048
					$ SharksToLaunch : int32
				ZombieDarkWizardZapActionDefinition 080
					$ SoundOnActivate : std::string
					$ TimeBeforeFirst : ValueRange
					$ TimeBetween : ValueRange
					$ ProjectilePopAnim : std::string
					$ SheepPopAnim : std::string
					$ SheepOffset : Point
				ZombossDarkFireBreathActionDefinition 050
					$ FlameDuration : float
					$ FlameFillRowTime : float
					$ PlantfoodDamageToInterrupt : float
				ZombossDarkLobFireballsActionDefinition 068
					$ LobbedFlameCount : ValueRange
					$ DragonImpCount : ValueRange
					$ LobbedFlameDelay : float
					$ LobbedFlameDuration : float
					$ PlantfoodDamageToInterrupt : float
					$ MinColumn : int32
					$ TargetMagnetshroomChance : float
				ZombossDinoLaserActionDefinition 050
					$ FlameDuration : float
					$ FlameFillRowTime : float
					$ PlantfoodDamageToInterrupt : float
				ZombossEightiesDropSpeakerActionDefinition 058
					$ FireMinColumn : int32
					$ FireMaxColumn : int32
					$ FireTargetEmptyWithNoDmgWeight : int32
					$ FireTargetEmptyWithDmgWeight : int32
					$ FireTargetPlantWeight : int32
					$ DropDelay : float
				ZombossEightiesFireSpeakerRayActionDefinition 048
					$ ClearDelay : float
				ZombossEightiesSwapJamActionDefinition 040
				ZombossSpawnGlacierColumnActionDefinition 040
				ZombossCoverUpActionDefinition 040
				ZombossHelmLostActionDefinition 048
					$ IceCrustRevealMinTime : float
				ZombossFreezingWindRowActionDefinition 040
				ZombossDropZombieActionDefinition 088
					$ SpawnJumpAction : RtWeakPtr<RtObject>
					$ SpawnZombieTypes : std::vector<std::string>
					$ SpawnWavesBetweenPlantFood : ValueRange
					$ SpawnZombieWavePointRange : ValueRange
					$ ValidSpawningRegion : Rect
					$ NumberOfRowsToSpawnDown : int32
					$ ZombieDropSpeed : float
					$ SpawnCooldownTime : float
					$ MovementCurveType : CurveType
					$ MovementSpeed : float
				ZombossDropSandbagActionDefinition 078
					$ ProjectileTypeToSpawn : RtWeakPtr<ProjectilePropertySheet>
					$ ProjectileOffset : SexyVector3
					$ ValidDroppingRegion : Rect
					$ DroppingOffset : SexyVector3
					$ MovementCurveType : CurveType
					$ MovementSpeed : float
				ZombossImpCannonActionDefinition 070
					$ ImpType : std::string
					$ ImpLaunchDelay : float
					$ ImpLaunchInterruptDamageAmount : float
					$ ImpLaunchCount : int32
					$ ImpLaunchTime : float
					$ ImpLaunchTimeVariance : float
					$ ImpLaunchHeight : float
					$ ImpLaunchMinColumn : int32
					$ ImpLaunchMaxColumn : int32
				ZombieRomanHealerHealActionDefinition 0D0
					$ SoundOnActivate : std::string
					$ HealingAuraPopAnim : std::string
					$ AuraOffset : Point
					$ TimeBeforeFirstHeal : ValueRange
					$ TimeBetweenHeal : ValueRange
					$ TimeBeforeHealRecheck : ValueRange
					$ TimeBeforeFirstHypnoHeal : ValueRange
					$ TimeBetweenHypnoHeal : ValueRange
					$ TimeBeforeHypnoHealRecheck : ValueRange
					$ TimeBeforeFirstPoisonHeal : ValueRange
					$ TimeBetweenPoisonHeal : ValueRange
					$ TimeBeforePoisonHealRecheck : ValueRange
					$ ProjectilePopAnim : std::string
					$ UnhealableZombies : ZombieRestrictionSet
					$ HealPercent : float
				ZombieRomanMedusaPetrifyActionDefinition 078
					$ TimeBeforeFirst : ValueRange
					$ TimeBetweenActions : ValueRange
					$ CannotBePetrified : ClassRestrictionSet
					$ PetrifyRectangle : Rect
				ZombiePushGridItemActionDefinition 090
					$ PushableGridItems : GridItemRestrictionSet
					$ PushBlockingGridItems : GridItemRestrictionSet
					$ NotSquashedPlants : PlantRestrictionSet
					$ RelocationDuration : float
					$ PushRectangle : Rect
				ZombieWalkActionDefinition 058
					$ StopAtColumn : float
					$ WalkBackwards : bool
					$ TransitionAtStart : bool
					$ TransitionAnimation : std::string
					$ HasTransition : bool
				ZombieTimedActionDefinition 048
					$ MinDuration : float
					$ MaxDuration : float
					ZombieIdleActionDefinition 048
				ZombiePlayAnimationActionDefinition 050
					$ AnimationToPlay : std::string
					$ AnimationLoops : int32
				ZombieStunActionDefinition 068
					$ StartingAnimation : std::string
					$ LoopingAnimation : std::string
					$ EndingAnimation : std::string
				ZombieProjectileActionDefinition 088
					$ TimeBeforeFirst : ValueRange
					$ TimeBetween : ValueRange
					$ TimeBetweenBarrages : ValueRange
					$ Projectile : RtWeakPtr<RtObject>
					$ ProjectileSound : std::string
					$ SpawnOffset : SexyVector3
					$ OverrideProjectileAnimation : std::string
					ZombieProjectileLaunchActionDefinition 098
						$ ApexHeight : float
						$ TimeUntilHit : float
						$ TargetType : ZombieProjectileActionTarget
						$ OnlyHitTarget : bool
						$ NoRepeatTargets : bool
						ZombieInstantTargetAttackActionDefinition 098
							$ InstantAttack : InstantTargetAttackAction
				ZombieDropZombiesOnBoardActionDefinition 0B0
					$ ColumnEnd : int32
					$ ColumnStart : int32
					$ MinSpawn : int32
					$ MaxSpawn : int32
					$ CenterOnInstigator : bool
					$ RiseFromGround : bool
					$ ZombieNames : std::vector<std::string>
					$ ZombieWeights : std::vector<int>
					$ TimeBeforeSpawn : float
					$ ZombieFallTime : float
					$ RampUpAnimation : std::string
					$ LoopingAnimation : std::string
					$ RampDownAnimation : std::string
					$ EffectTypeToShow : std::string
					$ DropAudioEvent : std::string
				ZombieTeleportActionDefinition 0D0
					$ NumZombies : int32
					$ TilesToAdvance : int32
					$ ColumnMin : int32
					$ WeightLeftmost : int32
					$ WeightRightmost : int32
					$ WeightRandom : int32
					$ TimeBeforeWarpStart : float
					$ TimeOfWarpOut : float
					$ TimeZombieIsGone : float
					$ TimeOfWarpIn : float
					$ NoRepeatTargets : bool
					$ DelayWarpIn : bool
					$ RampUpAnimation : std::string
					$ LoopingAnimation : std::string
					$ RampDownAnimation : std::string
					$ AnimationSoundFX : std::string
					$ ConditionsRemovedByWarping : std::vector<ZombieConditions>
					$ ZombieTargetExcludeList : ClassRestrictionSet
					$ DoOnlySelfTeleport : bool
					$ IgnoreSelfWhileTeleportingOther : bool
					$ CanShiftLane : bool
					$ TeleportFailureChance : float
					$ MaxRowShift : int32
					$ ShouldAshOnTeleportError : bool
				ZombieSpawnActionDefinition 088
					$ SpawnZombieType : std::string
					$ ZombieSpawnWeights : std::vector<WeightsInt>
					$ PlantTargetExcludeList : std::vector<std::string>
					$ SpawnStartAnimation : std::string
					$ SpawnDoneAnimation : std::string
					$ SpawnOffset : SexyVector2
					$ IsADove : bool
					- WeightsInt
						$ Count : int32
						$ Weight : int32
			CostumePropertySheet 028
				$ CostumeList : std::vector<CostumeItemType>
		VaseBreakerFlowAction 028
			$ m_flow : RtWeakPtr<RtObject>
			$ m_vb : RtWeakPtr<RtObject>
			$ m_runnableActionState : int32
			VaseBreakerFlowActionTutorialBase 038
				$ m_currentState_VaseBreakerTutorialState : int32
				$ m_stateTimer : float
				$ m_bouncingArrow : RtWeakPtr<RtObject>
				VaseBreakerFlowActionRevealTutorial 048
					$ m_spawnedVases : std::vector<RtWeakPtr<RtObject>>
				VaseBreakerFlowActionMoveTutorial 050
					$ m_forceLoadedResourceGroups : std::vector<std::string>
					$ m_movableVase : RtWeakPtr<RtObject>
				VaseBreakerFlowActionButterTutorial 050
					$ m_forceLoadedResourceGroups : std::vector<std::string>
					$ m_spawnedZombie : RtWeakPtr<RtObject>
			VaseBreakerFlowActionWait 030
				$ m_startingTime : float
				$ m_waitTime : float
			VaseBreakerFlowActionDropPowerUpReward 040
				$ m_powerupTypeName : std::string
				$ m_droppedCollectable : RtWeakPtr<RtObject>
				$ m_showDialogTime : float
			VaseBreakerFlowActionStartGame ?
				<NONE>
			VaseBreakerFlowActionFirstTimeAdvice 030
				$ m_hasBrokenAVase : bool
			VaseBreakerFlowActionReadySetBreak 028
				% onShowReady : *
				% onShowSet : *
				% onShowBreak : *
				% onFinishReadySetBreak : *
			VaseBreakerFlowActionPlaceholderMessage 038
				$ m_message : std::string
				$ m_endTime : float
			VaseBreakerFlowActionCreateAndShowVases ?
				<NONE>
			VaseBreakerFlowActionShowNarrative 038
				$ m_narrativeID : std::string
			VaseBreakerFlowActionShowEndlessFanfare 040
				$ m_completedWave : int32
				$ m_newRecord : bool
				$ m_sequences : std::vector<VaseBreakerFanfareSequence>
				- VaseBreakerFanfareSequence
					$ Type : int32
					$ StartTime : float
					$ EndTime : float
					$ YOffset : int32
					$ YMotionOffset : int32
			VaseBreakerFlowActionClearBoard ?
				<NONE>
			VaseBreakerFlowActionSetUIVisibility 030
				$ m_desiredVisibility : bool
			VaseBreakerFlowActionRiftIntro 028
			VaseBreakerFlowActionRiftAddPowerups 028
		GameSubSystem 010
			ZombieSurrenderSubsystem 010
			ZombieChickenSubsystem 020
				$ m_chickenings : std::vector<Chickening>
				- Chickening
					$ Row : int32
					$ X : int32
					$ NextChickenTime : float
					$ EndTime : float
					$ Team : int32
					$ ChickenTypeName : std::string
					$ Condition : ZombieConditions
					$ Duration : float
					$ DurationVariance : float
					$ Interval : float
					$ IntervalVariance : float
			ZombieTosserSubSystem 038
				$ m_tossedZombies : std::vector<TossedZombie>
				$ m_newTossedZombies : std::vector<TossedZombie>
				$ m_deadZombies : std::vector<RtWeakPtr<RtObject> >
				- TossedZombie
					$ m_originalPos : SexyVector3
					$ m_targetPos : SexyVector3
					$ m_position : SexyVector3
					$ m_velocity : SexyVector3
					$ m_acceleration : SexyVector3
					$ m_zombie : RtWeakPtr<RtObject>
					$ m_onLandedCallback : RtReflectionDelegateBase
					$ m_changesRows : bool
					$ m_wasFlying : bool
			LevelScoringSubsystem 048
				$ m_nextMultiplierDecrease : float
				$ m_currentScore : uint64
				$ m_currentMultiplier : int32
				$ m_levelBonusMultiplier : float
				$ m_levelEnded : bool
				$ m_waitingForLastStand : bool
				$ m_stateStartTime : float
				$ m_state : ScoringState
				$ m_progressToNextMultiplier : float
				$ m_comboMeter : RtWeakPtr<ChallengeScoringUI>
				$ m_rules : RtWeakPtr<LevelScoringRules>
			GravestoneSubSystem 020
				$ m_gravestonesForWinCon : std::vector<RtWeakPtr<GridItemGravestone>>
				$ m_hasRegisteredWinConGravestone : bool
			PlantLauncherSubSystem 020
				$ m_shots : std::vector<PlantLauncherEntry>
				- PlantLauncherEntry
					$ Owner : RtWeakPtr<RtObject>
					$ Plant : RtWeakPtr<RtObject>
					$ PlantLauncherPropertySheet : RtWeakPtr<RtObject>
					$ LaunchTime : float
					$ Target : Point
					$ Weapon : int32
			PowerupManager 038
				$ m_powerups : std::vector<RtWeakPtr<RtObject> >
				$ m_selectedPowerup : RtWeakPtr<RtObject>
				$ m_activePowerup : RtWeakPtr<RtObject>
				$ m_ignoreCost : bool
			DynamicTutorialBase 018
				$ m_bouncingArrow : RtWeakPtr<RtObject>
				SproutTutorial 028
					$ m_collectable : RtWeakPtr<RtObject>
					$ m_state : int32
			PlantChilibeanSubSystem 020
				$ m_zombieStates : std::vector<ZombieFlatulence>
				PlantStunionSubSystem 020
				- ZombieFlatulence
					$ Plant : RtWeakPtr<RtObject>
					$ Zombie : RtWeakPtr<RtObject>
					$ StartTime : float
					$ StunDuration : float
					$ State : int32
					$ ResistancePiercing : float
			StormTrackerSubsystem 020
				$ m_stormEntities : std::vector<StormEntity>
				- StormEntity
					$ Entity : RtWeakPtr<BoardEntity>
					$ Type : StormType
					$ PlayedAudioStartEvent : bool
			FamilyResistanceSubSystem 020
				$ m_plantFamilyResistances : std::map<std::string RT_COMMA std::vector<PlantFamilyResistance> >
				- PlantFamilyResistance
					$ FamilyType : std::string
					$ DamageResistance : float
					$ ConditionResistance : float
			ZombieMechDiscoSubsystem 020
				$ m_discoMechZombies : std::vector<RtWeakPtr<RtObject> >
				$ m_firstMechEntered : bool
			ZombiePianoSubsystem 030
				$ m_pianoZombies : std::vector<RtWeakPtr<RtObject> >
				$ m_nextDanceTime : float
				$ m_dancingZombies : std::vector<ZombieDance>
				$ m_active : bool
				$ m_playingPiano : bool
				- ZombieDance
					$ EndY : float
					$ Speed : float
					$ Zombie : RtWeakPtr<RtObject>
			PlantElectriciteaSubSystem 028
				$ m_sparkingZombies : std::vector<SparkingZombieTracker>
				- SparkingZombieTracker
					$ Zombie : RtWeakPtr<Zombie>
					$ RootPosition : SexyVector3
					$ BurstTime : float
					$ ResistancePiercing : float
					$ Props : ElectriciteaBurstProperties
			ZombieLaneChangingSubsystem 020
				$ m_laneChangers : std::vector<ZombieLaneChangingRecord>
				- ZombieLaneChangingRecord
					$ Zombie : RtWeakPtr<RtObject>
					$ StartingRow : int32
					$ TargetRow : int32
					$ ElapsedTime : float
					$ Duration : float
					$ Curve : CurveType
					$ LaneChangeTime : float
					$ CooldownAfterTime : float
					$ State : int32
			ZombieThreatAlertSubSystem 020
				$ m_currentThreatLevel : ZombieThreatLevel
				$ m_lowThreatOffsetX : float
				$ m_highThreatOffsetX : float
				$ m_enabled : bool
			BananaLauncherSubSystem 020
				$ m_shots : std::vector<BananaLauncherEntry>
				- BananaLauncherEntry
					$ Owner : RtWeakPtr<RtObject>
					$ BananaPropertySheet : RtWeakPtr<RtObject>
					$ LaunchTime : float
					$ Target : Point
			PlantSunBeanSubSystem 038
				$ m_zombieSupernovae : std::vector<ZombieSupernova>
				$ m_spewingZombies : std::vector<SpewingZombieTracker>
				$ m_props : RtWeakPtr<RtObject>
				- SpewingZombieTracker
					$ Zombie : RtWeakPtr<RtObject>
					$ LastKnownHealth : float
					$ LastKnownPosition : SexyVector3
					$ SunMaxRemaining : float
				- ZombieSupernova
					$ ZombieToExplode : RtWeakPtr<RtObject>
					$ StartTime : float
					$ StateDuration : float
					$ State : int32
					$ SunMultiplierOnBurst : float
					$ MaxSunToSpawn : float
			MagnetShroomSubSystem 020
				$ m_ownershipList : std::vector<MagnetShroomSubSystemOwnershipRecord>
				- MagnetShroomSubSystemOwnershipRecord
					$ OwningPlant : RtWeakPtr<RtObject>
					$ OwnedEntities : std::vector<RtWeakPtr<RtObject>>
			GarlicSubsystem 030
				$ m_garlicAffectedZombies : std::vector<GarlicAffectedZombieRecord>
				KnockbackSubsystem 038
					$ KnockbackDetails : KnockbackInfo
				- GarlicAffectedZombieRecord
					$ Zombie : RtWeakPtr<RtObject>
					$ StartingRow : int32
					$ TimeInCurrentState : float
					$ StateInfo : GarlicStateInfo
			SporeshroomSubsystem 028
				$ m_zombiesToSpoorshroom : std::set<RtWeakPtr<Zombie>>
			IntensiveCarrotRevivalSubsystem 040
				$ m_lastPlantedPlantTypes : std::vector<std::vector<RtWeakPtr<PlantType> > >
			ElectricCurrantFenceSystem 020
				$ m_fences : std::vector<RtWeakPtr<ElectricCurrantFence>>
				- ElectricCurrantLocation
					$ m_start : Point
					$ m_end : Point
			MarigoldGameSystem 018
				$ m_coinCount : int32
				$ m_maxCoins : int32
			MoonFlowerPoweredTilesSubsystem 010
			SweetPotatoSubsystem 038
				$ m_sweetPotatoes : std::vector<RtWeakPtr<RtObject>>
				$ m_plantfoodAffectedZombies : std::vector<RtWeakPtr<RtObject>>
			MissileToeLauncherSubSystem 020
				$ m_shots : std::vector<MissileToeLauncherEntry>
				- MissileToeLauncherEntry
					$ Owner : RtWeakPtr<RtObject>
					$ MissileToePropertySheet : RtWeakPtr<RtObject>
					$ LaunchTime : float
					$ Target : Point
			ArmamintLauncherSubSystem 020
				$ m_shots : std::vector<ArmamintLauncherEntry>
				- ArmamintLauncherEntry
					$ Owner : RtWeakPtr<RtObject>
					$ LaunchTime : float
					$ Target : Point
			PlantHocusCrocusSubSystem 020
				$ m_zombieRecords : std::vector<ZombieWarpRecord>
				- ZombieWarpRecord
					$ Plant : RtWeakPtr<Plant>
					$ Zombie : RtWeakPtr<Zombie>
					$ StartTime : float
					$ TeleportDuration : float
					$ State : ZombieWarpState
			InfernoSubsystem 028
				$ m_cyclones : std::vector<RtWeakPtr<InfernoPFProjectile>>
			RailcartSubSystem 040
				$ m_railcartType : RtWeakPtr<const GridItemType>
			ZombieRaSubSystem 028
				$ m_Owners : std::vector<RtWeakPtr<BoardEntity>>
				$ m_sunLinks : std::vector<SunOwnerLink>
				- SunOwnerLink
					$ Owner : RtWeakPtr<BoardEntity>
					$ Sun : RtWeakPtr<CollectableSun>
					$ SunValue : int32
					$ TimeGrabbed : float
			ZombieAmbientAudioSubsystem 020
			ZombieCamelSubSystem 020
				$ m_camels : std::vector<ZombieCamelCollection>
				- ZombieCamelCollection
					$ m_segments : std::vector<RtWeakPtr<RtObject> >
					$ m_newSegmentSignHealth : int32
					$ m_spawnNewHumps : bool
					$ m_camelType : RtWeakPtr<RtObject>
			PowerTileSubsystem 030
				$ m_linkedTilePropagations : std::vector<PowerTilePropagationInfo>
				$ m_powerTiles : std::vector<RtWeakPtr<RtObject>>
				$ m_plantsPlantedOnPowerTiles : int32
				- PowerTilePropagation_ConnectingDotHandler
					$ RigPtr : RtWeakPtr<RtObject>
					$ BoardLocation : SexyVector2
					$ TintColor : Color
					$ Done : bool
					$ FadeInTime : float
					$ FadeOutTime : float
					$ FadeOutAnimHandle : int32
				- PowerTilePropagationInfo
					$ SourceLocation : Point
					$ TargetLocation : Point
					$ TargetTile : RtWeakPtr<RtObject>
					$ Group : int32
					$ StartTime : float
					$ TotalTime : float
					$ Timer : float
					$ IsBossPropagation : bool
					$ Dots : std::vector<PowerTilePropagation_ConnectingDotHandler>
			ZombieAudioPirateImpsSubsystem 030
				$ m_impZombies : std::vector<RtWeakPtr<RtObject> >
				$ m_leprechaunZombies : std::vector<RtWeakPtr<RtObject> >
			ZombieAudioCaptainAndParrotSubsystem 030
				$ m_captainZombies : std::vector<RtWeakPtr<RtObject> >
				$ m_parrotZombies : std::vector<RtWeakPtr<RtObject> >
			ZombieBlowerSubSystem 038
				$ m_blownZombies : std::vector<BlownZombie>
				$ m_newBlownZombies : std::vector<BlownZombie>
				$ m_deadZombies : std::vector<RtWeakPtr<RtObject> >
				- BlownZombie
					$ m_velocity : SexyVector3
					$ m_acceleration : SexyVector3
					$ m_zombie : RtWeakPtr<RtObject>
					$ m_plant : RtWeakPtr<RtObject>
					$ m_onBlownAwayCallback : RtReflectionDelegateBase
			PlantGroupSubsystem 028
				$ m_groups : std::vector<RtWeakPtr<PlantGroup>>
				$ m_groupsForDeletion : std::vector<RtWeakPtr<PlantGroup>>
			PlantLevelBoardDisplaySubSystem 010
			LevelRecordingBaseSubsystem 018
				LevelReplaySubsystem 038
					$ m_startTime : float
					$ m_nextEventTime : float
					$ m_forcedStopDuration : float
					$ m_playing : bool
					MimicPlayerReplaySubsystem 038
					DataDrivenLevelReplaySubsystem 078
						$ m_data : LevelReplayData
						$ m_lastConsumedEventIndex : int32
						SavedLevelReplaySubsystem 078
						GeneratedLevelReplaySubsystem 090
							$ m_generatorDifficulty : int32
				LevelRecordSubsystem 068
					$ m_lastEventTime : float
					$ m_nextEventDelta : float
					$ m_lastScore : uint64
					$ m_lastMultiplier : float
					$ m_recording : bool
					$ m_loadoutCached : bool
					$ m_data : LevelReplayData
					- LevelReplayEvent
						$ e : LevelReplayEvent::EventType
						$ d : float
					- JoustPlayerLoadoutData
						$ Plants : std::vector<JoustPlayerPlantData>
					- LevelReplayHeader
						$ PlantLoadout : JoustPlayerLoadoutData
					- LevelReplayData
						$ m_events : std::vector<LevelReplayEvent>
						$ m_levelName : std::string
						$ m_randomSeed : uint64
						$ m_header : LevelReplayHeader
			PlantLevelPropertySheetsSubsystem 020
			LevelDifficultyScalingSubsystem 038
				$ m_nextLevelFactorDecrease : float
				$ m_currentLevelFactor : int32
				$ m_maxLevelFactorAchieved : int32
				$ m_levelFactorToStopDecay : int32
				$ m_levelEnded : bool
				$ m_progressToNextLevelFactor : float
				$ m_rules : RtWeakPtr<DifficultyScalingRules>
		AnimRigLayerSet 028
			$ m_layerSets : std::map<std::string RT_COMMA std::vector<std::string>>
			$ m_currentLayerName : std::string
		ElectricCurrantFence 030
			$ m_location : ElectricCurrantLocation
			$ m_pieces : std::vector<RtWeakPtr<GridSquareElectricCurrantFencePiece>>
			$ m_isPowered : bool
			$ m_isVertical : bool
		RealObject 028
			$ m_position : SexyVector3
			$ m_teamFlags : int32
			$ m_realObjectFlags : int32
			ModularRealObject 038
				$ m_attachedEffects : AttachedEffectManager
				BoardEntity 068
					$ m_collisionRect : Rect
					$ m_boardEntityFlags : int32
					$ m_componentRunner : RtWeakPtr<ComponentRunner>
					% m_row_CmdPropertyGet : *
					# m_row : int32
					% m_column_CmdPropertyGet : *
					# m_column : int32
					% IntersectsGrid : bool
					Collectable 158
						$ m_type : RtWeakPtr<RtObject>
						$ m_collectableFlags : int32
						$ m_creationTime : float
						% CollectableState_CmdPropertyGet : *
						% CollectableState_CmdPropertySet : *
						# CollectableState : int32
						$ m_stateStartTime : float
						$ m_expirationStartTime : float
						$ m_renderEffect : RtWeakPtr<RtObject>
						$ m_fadeOutOnCollectTime : float
						$ m_scale : float
						$ m_rewardSparkleEffect : RtWeakPtr<RtObject>
						$ m_rewardRaysEffect : RtWeakPtr<RtObject>
						$ m_motion : int32
						$ m_motionStartTime : float
						$ m_newton_velocity : SexyVector3
						$ m_newton_acceleration : SexyVector3
						$ m_newton_stopOnHitGround : bool
						$ m_interp_initialPosition : SexyVector3
						$ m_interp_finalPosition : SexyVector3
						$ m_interp_initialScale : float
						$ m_interp_finalScale : float
						$ m_interp_duration : float
						$ m_interp_method : int32
						$ m_drunk_motionAngle : float
						$ m_drunk_motionTurnAngle : float
						$ m_drunk_motionTurnAngleSpeed : float
						$ m_drunk_motionSpeed : float
						$ m_drunk_motionPushToCenter : bool
						CollectablePinata 158
						CollectableTicket ?
							<NONE>
						CollectableSun 160
							$ m_sunType : SunType
							CollectableSunBomb 170
								% onAnimDone_Explode : *
								% onBeamAnimDone_Destroy : *
								$ m_beamEffect : RtWeakPtr<Effect_PopAnim>
								$ m_isExploding : bool
						CollectableGem ?
							<NONE>
						CollectablePowerup ?
							<NONE>
						CollectableJunk ?
							<NONE>
						CollectableCoin ?
							<NONE>
						CollectableCoinFake ?
							<NONE>
						CollectableSeedPacket 168
							$ m_seedType : RtWeakPtr<RtObject>
							CollectableSeedPacketPlantable 168
							CollectableSeedPacketXP 168
						CollectablePresent 158
						CollectablePlantfood ?
							<NONE>
						CollectableSeasonCrown ?
							<NONE>
						CollectableUpgrade ?
							<NONE>
						CollectableWorldKey ?
							<NONE>
						CollectableLawnMower 158
							$ m_rowToFill : int8
						CollectableMint ?
							<NONE>
						CollectableSprout ?
							<NONE>
						CollectableStar ?
							<NONE>
					GridItem 0F0
						$ m_type : RtWeakPtr<RtObject>
						$ m_health : float
						$ m_healthMax : float
						$ m_gridLocation : Point
						$ m_attachedEffects : AttachedEffectManager
						$ m_conditionTracker : GridItemConditionTracker
						GridItemAnimation 100
							$ m_animRig : RtWeakPtr<RtObject>
							$ m_hasLinkedAnimRig : bool
							GridItemCrater 100
								GridItemCraterTimed 120
							GridItemZombiePortal 120
								$ m_nextSpawnTime : float
								$ m_state : int32
								% onCloseAnimCompleted : *
								% onOpenAnimCompleted : *
								$ m_zombiesToSpawn : std::vector<std::string>
							GridItemGoldTile 118
								$ m_nextSunSpawnTime : float
								$ m_tileState : int32
								$ m_plantOnTile : RtWeakPtr<Plant>
								% onAnimDone : *
							GridItemScoreTile 100
							GridItemTriggerTile 108
								$ m_nextTriggerTime : float
								GridItemGridRegionAreaOfEffectTrap 118
									$ m_nextSpawnTime : float
									$ m_currentState : int32
									$ m_gridLocationsLeftToSpawn : std::vector<Sexy::Point>
								GridItemSliderTile 110
									$ m_state : int32
									$ m_lastSlideTime : float
									% onAnimDone : *
								GridItemProjectileTrap 108
									$ m_currentState : int32
							GridItemPowerTile 108
								$ m_isPlantFoodActive : bool
							GridItemZombiePotion 108
								$ m_spawned : bool
							GridItemLilyPad 118
								$ m_isDuplicate : bool
								$ m_PFSpawnedPads : std::vector<RtWeakPtr<GridItem>>
							GridItemDusklobberFlower 118
								$ m_state : int32
								$ m_splashDamage : float
								$ m_splashRadius : float
								$ m_shrapnelDamage : float
								$ m_shrapnelRadius : float
								$ m_pauseBeforeStartFlower : float
								% onGrowFinished : *
								% onPopAnimCommand : *
							GridItemSap 110
								$ m_creationTime : float
								$ m_state : int32
								$ m_resistancePiercing : float
								% onSplatFinished : *
								% onSplatFaded : *
							GridItemLava 110
								$ m_creationTime : float
								$ m_state : int32
								$ m_warmingRadius : RtWeakPtr<ComponentWarmingRadius>
								% onSplatFinished : *
								% onSplatFaded : *
							GridItemWisp 110
								$ m_creationTime : float
								$ m_state : int32
								% PlayIdle : *
								% onSplatFinished : *
								% onSplatFaded : *
							GridItemBombegranateSeeds 118
								$ m_damage : float
								$ m_plantLevel : int32
								$ m_plantMasteryLevel : int32
								$ m_parent : RtWeakPtr<GameObject>
								% onPopAnimCommand : *
							PoisonGridItem 118
								$ m_destroyTime : float
								$ m_gridLifetime : float
								$ m_gridDuration : float
								$ m_gridSpeedPercentDecrease : float
								$ m_gridDPS : float
								$ m_resistancePiercing : float
							GridItemOil 120
								$ m_creationTime : float
								$ m_state : int32
								$ m_resistancePiercing : float
								$ m_lifetime : float
								$ m_plantFamilies : std::vector<std::string>
								$ m_conditionsToApply : ZombieConditions
								% onSpawnFinished : *
								% onDeathFinished : *
							GridItemButter 120
								$ m_creationTime : float
								$ m_state : int32
								$ m_resistancePiercing : float
								$ m_butterLifetime : float
								$ m_butterConditionDuration : float
								$ m_butterDamage : float
								% onButterSplatFinished : *
								% onButterSplatFaded : *
							GridItemWhackPuddle 100
							GridItemGravestone 130
								$ m_state : int32
								$ m_stateTime : float
								$ m_stateDuration : float
								$ m_eatenProgress : float
								$ m_damageStates : int32
								$ m_currDamageState : int32
								$ m_groundEffect : EntityComponent_GroundEffect
								GridItemGravestoneSunOnDestruction 130
								GridItemDestroyable 130
								GridItemGravestonePlantOnDestruction 130
								GridItemGravestoneShortcut 130
								GridItemSurfboard 130
									$ m_groundEffect : EntityComponent_GroundEffect
								GridItemTent 138
									$ m_groundEffect : EntityComponent_GroundEffect
									$ m_nextSpawnTime : float
									$ m_hasPlayedDeathAnim : bool
									% onDestroyAnimCompleted : *
								GridItemBackpack 160
									$ m_hasPlayedDeathAnim : bool
									$ m_offset : SexyVector3
									$ m_velocity : SexyVector3
									$ m_acceleration : SexyVector3
									% onDestroyAnimCompleted : *
								GridItemGravestonePlantfoodOnDestruction 130
								GridItemGravestoneZombieOnDestruction 130
								GridItemGravestoneZombieTimeSpawner 140
									$ m_nextSpawnTime : float
									$ m_selfDestructTime : float
									% onDeathAnimFinished : *
							GridItemBoostTile 120
								$ m_boostsUsed : int32
								$ m_state : int32
								$ m_plantJustPlanted : RtWeakPtr<Plant>
								$ m_waitingForLastStand : bool
							GridItemBreakableTarget 120
								$ m_lastTookDamage : float
								$ m_playingTakeDamageAnim : bool
								$ m_playingDeathAnim : bool
								$ m_hasPlayedFinalBreakEffect : bool
								$ m_isControlled : bool
								$ m_damagePhase : int32
								% onSpawnAnimDone : *
								% onHitAnimDone : *
								% onDeathAnimDone : *
								GridItemEntityTargeting 130
									$ m_actionInProgress : bool
									$ m_actionTimers : std::vector<pvztime_t>
									$ m_lastUsedAction : int32
									% onAnimationComplete : *
									GridItem_HealerStaff 130
								ZombossIceAgeGlacierBlock 120
								GridItemPlantShield 130
									$ m_owner : RtWeakPtr<GameObject>
									GridItemLinkedPlantShield 140
										$ m_partners : std::vector<RtWeakPtr<RtObject> >
										GridItemInfinutShieldSegment 140
											$ m_currentDamageState : int32
								GridItemSpeaker 148
									$ m_speakerState : SpeakerState
									$ m_audioTriggeredNextSpeakerState : SpeakerState
									$ m_groundEffect : EntityComponent_GroundEffect
									$ m_risingTime : float
									% onAnimEnded : *
									GridItemSpeakerZomboss 148
										$ m_wantsToClearLane : bool
										% onFlashEnded : *
								GridItemBoardEntityConditionTarget 158
									$ m_owner : RtWeakPtr<BoardEntity>
									$ m_groundEffect : EntityComponent_GroundEffect
									$ m_startTime : float
									$ m_endTime : float
									$ m_startBoardLocation : SexyVector2
									$ m_targetBoardLocation : SexyVector2
									GridItemPlantConditionTarget 160
										$ m_conditionToRemoveOnDeath : PlantConditions
										Sauced_GridItemPlantConditionTarget 168
											$ m_nextAromaTime : float
									GridItemJammable 168
										GridItemEightiesArcadeCabinet 198
											$ m_state : int32
											$ m_animRunDuration : float
											$ m_cooldownEndTime : float
											$ m_zombieCooldownStartTime : float
											$ m_groundEffect : EntityComponent_GroundEffect
											$ m_risingTime : float
									GridItemZombieConditionTarget 160
										$ m_conditionToRemoveOnDeath : ZombieConditions
						GridItemProtectorShieldSegment 100
							$ m_parent : RtWeakPtr<RtObject>
							$ m_gridOffset : Point
						GridItemVase 128
							$ m_contentsType : RtWeakPtr<RtObject>
							$ m_flags : int32
							$ m_animRig : RtWeakPtr<RtObject>
							$ m_dropStartTime : float
							$ m_dropEndTime : float
							$ m_allowPreGameplayInteraction : bool
							% onBreakAnimStopped : *
						GridItemRailcart 100
						GridItemProtectorShield 138
							$ m_shieldParentZombie : RtWeakPtr<RtObject>
							$ m_shieldHP : float
							$ m_shieldState : int32
							$ m_shieldStateStartTime : float
							$ m_shieldSizeX : float
							$ m_shieldSizeY : float
							$ m_children : std::vector<RtWeakPtr<RtObject> >
							$ m_shieldArea : Rect
							$ m_shieldLastHitTime : float
							$ m_shieldSlices : std::vector<ProtectorShieldSlice>
							- ProtectorShieldSlice
								$ IsBottomPiece : bool
								$ IsTopPiece : bool
								$ TopY : float
								$ BottomY : float
								$ RenderOrder : int32
								$ OwningShield : RtWeakPtr<RtObject>
						GridItemPlank 0F0
						- GridItemConditionTracker
							$ m_conditionFlags : std::vector<uint8_t>
							$ m_conditions : std::vector<EntityCondition>
					ZombieParticle 0E0
						$ m_zombieRig : RtWeakPtr<PopAnimRig>
						$ m_rotation : float
						$ m_currentRotation : float
						$ m_scale : float
						$ m_shadowScale : float
						$ m_motionBeginTime : float
						$ m_fadeOutBeginTime : float
						$ m_settled : bool
						$ m_newParticleRect : Rect
						$ m_velocity : SexyVector3
						$ m_acceleration : SexyVector3
						$ m_spriteRectInZombie : Rect
						$ m_particleName : std::string
						$ m_motionType : int32
						$ m_attributes : int32
					GridSquareElectricCurrantFencePiece 078
						$ m_isVertical : bool
						$ m_isPowered : bool
						$ m_glowEffect : RtWeakPtr<RtObject>
						$ m_gridLocation : Point
					GridSquareElectricCurrantGlowPiece 078
						$ m_isPowered : bool
						$ m_glowEffect : RtWeakPtr<RtObject>
						$ m_gridLocation : Point
					SharkMinion 108
						% SharkMinionState_CmdPropertyGet : *
						% SharkMinionState_CmdPropertySet : *
						# SharkMinionState : int32
						$ m_sharkEffect : RtWeakPtr<RtObject>
						$ m_motionStartTime : float
						$ m_motionEndTime : float
						$ m_motionStartPosition : SexyVector3
						$ m_motionEndPosition : SexyVector3
						$ m_autoSpawnApproved : bool
						$ m_attackApproved : bool
						$ m_attackTargetPosition : Point
						$ m_currentParameters : SharkMinionParameters
						% onIdleAnimStopped : *
						% onSubmergeAnimStopped : *
						% onAttackAnimStopped : *
						- SharkMinionParameters
							$ AppearanceMotionDuration : float
							$ AppearanceMaxRandomDelay : float
							$ SubmergeMotionDuration : float
							$ SubmergeMotionDistanceInTiles : float
							$ DelayFromSubmergeToAttack : float
					HighTideSign 090
						$ m_highTideLevel : float
						$ m_signType : int32
						$ m_srcRect : Rect
						$ m_destRect : Rect
					CloudBase 0B8
						$ m_owner : RtWeakPtr<BoardEntity>
						$ m_target : RtWeakPtr<BoardEntity>
						$ m_animRig : RtWeakPtr<PopAnimRig>
						$ m_state : uint32
						$ m_nextAttackTime : float
						$ m_typesToTarget : BoardEntityTypeFlag
						$ m_attackCooldown : float
						$ m_cloudSpeed : float
						$ m_damage : float
						$ m_resistedBaseDamage : float
						$ m_resistancePiercing : float
						$ m_remainingTargets : int32
						$ m_plantFamiliesForAttack : std::vector<std::string>
						LightningCloud 0C0
							$ m_finishTime : float
							$ m_canMove : bool
							% onPlantFinished : *
							% onDieFinished : *
						BlueberryZapCloud 0C8
							$ m_finishTime : float
							$ m_canMove : bool
							$ ZombieTargetWeights : std::vector<int>
							% onDieFinished : *
							% onAttackFinished : *
					ZombossRocket 090
						$ m_owningZomboss : RtWeakPtr<RtObject>
						$ m_targetSquare : Point
						$ m_rocketEffect : RtWeakPtr<RtObject>
						$ m_crosshairEffect : RtWeakPtr<RtObject>
					Zombie 308
						% zombieType_CmdPropertyGet : *
						# zombieType : std::string
						$ m_type : RtWeakPtr<RtObject>
						$ m_animRig : RtWeakPtr<RtObject>
						% ZombieState_CmdPropertyGet : *
						% ZombieState_CmdPropertySet : *
						# ZombieState : int32
						$ m_elapsedTimeInState : double
						$ m_stateMachineTimeScale : float
						$ m_zombieFlags : int32
						$ m_facing : int32
						$ m_hitpoints : float
						$ m_maxHitpoints : float
						$ m_isTimeToKillActive : bool
						$ m_timeToKill : float
						$ m_speedScale : float
						$ m_dpsScale : float
						$ m_damageScale : float
						$ m_shrunkenDamageScale : float
						$ m_walkSpeed : float
						$ m_translationMultiplier : float
						$ m_helm : int32
						$ m_helmHitpoints : float
						$ m_maxHelmHitpoints : float
						$ m_spawnedFromWave : int32
						$ m_nextChewSoundTime : float
						$ m_mowedStartTime : float
						$ m_flickedStartTime : float
						$ m_flickOffStartPosition : SexyVector3
						$ m_flickOffTarget : SexyVector3
						$ m_flickOffTimeToTarget : float
						$ m_flickOffFinalRotation : float
						$ m_rotation : float
						$ m_scale : float
						$ m_playingAnim : int32
						$ m_zombieRenderLayerOffset : int32
						$ m_level : int32
						$ m_createdTime : float
						$ m_ownerPlant : RtWeakPtr<RtObject>
						$ m_forcedTarget : RtWeakPtr<RtObject>
						$ m_stormType : StormType
						$ m_stormTargetLocation : SexyVector2
						$ m_groundEffect : EntityComponent_GroundEffect
						$ m_conditionTracker : ZombieConditionTracker
						$ m_armor : std::vector<RtWeakPtr<Armor>>
						$ m_loot : int32
						$ m_highlightColor : Color
						$ m_isBeingDestroyed : bool
						$ m_wasMowedDown : bool
						$ m_familyResistances : std::vector<PlantFamilyResistance>
						$ m_targetHistory : std::vector<RtWeakPtr<RtObject>>
						$ m_attachedBoardEntities : AttachedBoardEntityManager
						% GetHitpoints : float
						% onWalkAnimationCycle : *
						% onIdleAnimationCycle : *
						ZombieBeachFastSwimmer 308
						ZombieBeachFisherman 320
							$ m_hook : RtWeakPtr<FishHookProjectile>
							$ m_targetPos : SexyVector2
							$ m_shouldUseTideEffect : bool
							$ m_needsToReel : bool
							% onIntroCompleted : *
							% onAttackCompleted : *
							% onCastCompleted : *
							% onHookReachedTarget : *
							% onHookReeledIn : *
						ZombieBeachSnorkel 310
							$ m_isSubmerged : bool
							% onSubmergeAnimFinished : *
						ZombieBeachSurfer 310
							% onSlamAnimCompleted : *
							% onSurfToWalkAnimCompleted : *
							$ m_eatTarget : RtWeakPtr<BoardEntity>
						ZombieBull 310
							$ m_hitEntity : bool
							$ m_walkCycled : bool
							$ m_damageState : int32
							% onPawingAnimDone : *
							% onPreRunAnimDone : *
							% onRearingAnimDone : *
							% onWalkAnimContinued : *
							ZombieBullVeteran 310
						ZombieChicken 308
							ZombieWeasel 308
							ZombieCarnieMonkey 308
								% onAnimationDone : *
						ZombieChickenFarmer 310
							$ m_hasChickened : bool
							ZombieWeaselHoarder 310
								$ m_hasStartedChickening : bool
								% onWeaselAttackEnd : *
						ZombieBasic 310
							$ m_helmDamageIndex : int32
							ZombieCowboyBasic ?
								<NONE>
							ZombieDinoBasic 370
								$ m_onPterodactylGrab : RtReflectionDelegateBase
								$ m_onPterodactylDrop : RtReflectionDelegateBase
								% onDroppingAnimationStopped : *
								% onGrabbedAnimationStopped : *
								ZombieDinoBully 370
									ZombieDinoBullyVeteran 378
							ZombieEightiesBasic 310
								ZombieEighties8BitBasic 310
							ZombieImp 318
								$ m_invincibleWhileInAir : bool
								$ m_getsUpFromLanding : bool
								$ m_fallVelocity : float
								$ m_animFailed : bool
								% onLandingAnimStopped : *
								% onHitHeadAnimStopped : *
								% onGetUpAnimStopped : *
								% onLanding : *
								% vasebreakerKillBullrider : *
								ZombieFutureImp 320
									$ m_stunDuration : float
								ZombieModernSuperfanImp 320
									$ m_selectedTriggerColumn : int32
									% onCheerForTheEndAnimStopped : *
									ZombieBigHeadSuperfan 320
								ZombieBigHeadImp 318
								ZombieRomanImp 318
									$ m_hasNet : bool
								ZombieZCorpImp 320
									$ m_watchAnimHandle : int32
								ZombieZcorpRacerZombie 318
								ZombieCarnieImpTwins 318
							ZombieBigHeadBasic 310
							ZombieZoybeanPodBasic 320
								$ m_plantFamilies : std::vector<std::string>
								$ m_resistancePiercingOverride : float
							ZombieLostCityBasic 310
								% onTentPlayed : *
							ZombieCarnieGrinderhead 310
						ZombiePiano 310
							$ m_isStreetZombie : bool
						ZombiePoncho 310
							$ m_helmDamageIndex : int32
							$ m_hasPlate : bool
						ZombieProspector 320
							$ m_dynamiteActive : bool
							$ m_countdownStarted : bool
							$ m_deferDamage : bool
							$ m_deferredDamage : float
							$ m_countdown : float
							$ m_lastParticlePosition : SexyVector2
							% onBlastoffEnd : *
							% onLandingEnd : *
							% onFlyingEnd : *
						ZombieDarkJuggler 340
							$ m_juggledProjectiles : std::vector<JuggledProjectileTimer>
							$ m_accumulatedTime : float
							$ m_playingSpinAudio : bool
							% onAnimationJuggleStopDone : *
							- JuggledProjectileTimer
								$ JuggledProjectile : RtWeakPtr<RtObject>
								$ ReturnTime : float
						ZombieDarkKing 310
							$ m_knightingTarget : RtWeakPtr<RtObject>
							% onIntroCompleted : *
							% onKnightingCompleted : *
						ZombieGargantuar 310
							$ m_thrownImpIndex : uint32
							$ m_watchAnimHandle : int32
							ZombieGargantuarMech 3A0
								$ m_stunDuration : float
								$ m_beamRig : RtWeakPtr<RtObject>
								$ m_beamStartRig : RtWeakPtr<RtObject>
								$ m_scorchRig : RtWeakPtr<RtObject>
								$ m_laserState : EyeLaserTracker
								$ m_endTimeOfLastLaserAttack : float
								$ m_laserStartComplete : bool
								$ m_nextFireStartLoc : SexyVector3
								$ m_nextFireEndLoc : SexyVector3
								% onEyeLaserStartComplete : *
								% onEyeLaserEndComplete : *
								- EyeLaserTracker
									$ m_timeInState : float
									$ m_state : int32
									$ m_firingInterrupted : bool
									$ m_beamStartOffset : SexyVector3
									$ m_beamEndOffset : SexyVector3
									$ m_beamCurrentOffset : SexyVector3
									$ m_lastActiveBeamExtent : float
									$ m_beamExtent : float
									$ m_eyeLaserWarmUpTime : float
									$ m_eyeLaserSweepTime : float
									$ m_owningZombie : RtWeakPtr<RtObject>
							ZombieEightiesGargantuar 318
								$ m_isJamming : bool
								$ m_arbitrarySmashTime : float
							ZombieBigHeadGargantuar 310
							ZombieZoybeanPodGargantuar 320
							ZombieLostCityGargantuar 310
							ZombieZCorpGargantuar 310
						ZombieCamel 318
							$ m_camelType : ZombieCamelSegmentType
							$ m_isACamel : bool
							$ m_tooCloseToPrev : bool
							$ m_tooFarFromNext : bool
							$ m_signDamageIndex : int32
							$ m_spawnDeathAnim : bool
							ZombieLNYDragonWall 318
							ZombieCamelTouch 340
								% onMatchedAnimationFinished : *
								$ m_cardType : int32
								$ m_cardState : int32
								$ m_riseFromGroundDelay : float
								$ m_shadowFadeInStartTime : float
								$ m_isTutorialCamel : bool
								$ m_signHolder : RtWeakPtr<RtObject>
								$ m_hasBeenMatched : bool
								$ m_isStreetZombie : bool
							ZombieRomanShield 318
								ZombieRomanTopShield 318
									% onShieldLost : *
						ZombieExplorer 310
							$ m_hasTorch : bool
						ZombiePharaoh 310
							$ m_helmDamageIndex : int32
							% onBustingOutAnimDone : *
						ZombieRa 318
							% onAnimationDone : *
							$ m_sunCurrencyCollected : int32
							$ m_sunCurrencyClaimed : int32
							$ m_sunsClaimed : int32
						ZombieTombRaiser 328
							% onSpawnAnimDone : *
							% onThrow : *
							$ m_remainingAmmo : int32
							$ m_remainingGravespawnAttempts : int32
							$ m_startThrowTime : float
							$ m_throwingTarget : Point
							$ m_pendingGraves : std::vector<SpellBolt>
							- SpellBolt
								$ posX : float
								$ posY : float
								$ velX : float
								$ velY : float
								$ lifetime : int32
								$ targetCellX : int32
								$ targetCellY : int32
						ZombieEightiesBoombox 320
							% onBoomboxRaised : *
							% onBoomboxLowered : *
							$ m_boomTimeEnd : float
							$ m_nextBoomTime : float
							$ m_hasBoomed : bool
							$ m_plantsToBoom : std::vector<RtWeakPtr<Plant>>
						ZombieEightiesBreakDancer 310
							$ m_isJamming : bool
							% spinIntroComplete : *
							% spinMainComplete : *
							% spinOutroComplete : *
						ZombieEightiesGlitter 310
							$ m_lastApplicationTime : float
							$ m_isMyJamOn : bool
							$ m_isStreetZombie : bool
							$ m_isRainbowEffectShowing : bool
						ZombieEightiesMC 310
							$ m_isJamming : bool
							% onAttackJamAnimComplete : *
						ZombieEightiesPunk 318
							$ m_curIsMyJam : bool
							$ m_nextPushTime : float
							$ m_isAStreetZombie : bool
						ZombieFutureJetpack 310
							$ m_jumpMovement : bool
							% onDropAnimDone : *
							% onFlyUpAnimDone : *
							% onFlyDownAnimDone : *
						ZombieMech 320
							$ m_stunDuration : float
							$ m_stunDamageEffect : RtWeakPtr<RtObject>
							$ m_damageState : int32
							ZombieFutureProtector 340
								% onShieldActivateAnimationDone : *
								% onShieldDeactivateAnimationDone : *
								$ m_damageState : int32
								$ m_shieldIsActive : bool
								$ m_shieldCount : int32
								$ m_shieldReactivationDelay : float
								$ m_shieldPtr : RtWeakPtr<RtObject>
								$ m_playedWalkSound : bool
								$ m_stoppedWalkSound : bool
								$ m_shieldWasActive : bool
							ZombieMechDisco 330
								$ m_countdown : float
								$ m_dancers : std::vector<RtWeakPtr<RtObject> >
							ZombieMechFootball 328
								$ m_activeAnim : int32
						ZombieModernAllStar 308
							% onTackleAnimationStopped : *
							% onPuntingAnimationStopped : *
							ZombieBigHeadAllStar 308
						ZombieModernBalloon 308
							% onFlyUpCompleted : *
							% onFlyOverCompleted : *
							% onFlyDownCompleted : *
							% onPopBalloonCompleted : *
							ZombieBigHeadBalloon 308
						ZombieModernNewspaper 308
							% onDiscardNewspaperComplete : *
							ZombieBigHeadNewspaper 308
						ZombiePirateBarrelPusher 318
							$ m_myBarrel : RtWeakPtr<Zombie>
							$ m_myOldBarrel : RtWeakPtr<Zombie>
							ZombieBigHeadBarrelRoller 318
						ZombieHero 328
							$ m_behavior : int32
							$ m_behaviorProps : RtWeakPtr<RtObject>
							$ m_beamsIn : bool
							$ m_beamsOut : bool
							$ m_nextBehaviorTime : float
							$ m_behaviorTriggerCount : int32
							% onBehaviorAnimFinished : *
						ZombiePet 308
						ZombiePrototype ?
							<NONE>
						ZombieTreasureYeti 318
							$ m_countdownStarted : bool
							$ m_countdown : float
							$ m_damageIndex : int8
							% onWalkContinued : *
						ZombieHamsterBall 330
							$ m_needPostInit : bool
							$ m_ateSomethingLastFrame : bool
							$ m_firstTargetCrushed : bool
							$ m_burstTime : float
							$ m_baseSpeed : float
							$ m_preImpactSpeed : float
							$ m_ricochetLaneChangeDuration : float
							$ m_behaviorMode : int32
							$ m_shouldDie : bool
							$ m_innerZombieType : std::string
							$ m_attachedEffects : AttachedEffectManager
						ZombieGum 318
							$ m_owner : RtWeakPtr<Zombie>
						ZombieStatue 310
						ZombieTurkeypultBasic 318
							$ m_plantFamilies : std::vector<std::string>
							$ m_resistancePiercingOverride : float
						ZombieSolarSageEnlightened 340
							$ m_infectivityCoolDownTime : float
							$ m_infectivityPercentage : float
							$ m_infectivityRadius : float
							$ m_sunProduceTimer : float
							$ m_sunProduceTimerCap : float
							$ m_sunAmount : float
							$ m_zombiesExcludeList : ClassRestrictionSet
							% OnAnimDone : *
							% SpewSunOnAnim : *
						ZombieTigerGrassTiger 348
							$ m_plantFamilies : std::vector<std::string>
							$ m_resistancePiercingOverride : float
							$ m_currentGrowthStage : uint8
							$ m_originatingPlantLevel : int32
							$ m_originatingPlantPowerupFlags : int32
							$ m_swipeDamageAmount : float
							$ m_instigator : RtWeakPtr<BoardEntity>
							$ m_isPFTiger : bool
							$ m_nextSwipeAttackTime : uint64
							$ m_tigerWaitTime : uint64
						ZombieIceAgeDodo 328
							$ m_boardSpaceLeftToFlyForward : int32
							$ m_flightStartX : int32
							$ m_flightMaximumX : int32
							$ m_walkStartX : int32
							$ m_nextCheckX : int32
							$ m_chanceToStartFlying : float
							$ m_timeFlyingAvailable : float
							$ m_damageState : int32
							% onFlyStartAnimDone : *
							% onFlyEndAnimDone : *
						ZombieLostCityBug 310
							% onFlyUpCompleted : *
							% onFlyOverCompleted : *
							% onFlyDownCompleted : *
							$ m_hasTakenCatastrophicDamage : bool
							$ m_basicHelm : BasicHelmType
							$ m_shrunkenWhenDying : bool
						ZombieCrystalSkull 310
							% onArmingDone : *
							% onLaserCooledDown : *
							$ m_timeToNextLaserAction : float
							$ m_timeLeftToCharge : float
						ZombieExcavator 318
							% onShovelCompleted : *
							$ m_helmDamageIndex : int32
							$ m_plantGroupToShovel : RtWeakPtr<PlantGroup>
						ZombieImpPorter 308
							% onSpawnTentAnimCompleted : *
						ZombieLostCityJane 308
						ZombieSwashbuckler 318
							$ m_doomedToFail : bool
							$ m_swinging : bool
							$ m_deathOnLanding : bool
							$ m_shrinkOnLanding : bool
							$ m_deathOnLandingFlags : DamageTypeFlags
							% onSwingIntroAnimDone : *
							% onSwingSucceedAnimDone : *
							% onSwingFailAnimDone : *
							ZombieLostCityRelicHunter 318
						ZombiePirateBarrel 320
							$ m_beingPushed : bool
							$ m_ateSomethingLastFrame : bool
							$ m_myPusher : RtWeakPtr<Zombie>
							$ m_burstTime : float
							$ m_burstDelay : float
						ZombiePirateCannon 338
							$ m_ammoRemaining : int32
							$ m_startPos : SexyVector3
							$ m_endPos : SexyVector3
							$ m_waitTime : float
							$ m_outOfAmmoDeath : bool
							$ m_pendingConditions : std::vector<ZombieConditionEntry>
						ZombiePirateCaptain 320
							$ m_parrotLaunchTime : float
							$ m_parrotHealth : float
							$ m_parrotPtr : RtWeakPtr<RtObject>
							$ m_parrotShown : bool
						ZombiePirateParrot 338
							$ m_captain : RtWeakPtr<RtObject>
							$ m_pickedUpPlant : RtWeakPtr<RtObject>
							$ m_attachedPlant : RtWeakPtr<RtObject>
							$ m_targetCol : int32
							$ m_targetRow : int32
							$ m_attachedPosition : SexyVector3
							ZombieCarnieDove 338
						ZombiePirateSeagull 310
							$ m_followingSpline : bool
							$ m_hasHeadParticle : bool
							$ m_butteredWhileDying : bool
						ZombieRomanBallista 338
							$ m_ammoRemaining : int32
							$ m_startPos : SexyVector3
							$ m_endPos : SexyVector3
							$ m_waitTime : float
							$ m_outOfAmmoDeath : bool
							$ m_pendingConditions : std::vector<ZombieConditionEntry>
						ZombieZCorpConsultant 310
							$ m_timeToChangeDirection : float
						ZombieZcorpRacer 310
							$ m_hitEntity : bool
							$ m_damageState : int32
							% onWalkAnimContinued : *
						ZombieCarnieFireBreather 320
							% onFlameCooledDown : *
							$ m_timeToNextFireAction : float
						ZombieStiltWalker 308
							% onStiltsDropCompleted : *
						ZombieWithActions 338
							$ m_queueEmptyState : int32
							$ m_actionRepeatsLeft : int32
							$ m_lastAction : RtWeakPtr<RtObject>
							$ m_currentAction : RtWeakPtr<RtObject>
							$ m_actionQueue : std::vector<RtWeakPtr<RtObject>>
							$ m_currentPhase : ZombieActionPhase
							$ m_queuedPhaseAfterAction : ZombieActionPhase
							ZombieBeachOctopus 340
								$ m_nextCastTime : float
							ZombieZombossMech 3C8
								$ m_currentStageIndex : int32
								$ m_movementCurves : CurveCollection_Float
								$ m_effectCurves : CurveCollection_Float
								$ m_colorCurve : CurveSequence_Color
								$ m_scheduledStateEndTime : float
								$ m_zombossScaledTime : float
								$ m_dyingAnimDone : bool
								$ m_exitAnimDone : bool
								$ m_playingStunStart : bool
								$ m_playingStunEnd : bool
								$ m_takenStunAttack : bool
								$ m_haveShownHalfDamagePhase : bool
								$ m_cheatKillZombie : bool
								$ m_slideWithStreetView : bool
								$ m_plantfoodDamageTaken : float
								$ m_zombieWavesFullySpawned : int32
								$ m_nextZombieWaveWithPlantfood : int32
								$ m_activeRockets : std::vector<RtWeakPtr<RtObject>>
								$ m_zombieDamageSparks : RtWeakPtr<RtObject>
								$ m_canShowDamageEffects : bool
								$ m_droppedDebrisCount : int32
								$ m_lootForSpawnedZombies : std::vector<Loot>
								% onIntroAnimDone : *
								% onDyingAnimDone : *
								% onStunAnimDone : *
								% onStunEndAnimDone : *
								ZombieZombossMech_Beach 3E8
									$ m_isSubmerged : bool
									$ m_playingTangleKelpStunStart : bool
									$ m_playingTangleKelpStunEnd : bool
									$ m_minions : std::vector<RtWeakPtr<RtObject>>
									$ m_windEffect : RtWeakPtr<RtObject>
									$ m_isWindEffectEnabled : bool
									% onTangleKelpStunAnimDone : *
									% onTangleKelpStunEndAnimDone : *
								ZombieZombossMech_Cowboy 3C8
								ZombieZombossMech_Dark 3C8
									$ m_playingMagnetStunStart : bool
									$ m_playingMagnetStunEnd : bool
									% onMagnetStunAnimDone : *
									% onMagnetStunEndAnimDone : *
								ZombieZombossMech_Dino 3C8
								ZombieZombossMech_Egypt 3C8
								ZombieZombossMech_Eighties 3D8
									$ m_stageState : int32
									$ m_crosshairEffect : RtWeakPtr<RtObject>
									$ m_stageDamagedThisPhase : bool
									% onIntroAnimDone : *
								ZombieZombossMech_Future 3C8
								ZombieZombossMech_IceAge 3C8
								ZombieZombossMech_LostCity 3C8
								ZombieZombossMech_Pirate 3D0
									$ m_impCannonActionDef : RtWeakPtr<RtObject>
							ZombieDarkWizard 358
								$ m_nextCastTime : float
								$ m_plantGroups : std::vector<RtWeakPtr<RtObject>>
								$ m_sheep : std::vector<RtWeakPtr<RtObject>>
							ZombieGeneralBase 348
								$ m_timeToRetreat : float
								$ m_damageStateOverride : int32
								ZombieGeneralCaesar 348
								ZombieGeneralTreadmill 348
								ZombieGeneralZmech 360
								ZombieCakeTank 350
									$ m_lastDamageStep : int32
									$ m_healthDirty : bool
							ZombieIceAgeHunter 350
								$ m_nextCastTime : float
								$ m_snowballsThrown : int32
								$ m_nearRange : int32
								$ m_farRange : int32
								$ m_snowballsPerBarrage : int32
							ZombieLostCityLostPilot 340
								% onHangStartCompleted : *
								% onHangCutCompleted : *
								$ m_TimeToFallFromHang : float
								ZombieZCorpHelpdesk 340
									% onDiscardLaptopComplete : *
							ZombieRomanHealer 350
								$ m_nextHealTime : float
								$ m_nextHypnoHealTime : float
								$ m_nextPoisonHealTime : float
								$ m_shouldDropStaff : bool
								$ m_currentHealingStatus : HealingStatus
							ZombieCarnieMagician 348
								$ m_nextTeleportOtherTime : float
								$ m_nextTeleportSelfTime : float
								$ m_nextDoveSpawnTime : float
								$ m_currentAction : MagicianActionStatus
							ZombieWithPushingAction 340
								$ m_numberOfIGriditemsToSpawnWith : int32
								ZombieEightiesArcade 340
									$ m_isMyJamOn : bool
									$ m_isStreetZombie : bool
								ZombieIceAgeTroglobite 340
									$ m_renderOrder : int32
									ZombieRomanMedusa 348
										$ m_nextPetrifyTime : float
						- EntityCondition
							$ m_startTime : float
							$ m_endTime : float
							$ m_eventTime : float
							$ m_additionalDataValue : float
						- ZombieConditionTracker
							$ m_conditionFlags : std::vector<uint8_t>
							$ m_conditions : std::vector<EntityCondition>
					LawnMower 0C8
						$ m_row : int32
						$ m_mowerState : int32
						$ m_popAnimRig : RtWeakPtr<RtObject>
						$ m_chompTime : float
						$ m_activatedAudioEvent : std::string
						$ m_fallingIntoWater : bool
						$ m_numZombiesMowed : int32
						$ m_fallingStartTime : float
						$ m_groundEffect : EntityComponent_GroundEffect
						$ m_explodeAtGridX : int32
						% onAnimStopped : *
					Creature 180
						% creatureType_CmdPropertyGet : *
						# creatureType : std::string
						$ m_type : RtWeakPtr<RtObject>
						$ m_animRig : RtWeakPtr<RtObject>
						% CreatureState_CmdPropertyGet : *
						% CreatureState_CmdPropertySet : *
						# CreatureState : int32
						$ m_elapsedTimeInState : double
						$ m_stateMachineTimeScale : float
						$ m_creatureFlags : int32
						$ m_facing : int32
						$ m_walkSpeed : float
						$ m_rotation : float
						$ m_scale : float
						$ m_translationMultiplier : float
						$ m_playingAnim : int32
						$ m_renderLayerOffset : int32
						$ m_waveToLeave : int32
						$ m_walkingToStreet : bool
						$ m_streetStopX : int32
						% onWalkAnimationCycle : *
						% onIdleAnimationCycle : *
						$ m_conditionTracker : CreatureConditionTracker
						Dinosaur 188
							$ m_timeout : float
							$ m_isZombossLevel : bool
							DinosaurAnkylosaurus 198
								$ m_timeToFling : float
								$ m_numZombiesTossed : int32
								$ m_usedWalkState : bool
								% onAttackAnimComplete : *
								% onEnterComplete : *
								% onIdleContinued : *
								% onStartCharmedComplete : *
								% onExitComplete : *
								% onZombieLanding : *
							DinosaurPterodactyl 198
								$ m_nextActivationTime : float
								$ m_numberOfZombiesCarriedAndDropped : int32
								$ m_grabbedZombie : RtWeakPtr<ZombieDinoBasic>
								% onPlayCharmedStopped : *
								% onEnterIdleStopped : *
								% onIdleContinued : *
								% onExitIdleStopped : *
								% onGrabStopped : *
								% onDropStopped : *
								% onCharmedGrabStopped : *
								% onCharmedWhileFlyingStopped : *
							DinosaurTyrannosaurus 1A0
								% onRoarAnimComplete : *
								% onEnterComplete : *
								% onIdleContinued : *
								% onStartCharmedComplete : *
								% onExitComplete : *
								% onEatAnimComplete : *
								$ m_timeToEndCooldown : float
								$ m_numZombiesEaten : int32
								$ m_prevCharmState : bool
								$ m_timeToRoar : float
								$ m_numTimesRoared : int32
							DinosaurRaptor 198
								$ m_KicksRemaining : int32
								$ m_wantsToFlip : bool
								$ m_ableToKick : bool
								$ m_targetZombie : RtWeakPtr<Zombie>
								% onPlayFlipStopped : *
								% onDoneKick : *
							DinosaurStegosaurus 1B0
								% onAttackAnimComplete : *
								% onEnterComplete : *
								% onIdleContinued : *
								% onStartCharmedComplete : *
								% onAnnoyedComplete : *
								% onExitComplete : *
								$ m_zombiesOnTail : std::vector<RtWeakPtr<Zombie>>
								$ m_zombiesInAttackRange : std::vector<RtWeakPtr<Zombie>>
								$ m_timeToFling : float
								$ m_numTosses : int32
								$ m_isHead : bool
								$ m_hasFlung : bool
								$ m_prevCharmState : bool
						- CreatureConditionTracker
							$ m_conditionFlags : std::vector<uint8_t>
							$ m_conditions : std::vector<EntityCondition>
					ElectricBoltEffect 090
						$ m_effect : RtWeakPtr<Effect_PopAnim>
						$ m_target : RtWeakPtr<RealObject>
						$ m_source : RtWeakPtr<RealObject>
						$ m_active : bool
						$ m_activeLength : float
						$ m_activeTime : float
					AnimatePuffballBurst 070
						$ m_burstIntervalSeconds : float
						$ m_nextBurstTime : float
						$ m_burstIndex : int32
					StickybombBomb 098
						$ m_state : int32
						$ m_numberOfBombs : int32
						$ m_propagationCount : int32
						$ m_timeToDetonate : float
						$ m_totalDamage : float
						$ m_explodeRadius : float
						$ m_propagationMultiplier : float
						$ m_ownerZombiePtr : RtWeakPtr<Zombie>
						$ m_plantFamilies : std::vector<std::string>
						$ m_resistancePiercingOverride : float
					GridSquareMoonFlowerGlow 078
						$ m_glowEffect : RtWeakPtr<RtObject>
						$ m_gridLocation : Point
					GridSquareCoveringFlame 098
						$ m_flameEffect : RtWeakPtr<RtObject>
						$ m_scorchEffect : RtWeakPtr<RtObject>
						$ m_spawnScorchAt : float
						$ m_owner : RtWeakPtr<RtObject>
						$ m_endOfLife : float
						$ m_gridLocation : Point
						GridSquareLaser 098
						GridSquareFlamethrower 0A0
							$ m_powerupProps : RtWeakPtr<PowerupTypeFlamethrower>
					Plant 1E8
						$ m_plantFlags : int32
						$ m_initialLaunchInterval : ValueRange
						$ m_launchInterval : ValueRange
						$ m_baseScale : float
						$ m_state : uint32
						$ m_PlantHealth : float
						$ m_overrideMinimumMaxHealth : float
						$ m_speedModifier : float
						$ m_lastDamageType : int32
						$ m_row : int32
						$ m_column : int32
						$ m_isOnBoard : bool
						$ m_isShooter : bool
						$ m_disappearTime : float
						$ m_doSpecialTime : float
						$ m_stateEndTime : float
						$ m_launchTime : float
						$ m_plantFoodEndTime : float
						$ m_timeTillNextDamageFlash : float
						$ m_fadeInDuration : float
						$ m_fadeInEndTime : float
						$ m_sproutScalingDuration : float
						$ m_sproutScalingEndTime : float
						$ m_damageStates : int32
						$ m_currentDamageState : int32
						$ m_relocateFromX : float
						$ m_relocateFromY : float
						$ m_relocateToX : float
						$ m_relocateToY : float
						$ m_relocateApexHeight : float
						$ m_relocateStartTime : float
						$ m_relocateEndTime : float
						$ m_relocating : bool
						$ m_relocationType : int32
						$ m_relocationOffsetFromDestination : SexyVector2
						$ m_mirror : bool
						$ m_isDuplicate : bool
						$ m_isDead : bool
						$ m_level : int32
						$ m_masteryLevel : int32
						$ m_powerUpFlags : int32
						$ m_multiPlantGridLayer : MultiPlantGridLayer
						$ m_multiPlantDrawLayer : MultiPlantGridLayer
						$ m_currentPlantActionIdx : int32
						$ m_type : RtWeakPtr<RtObject>
						$ m_animRig : RtWeakPtr<RtObject>
						$ m_plantFoodShine : RtWeakPtr<RtObject>
						$ m_isInPlantFoodState : bool
						$ m_protectedFromShovel : bool
						% onStandaloneEffectFinishedCallback : *
						% onAnimStoppedCallback : *
						% onPlantfoodStartedCallback : *
						% onPlantfoodLoopedCallback : *
						% onPlantfoodEndedCallback : *
						$ m_groundEffect : EntityComponent_GroundEffect
						$ m_conditionTracker : PlantConditionTracker
						$ m_attachedEffects : AttachedEffectManager
						$ m_attachedBoardEntities : AttachedBoardEntityManager
						- PlantConditionTracker
							$ m_conditionFlags : std::vector<uint8_t>
							$ m_conditions : std::vector<EntityCondition>
					PlantGroup 080
						$ m_plants : PlantsSortedByLayer
						$ m_gridX : int32
						$ m_gridY : int32
						$ m_isOnBoard : bool
						$ m_groupPlantfoodRender : bool
						- PlantsSortedByLayer
							$ m_plants : std::vector<RtWeakPtr<Plant>>
					RayEntity 0E8
						$ m_owner : RtWeakPtr<BoardEntity>
						$ m_endPos : SexyVector3
						$ m_destroyTime : float
						$ m_decayDelay : float
						$ m_tiledRigs : std::vector<RtWeakPtr<PopAnimRig> >
						$ m_data : RayEntityData
						LightningBolt 128
							$ m_bounceCount : int32
							$ m_maxBounces : int32
							$ m_damage : float
							$ m_bounceDamagePercent : float
							$ m_bounceDelay : float
							$ m_hitTargets : std::vector<RtWeakPtr<BoardEntity> >
							$ m_bounceTime : float
							$ m_bouncePopAnimName : std::string
							$ m_plantTypeName : std::string
							$ m_damageMasteryPiercing : float
						- RayEntityData
							$ PopAnimName : std::string
							$ HitPopAnimName : std::string
							$ HitAnimLabel : std::string
							$ InitialAnimLayerName : std::string
							$ MainAnimLayerName : std::string
					FlyingFireball 0A0
						$ m_effect : RtWeakPtr<RtObject>
						$ m_owner : RtWeakPtr<RtObject>
						$ m_burnTime : float
						$ m_targetLocation : Point
						$ m_spawnDragonImp : bool
						$ m_movementCurves : CurveCollection_Float
					- BoardEntityStat
						$ Type : BoardEntityStatType
						$ Value : BoardEntityStatValue
				Projectile 140
					$ m_propertySheetPtr : RtWeakPtr<RtObject>
					$ m_instigator : RtWeakPtr<RtObject>
					$ m_instigatorLevel : int32
					$ m_instigatorPowerUpFlags : int32
					$ m_instigatorType : RtWeakPtr<PlantType>
					$ m_timeStepOverride : float
					$ m_previousPosition : SexyVector3
					$ m_velocity : SexyVector3
					$ m_acceleration : SexyVector3
					$ m_velocityScale : SexyVector3
					$ m_boardRow : int32
					$ m_previousBoardRow : int32
					$ m_boardRowHeight : int32
					$ m_boardRowFiredOrDeflectedFrom : int32
					$ m_renderImage : RtWeakPtr<RtObject>
					$ m_renderOrder : int32
					$ m_scale : float
					$ m_rotation : float
					$ m_baseRotation : float
					$ m_angularVelocity : float
					$ m_mirrored : bool
					$ m_collideLeftToRight : bool
					$ m_shouldAffectTarget : bool
					$ m_damageAmount : float
					$ m_splashDamageAmount : float
					$ m_stunDurationAmount : float
					$ m_damageFlags : int64
					$ m_damageConditions : std::vector<ZombieConditionEntry>
					$ m_collisionFlagsOverride : int32
					$ m_propertyFlags : int32
					$ m_attachedAnimRig : RtWeakPtr<RtObject>
					$ m_attachedAnimRigOffset : SexyVector2
					$ m_target : RtWeakPtr<RtObject>
					$ m_groundEffect : EntityComponent_GroundEffect
					$ m_plantTier : int32
					$ m_plantFamilies : std::vector<std::string>
					$ m_resistancePiercingOverride : float
					PennyPerkShockwaveProjectile 148
						$ m_knockbackDistance : float
					ZombieParticleProjectile 148
						$ m_controlledParticle : RtWeakPtr<RtObject>
						SnapPeaMedusaProjectile 148
					SnowballProjectile 140
					SandbagProjectile 140
					RangedPlantProjectile 148
						$ m_projectileRange : int32
						$ m_traveledDistance : float
					SquidProjectile ?
						<NONE>
					TombraiserProjectile 148
						$ m_targetGridLoc : Point
					ShockWaveProjectile 140
					SauceProjectile ?
						<NONE>
					PowerDrinkProjectile ?
						<NONE>
					HunterSnowballProjectile ?
						<NONE>
					RomanBallistaProjectile 148
						$ BallistaTypeProps : RtWeakPtr<PropertySheetBase>
					HelpdeskLaptopProjectile ?
						<NONE>
					BouncingAndRollingProjectile 148
						$ m_lastRowHit : int32
						BowlingBulbProjectile 150
							$ m_enemyHitsUntilAward : int32
							$ m_enemyKills : int32
						TumbleweedProjectile 158
					FishHookProjectile 1A8
						$ m_state : HookState
						$ m_motionStartTime : float
						$ m_motionEndTime : float
						$ m_motionStartPos : SexyVector3
						$ m_motionEndPos : SexyVector3
						$ m_onHookLandedDelegate : RtReflectionDelegateBase
						$ m_hookedPlants : std::vector<RtWeakPtr<Plant>>
					SpeakerProjectile 150
						$ m_hitEntities : std::vector<RtWeakPtr<BoardEntity> >
					GuacodileProjectile 150
						$ m_nextChompTime : float
						$ m_state : int32
						$ m_animHandle : int32
					PrimalPeashooterProjectile 140
					BloomerangProjectile 198
						$ m_turnedAround : bool
						$ m_hitEntities : std::vector<RtWeakPtr<BoardEntity> >
						$ m_forbiddenEntities : std::vector<RtWeakPtr<BoardEntity> >
						$ m_boundaryPosition : SexyVector2
						$ m_targetPosition : SexyVector2
						$ m_startingPosition : SexyVector2
						$ m_baseVelocity : SexyVector3
						$ m_pauseEndTime : float
						$ m_maxHits : int32
						$ m_currentHitCount : int32
						$ m_slowdownRadius : float
						$ m_minVelocityPercentage : float
						$ m_pauseDuration : float
						$ m_pauseStunsZombies : bool
						$ m_deflected : bool
					SporeshroomProjectile 140
					GiantPlasmaProjectile 140
					PepperpultProjectile ?
						<NONE>
					PepperpultPlantfoodProjectile 140
					StunionGasProjectile 158
						$ m_hitEntities : std::vector<RtWeakPtr<BoardEntity> >
						$ m_endPosition : float
						$ m_stunDuration : float
						$ m_poisonDPS : float
					AkeeProjectile 168
						$ m_initialLobHeightThisBounce : float
						$ m_initialTimeOfFlightThisBounce : float
						$ m_targetingRadius : float
						$ m_reductionRatio : float
						$ m_rowBeingFiredAt : int32
						$ m_bounceCount : int32
						$ m_targetsAlreadyHit : std::vector<RtWeakPtr<BoardEntity> >
						% doBounce : *
					DusklobberProjectile ?
						<NONE>
					DusklobberPlantfoodProjectile 148
						$ m_flower : RtWeakPtr<GridItemDusklobberFlower>
					DusklobberPlantfoodProjectileBomb 148
						$ m_flower : RtWeakPtr<GridItemDusklobberFlower>
					CoconutCannonProjectile 158
						$ m_fuseLit : bool
						$ m_explosionTargetX : float
						$ m_minScale : float
						$ m_numZombiesForMinScale : int32
						$ m_pushedZombies : std::vector<RtWeakPtr<Zombie> >
						% doExplosion : *
						% handleExplosionDone : *
					ThreepeaterProjectile 140
						$ m_normalMotion : bool
					IceweedPFProjectile 168
						$ m_pfBladeTargetX : float
						$ m_minScale : float
						$ m_numZombiesForMinScale : int32
						$ m_pushedZombies : std::vector<RtWeakPtr<Zombie> >
						% onAnimComplete : *
					SnowPeaProjectile 140
					SnowPeaFreezingProjectile 140
					HomingThistleLeaf 150
						$ m_overrideTarget : RtWeakPtr<BoardEntity>
						$ m_deflected : bool
						$ m_createTime : float
					SapflingProjectile 150
						$ m_TargetPosition : SexyVector3
					DandelionProjectile 150
						$ m_startTime : float
						$ m_startVelocityX : float
						$ m_startVelocityZ : float
					StrawburstProjectile 140
					CactusProjectile 150
						$ m_currentPierceChance : float
						$ m_targetsAlreadyHit : std::vector<RtWeakPtr<BoardEntity>>
					GrapeshotProjectile 148
						$ m_lastRowHit : int32
						$ m_numberOfTimesBounced : int32
					BloomingHeartsProjectile 148
						$ m_currentHitCount : float
					AppleMortarProjectile 148
					ParsnipProjectile 150
						$ m_nextChompTime : float
						$ m_animHandle : int32
						$ m_isInPlantFoodState : bool
					CaulipowerProjectile 150
						$ HealsOnHypnosis : bool
						$ HypnotismHealPercentage : float
						$ m_targetZombie : RtWeakPtr<Zombie>
					ElectricPeaPlantfoodProjectile 158
						$ m_projectileSpawnCount : int32
						$ m_projectileSpawnXVelocityOverride : float
						$ m_spawnedProjectilePropsPtr : RtWeakPtr<ProjectilePropertySheet>
					ElectricPeaPlantfoodSubProjectile 168
						$ m_ignoreTarget : RtWeakPtr<BoardEntity*>
						$ m_initialVelocity : SexyVector3
						$ m_finalVelocity : SexyVector3
						$ m_tweenAmount : float
					ElectricPeaProjectile 168
						$ m_boltEffects : std::vector<RtWeakPtr<ElectricBoltEffect> >
						$ m_boltRadius : float
						$ m_boltFrequency : float
						$ m_lastBoltTime : float
						$ m_boltDamage : float
						$ m_targetsAlreadyHit : std::vector<RtWeakPtr<BoardEntity>>
					HollyKnightLeaf 158
						$ ProjectileKnockback : int32
						$ BarrierLeafHitpoints : int32
						$ BarrierLeafDamage : float
					PlantShadowPeashooterBomb 150
						$ m_damageAmount : float
						$ m_explodeRadius : float
						$ m_screenExplosion : bool
						$ m_targetRow : int32
					PlantPoisonPeashooterProjectile 150
						$ m_stacks : float
						$ m_dps : float
						$ m_speedPercentDecrease : float
						$ m_duration : float
					PlantPoisonPeashooterPlantFoodProjectile 170
						$ m_isFirstTile : bool
						$ m_dps : float
						$ m_speedPercentDecrease : float
						$ m_duration : float
						$ m_knockDistance : float
						$ m_knockTime : float
						$ m_knockHeight : float
						$ m_gridLifetime : float
						$ m_gridDuration : float
						$ m_gridSpeedPercentDecrease : float
						$ m_gridDPS : float
					AppeasemintProjectile 140
					AppeasemintChildProjectile 148
						$ m_targetToIgnore : RtWeakPtr<RtObject>
					ReincarnationPuffProjectile 140
					BlastberryMainProjectile 158
						$ m_mainTargetPoint : SexyVector3
						$ m_numChildProjectiles : int32
						$ m_childDamage : float
						$ m_childSplashRadius : float
					BlastberrySecondaryProjectile 140
					PokraProjectile 150
						$ m_targetsAlreadyHit : std::vector<RtWeakPtr<BoardEntity>>
					DartichokeLeaf 150
						$ m_overrideTarget : RtWeakPtr<BoardEntity>
						$ m_deflected : bool
						$ m_createTime : float
					GumnutPlantfoodProjectile 158
						$ m_gumZombieType : std::string
						$ m_baseGumHealth : float
						$ m_zombieGumHealthPercent : float
					TurkeypultProjectile 150
						$ m_spawnType : std::string
						$ m_spawnLevel : int32
					StickybombRiceProjectile 150
					PlantDraftodilProjectile 148
						$ m_lightweightZombieFlickChance : float
					BoomFlowerProjectile 148
						$ m_mergedBalloons : int32
						$ m_explodeTime : float
					BoomFlowerPlantfoodProjectile 140
					InfernoProjectile 170
						$ m_carriedZombie : RtWeakPtr<Zombie>
						$ m_targetsAlreadyHit : std::vector<RtWeakPtr<Zombie>>
						$ m_hasPickedUpZombie : bool
						$ m_timeToExpire : float
						$ m_timeOfNextDamagePulse : float
						$ m_tornadoDuration : float
						InfernoPFProjectile 180
							$ m_carriedZombies : std::vector<RtWeakPtr<Zombie>>
					HeathSeekerProjectile 168
						$ m_targetsAlreadyHit : std::vector<RtWeakPtr<BoardEntity>>
						$ m_deflected : bool
						$ m_createTime : float
						$ m_numberOfTargetsHit : int32
						$ m_finalDamage : int32
						$ m_maxTargets : int32
					TigerGrassProjectile 168
						$ m_spawnType : std::string
						$ m_currentGrowthStage : uint8
						$ m_tigerHealth : float
						$ m_isPFTiger : bool
						$ m_tigerHandled : bool
						$ m_isPouncingBack : bool
						$ m_basePlant : RtWeakPtr<Plant>
					ButtercupProjectile 178
						$ m_TargetPosition : SexyVector3
						$ m_target : RtWeakPtr<Zombie>
						$ m_butterLifetime : float
						$ m_butterConditionDuration : float
					XShotProjectile 140
					BoulderProjectile 148
						$ m_currentState : int32
		LevelModule 018
			$ m_propertySheetPtr : RtWeakPtr<RtObject>
			InitialPlantPlacer 028
				$ m_plantedPlants : std::vector<RtWeakPtr<Plant> >
			PaddedRoomModule 018
			SpawnGravestoneZombiesOnFlagWavesModule ?
				<NONE>
			PickupCollectableTutorialModule 048
				$ m_collectableDropperSpawned : bool
				$ m_collectableDropper : RtWeakPtr<RtObject>
				$ m_collectableDropped : bool
				$ m_collectableCollected : bool
				$ m_collectable : RtWeakPtr<RtObject>
				$ m_displayAdviceAfter : float
				$ m_continueLevelAfter : float
				$ m_bouncingArrow : RtWeakPtr<RtObject>
			LevelScoringModule 018
			LevelMutatorStartingPlantfoodModule ?
				<NONE>
			LevelMutatorSeedSlotCountModule ?
				<NONE>
			LevelMutatorPowerupSetModule ?
				<NONE>
			LevelMutatorMaxSunModule ?
				<NONE>
			LevelMutatorStartSunModule ?
				<NONE>
			LevelMutatorMowerSpawnModule ?
				<NONE>
			LevelMutatorZombieCountdownFirstWaveSecsModule ?
				<NONE>
			LevelMutatorZombieLevelModule ?
				<NONE>
			LevelMutatorZombieGeneralLevelModule ?
				<NONE>
			LevelMutatorSunDropperModule ?
				<NONE>
			LevelMutatorRiftZombossPhasesModule ?
				<NONE>
			LevelMutatorGridItemLevelModule ?
				<NONE>
			PointOfLossModule 028
				$ m_purchaseCount : int32
				$ m_numAdUses : int32
				ZombossRiftPointOfLossModule 028
				SecurityGourdPointOfLossModule 028
				RiftZombossPointOfLossModule 028
				JoustPointOfLossModule 028
					% onResumePlay : *
			InitialGridItemPlacer 018
			PlantCooldownModifierModule ?
				<NONE>
			BoardTimer 058
				$ m_time : float
				$ m_totalTime : float
				$ m_onTimerExpiredDelegate : RtReflectionDelegateBase
				$ m_drawWidget : bool
				$ m_displayCountdown : bool
				$ m_levelHasStarted : bool
				$ m_widget : RtWeakPtr<UIWidget>
			SunDropperModule 020
				$ m_numSunsDropped : int32
				$ m_nextSunDrop : float
			PiratePlankModule ?
				<NONE>
			Challenge 020
				$ m_failTime : float
				$ m_state : int32
				DefeatGeneralPhasesChallenge 030
					$ m_phasesKilled : int32
				StarChallengeSaveMowers 020
				ProtectThePlantChallengeModule 040
					$ m_spawnedPlants : std::vector<SpawnedPlant>
					$ m_protectTileRig : RtWeakPtr<RtObject>
					$ m_failureText : int32
					- SpawnedPlant
						$ m_plant : RtWeakPtr<RtObject>
						$ m_gridLoc : Point
				StarChallengeSimultaneousPlants 038
					$ m_mostPlantsAtOnce : int32
					$ m_plantsRightNow : int32
					$ m_plantCountUI : RtWeakPtr<UIWidget>
				DestroyGridItemsChallenge 030
					$ m_numGridItemsDestroyed : int32
					$ m_gridItemCounterWidget : RtWeakPtr<RtObject>
				StarChallengeCannonMinigame 028
					$ m_currentScore : float
				StarChallengeFamilyPlants 030
					$ m_familyPlantsPlanted : int32
					$ m_plantCountUI : RtWeakPtr<UIWidget>
				StarChallengeLevelTimer 020
				PlantFullRowChallenge 038
					$ m_currentPlantsOnBoard : std::vector<int>
					$ m_highestNumberOfPlantsInAnyRow : int32
					$ m_plantCounterWidget : RtWeakPtr<RtObject>
				GridItemPlacementChallengeModule 020
				StarChallengeTargetScore 028
					$ m_currentScore : float
				StarChallengeBeatTheLevel 020
				StarChallengeZombieDistance 038
					$ m_goalState : int32
					$ m_closestZombie : float
					$ m_flowers : std::vector<RtWeakPtr<Effect_PopAnim> >
					% onAnimStopped : *
				StarChallengeSunUsed 030
					$ m_sunSpent : int32
					$ m_gameplayStarted : bool
					$ m_sunCounterWidget : RtWeakPtr<UIWidget>
				ApplyZombieConditionsChallenge 030
					$ m_numConditionsApplied : int32
					$ m_conditionCounterWidget : RtWeakPtr<RtObject>
				StarChallengeKillZombiesInTime 038
					$ m_zombiesKilled : std::vector<pvztime_t>
					$ m_comboMeter : RtWeakPtr<UIWidget>
				StarChallengeSpendSunHoldout 030
					$ m_lastSunSpentTime : float
					$ m_sunCounterWidget : RtWeakPtr<UIWidget>
				DefeatZombiesOfTypeChallenge 030
					$ m_zombiesKilled : int32
					$ m_defeatedZombiesWidget : RtWeakPtr<RtObject>
				MoldColonyChallenge 040
					$ m_moldState : int32
					$ m_mold : std::vector<RtWeakPtr<Effect_PopAnim> >
					$ m_boundMold : std::vector<BoundMold>
					% onAnimStopped : *
					- BoundMold
						$ Owner : RtWeakPtr<BoardEntity>
						$ Mold : RtWeakPtr<Effect_PopAnim>
				StarChallengeSunProduced 030
					$ m_sunProduced : float
					$ m_sunCounterWidget : RtWeakPtr<RtObject>
				StarChallengePlantsLost 030
					$ m_plantsLost : int32
					$ m_plantCountUI : RtWeakPtr<class UIWidget>
			ChallengeModule 020
				$ m_challengesWereCompleted : bool
				BaseChallengeModule 020
					$ m_challengesActive : bool
					StarChallengeModule 020
					BonusChallengeModule 020
			TideModule 070
				$ m_waveLocation : float
				$ m_maxWaveLocation : float
				$ m_wetSandEffect : RtWeakPtr<RtObject>
				$ m_lowerWaveEffects : std::vector< RtWeakPtr<RtObject> >
				$ m_upperWaveEffect : RtWeakPtr<RtObject>
				$ m_underWaveEffect : RtWeakPtr<RtObject>
				$ m_hasWaveTransition : bool
				$ m_waveTransitionEnd : float
				$ m_waveTransitionStart : float
				$ m_waveDestination : float
				$ m_waveStart : float
				$ m_waveCoveredTiles : int32
				$ m_drySandRegion : RtWeakPtr<RtObject>
				$ m_tideRegion : RtWeakPtr<RtObject>
			GravestoneModule 018
			StageModule 090
				$ m_sendAlternateHugeWaveEvent : bool
				$ m_musicTriggerOverride : std::string
				$ m_shouldStopMusic : bool
				$ m_shouldStartMusic : bool
				$ m_startMusicOnLastStandStart : bool
				$ m_musicState : int32
				$ m_suppressMusicStateChangeEvents : bool
				$ m_lastWaveIntroMusic : int32
				$ m_backImage : RtWeakPtr<RtObject>
				$ m_backImageRight : RtWeakPtr<RtObject>
				$ m_backImageLeft : RtWeakPtr<RtObject>
				DinoStage 090
				LunarStage 090
				SportzballStage 090
				JoustStage 098
					$ m_scoreMultipliers : std::vector<float>
				FutureStage 090
				DarkStage 0A8
					$ m_brazierTopEffect : RtWeakPtr<RtObject>
					$ m_brazierBottomEffect : RtWeakPtr<RtObject>
				CarnivalStage 090
				EgyptStage 090
				WestStage 090
				ModernStage 098
					$ m_renderBackground : bool
					$ m_jam : std::string
				LostCityStage 090
				PirateStage 0D8
					$ m_planks : std::vector<int32>
					$ m_foamRightAnim : RtWeakPtr<RtObject>
					$ m_foamLeftAnim : RtWeakPtr<RtObject>
					$ m_breakerRightAnim : RtWeakPtr<RtObject>
					$ m_nextRightBreaker : float
					$ m_currRightBreakerPos : SexyVector2
					$ m_breakerLeftAnim : RtWeakPtr<RtObject>
					$ m_nextLeftBreaker : float
					$ m_currLeftBreakerPos : SexyVector2
					$ m_showingGuides : bool
				BeachStage 090
				IceAgeStage 090
				EightiesStage 0A0
					$ m_JamStageMechanic : RtWeakPtr<JamStageMechanic>
				FrontLawnStage 090
					$ m_RenderBackGround : bool
					HeroesStage 090
			LevelSongOverrideModule ?
				<NONE>
			WaveManagerModule A20
				$ m_waveManager : WaveManager
			CannonMinigameModule 0C8
				$ m_state : int32
				$ m_lanes : std::vector<LaneData>
				$ m_zombiesKilledSinceLastUpdate : std::vector<RtWeakPtr<RtObject> >
				$ m_score : int32
				$ m_zombiesSpawned : int32
				$ m_zombiesKilled : int32
				$ m_scoreDisplay : RtWeakPtr<RtObject>
				$ m_minScoreDisplay : RtWeakPtr<RtObject>
				$ m_lastScoreChangeTime : float
				$ m_scoreBounceScale : float
				$ m_displayedScore : int32
				$ m_outroStartTime : float
				$ m_outroEndTime : float
				$ m_rewardCoinSpewTimeline : TimeLine
				$ m_outroScoreValue : TimeLineTrack_Int
				$ m_outroScorePosition : TimeLineTrack_SexyVector3
				$ m_outroMinScorePosition : TimeLineTrack_SexyVector3
				$ m_playerLost : bool
				% spewGoldCoin : *
				% spewSilverCoin : *
				- TargetListEntry
					$ zombie : RtWeakPtr<RtObject>
					$ progress : float
				- LaneData
					$ TargetList : std::vector<TargetListEntry>
			ZombiePotionModule 020
				$ m_nextPotionSpawnTime : float
				$ m_waitingForLastStand : bool
			CoreLoopRewardsLevelModule ?
				<NONE>
			GridItemPlacementModule 018
			SproutOverrideModule 018
			LevelEscalationModule 018
				LevelOfTheDayModule 020
					$ m_levelOfTheDayUID : int32
			SecurityGourdModule A40
				$ m_targetZombie : RtWeakPtr<Zombie>
				% onVineDownEffectComplete : *
				% onVinesEffectComplete : *
				% onVineUpEffectComplete : *
				% onGourdDropEffectComplete : *
				$ m_vinesLineEffect : RtWeakPtr<Effect_PopAnim>
				$ m_vinesTopEffect : RtWeakPtr<Effect_PopAnim>
				$ m_vinesBottomEffect : RtWeakPtr<Effect_PopAnim>
				$ m_vinesEffect : RtWeakPtr<Effect_PopAnim>
				$ m_gourdDropEffect : RtWeakPtr<Effect_PopAnim>
				$ SecurityGourdState : int32
			JoustGameModule 030
				$ m_cheatDetected : bool
				$ m_waitingForLastStand : bool
				$ m_lockedPlants : std::vector<RtWeakPtr<RtObject>>
			CrazyOlafTest 070
				$ m_actionTimer : float
				$ m_freePlantTypes : std::vector<RtWeakPtr<RtObject> >
				$ m_loadedPlantTypes : std::vector<RtWeakPtr<RtObject> >
				$ m_loadedCreatureTypes : std::vector<RtWeakPtr<RtObject> >
				$ m_plantCount : int32
				$ m_zombieCount : int32
				$ m_deadPlantCount : int32
				$ m_deadZombieCount : int32
				$ m_shoveledCount : int32
			LevelModule 018
				$ m_propertySheetPtr : RtWeakPtr<RtObject>
				LevelModule 018
					$ m_propertySheetPtr : RtWeakPtr<RtObject>
				LevelModule 018
					$ m_propertySheetPtr : RtWeakPtr<RtObject>
				LevelModule 018
					$ m_propertySheetPtr : RtWeakPtr<RtObject>
			LevelMutatorModule ?
				<NONE>
			ZombieResistancesModule 018
			GeneralZombieModule 030
				$ m_phaseSpawnTime : float
				$ m_phaseEndTime : float
				$ m_activePhase : int32
				$ m_numTimesKilled : int32
				$ m_phaseSpawned : bool
				$ m_waitingForLastStand : bool
			VaseBreakerFlowModule 030
				$ m_vbModule : RtWeakPtr<RtObject>
				$ m_actionQueue : std::vector<RtWeakPtr<RtObject>>
			PowerTileModule ?
				<NONE>
			PerkHandlerModule 018
			IntroModule 030
				% onShowReady : *
				% onShowSet : *
				% onShowPlant : *
				% onFinishReadySetPlant : *
				TutorialLevel4 058
					$ m_state : int32
					$ m_sodRollTimeStart : float
					$ m_sodRollTimeEnd : float
					$ m_stateTimerEnd : float
					$ m_animationMgr : RtWeakPtr<RtObject>
					$ m_sodRollerTop : RtWeakPtr<RtObject>
					% setupSodRollout : *
				TutorialLevel1 060
					$ m_state : int32
					$ m_stateEnterTime : float
					$ m_sodRollTimeStart : float
					$ m_sodRollTimeEnd : float
					$ m_stateTimerEnd : float
					$ m_animationMgr : RtWeakPtr<RtObject>
					$ m_bouncingArrow : RtWeakPtr<RtObject>
					$ m_sodRoller : RtWeakPtr<RtObject>
					% setupSodRollout : *
					% startGame : *
				TutorialLevel3 070
					$ m_state : int32
					$ m_sodRollTimeStart : float
					$ m_sodRollTimeEnd : float
					$ m_stateTimerEnd : float
					$ m_sunflowerCount : int32
					$ m_peashooterCount : int32
					$ m_animationMgr : RtWeakPtr<RtObject>
					$ m_bouncingArrow : RtWeakPtr<RtObject>
					$ m_bouncingArrowPlants : std::vector<RtWeakPtr<RtObject> >
					% setupSodRollout : *
					% startGame : *
				TutorialLevel2 060
					$ m_state : int32
					$ m_sodRollTimeStart : float
					$ m_sodRollTimeEnd : float
					$ m_stateTimerEnd : float
					$ m_animationMgr : RtWeakPtr<RtObject>
					$ m_bouncingArrow : RtWeakPtr<RtObject>
					$ m_sodRollerTop : RtWeakPtr<RtObject>
					$ m_sodRollerBottom : RtWeakPtr<RtObject>
					$ m_sodRollerBottom : RtWeakPtr<RtObject>
					% setupSodRollout : *
					% startGame : *
				StandardLevelIntro 048
					% bringUpSeedChooser : *
					% bringUpPowerupChooser : *
					% onChoosersDismissed : *
					% onStandardIntroComplete : *
					% showFastForwardOffAdvice : *
					$ m_bouncingArrowEffect : RtWeakPtr<RtObject>
					$ m_fastForwardTutorialActive : bool
					$ m_gameplayEnded : bool
					SproutPlantingMinigameModule 068
						% onViewZombiesComplete : *
						% onSproutPanEnd : *
						% bringUpSeedChooserForReals : *
						% onChoosersDismissedForReals : *
						$ m_sproutPlantingState : int32
						$ m_stateEntryTime : float
						$ m_sproutsRemaining : int32
						$ m_timeToPlantAllSprouts : float
						$ m_startedPlantingTime : float
						$ m_plantedSproutGridLocations : std::vector<SexyVector2>
					CamelMinigameModule 098
						$ m_animationMgr : RtWeakPtr<RtObject>
						$ m_bouncingArrowPos : SexyVector2
						$ m_bouncingArrow : RtWeakPtr<RtObject>
						$ m_state : int32
						$ m_cardState : int32
						$ m_cardStateBeginTime : float
						$ m_activeCard : RtWeakPtr<RtObject>
						$ m_secondCard : RtWeakPtr<RtObject>
						$ m_colorsUsed : std::vector<int>
						$ m_lastWaveCounter : int32
						$ m_totalCamelsTouched : int32
					IntroCinema 078
					PirateCannonTutorialIntro 050
						$ m_state : int32
						$ m_animationMgrPtr : RtWeakPtr<RtObject>
					LastStandMinigameModule 060
						% onViewZombiesComplete : *
						% showPrepareToPlant : *
						% onFinishShowPrepareToPlant : *
						% showZomboss : *
						$ m_lastStandState : int32
						$ m_stateEntryTime : float
					PowerupPurchaseIntro 048
						$ m_inIntro : bool
						$ m_fadeIn : bool
						$ m_fadeStart : float
					MagnifyingGrassTutorialIntro 058
						$ m_state : int32
						$ m_timeInCurrentState : float
						$ m_bouncingArrows : std::vector<RtWeakPtr<RtObject> >
					DangerRoomLevelIntro 048
					RailcartTutorialIntro 060
						$ m_state : int32
						$ m_animationMgr : RtWeakPtr<RtObject>
					PowerupTutorialIntro 0C0
						$ m_tutorialState : int32
						$ m_nextTutorialPortionState : int32
						$ m_stateEntryTime : float
						$ m_tutorialAttemptCount : int32
						$ m_firstTimeThroughDemo : bool
						$ m_currentPowerupName : std::string
						$ m_demoBarText : std::wstring
						$ m_currentZombieOffsets : std::vector<float>
						$ m_currentHandActions : std::vector<PowerupHandAction>
						$ m_currentPowerupUseAdvice : std::wstring
						$ m_waitingForIdleToFinish : bool
						$ m_bouncingArrow : RtWeakPtr<Effect_BouncingArrow>
						$ m_handAnimation : RtWeakPtr<PopAnimRig>
						$ m_tutorialZombies : std::vector<RtWeakPtr<Zombie> >
						$ m_currentHandAction : int32
						$ m_WFGameObject : RtWeakPtr<WizardFingerGameObject>
						$ m_throwSnowballs : bool
						$ m_nextSnowballLaunchTime : float
						$ m_shortenPowerupTutorial : bool
						% onAnimFinished : *
						% onAnimContinued : *
						- PowerupHandAction
							$ m_startPos : SexyVector2
							$ m_endPos : SexyVector2
							$ m_seconds : float
							$ m_actionName : std::string
							$ m_activationTime : float
							$ m_animationRateOverride : float
					BananaTutorialModule 060
						$ m_tutorialIsActive : bool
						$ m_tutorialZombie : RtWeakPtr<Zombie>
						$ m_tutorialBanana : RtWeakPtr<Plant>
						$ m_bouncingArrow : RtWeakPtr<Effect_BouncingArrow>
						% pointArrowAtBanana : *
						% onTutorialFinished : *
					MissileToeTutorialModule 060
						$ m_tutorialIsActive : bool
						$ m_tutorialZombie : RtWeakPtr<Zombie>
						$ m_tutorialMissileToe : RtWeakPtr<Plant>
						$ m_bouncingArrow : RtWeakPtr<Effect_BouncingArrow>
						% pointArrowAtMissileToe : *
						% onTutorialFinished : *
					PlantfoodPurchaseTutorialIntro 070
						$ m_animationMgr : RtWeakPtr<RtObject>
						$ m_bouncingArrows : std::vector<RtWeakPtr<RtObject> >
						% startDaveNarrative : *
					LevelOfTheDayIntro 048
					BeghouledIntro 048
					PlantfoodTutorialIntro 068
						$ m_animationMgr : RtWeakPtr<RtObject>
						% introduceDave : *
						% setupZombiesWaveOne : *
						$ m_state : int32
						$ m_stateTimer : float
						$ m_plantfoodUsed : bool
						$ m_bouncingArrows : std::vector<RtWeakPtr<RtObject> >
					PowerTileIntro 068
						$ m_state : int32
						$ m_animationMgr : RtWeakPtr<RtObject>
						% addFirstPeashooter : *
						% addSecondPeashooter : *
					ZombossBattleIntro 068
						% showZomboss : *
				TutorialLevelMines 050
					$ m_state : int32
					$ m_sodRollTimeStart : float
					$ m_sodRollTimeEnd : float
					$ m_stateTimerEnd : float
					$ m_animationMgr : RtWeakPtr<RtObject>
					% setupSodRollout : *
					% startGame : *
			LootOverrideModule 018
			OutroModule 018
				VictoryOutroModule 0A8
					$ m_state : int32
					$ m_collectable : RtWeakPtr<RtObject>
					$ m_outroStartTime : float
					$ m_flagCollectEndTime : float
					$ m_awardType : int32
					$ m_awardContext : int32
					$ m_awardCollectableType : std::string
					$ m_awardParam : std::string
					$ m_awardDialogTitle : std::string
					$ m_awardDialogDescription : std::string
					$ m_awardDialogImage : std::string
					$ m_pinataRemovalDelay : float
					ZombossVictoryOutroModule 0A8
				ZombiesAteYourBrainsOutro ?
					<NONE>
				EventsOutro 020
					% onEventMenuClick : *
					% onNextLevelClick : *
					% onRetryClick : *
					$ m_levelWasWon : bool
				JoustOutro 0B0
					% onResultsScreenDismissed : *
					% onWinStreakDismissed : *
					% onRetainRewardStreakDismissed : *
					% onRetainRewardStreakAccepted : *
					% onSeasonBarDismissed : *
				RiftOutro 058
					% onResultsScreenDismissed : *
					% onPerkScreenDismissed : *
					% onZombossResultsScreenDismissed : *
					$ m_state : int32
					$ m_attemptPlayed : int32
					$ m_levelWasWon : bool
					$ m_levelHasEnded : bool
					$ m_unlockedZomboss : bool
				LevelOfTheDayOutro 028
				FadeOutOutroModule ?
					<NONE>
			RailcartModule ?
				<NONE>
			SimpleZombieSpawnerModule 038
				$ m_nextSpawnTime : float
				$ m_nextPlantFoodZombie : int32
				$ m_remainingZombies : int32
				$ m_activeStage : int32
				$ m_chosenZombieTypes : std::vector<std::vector<RtWeakPtr<RtObject> > >
				BeghouledZombieSpawnerModule 038
			InvisighoulMinigame 018
			GlacierModule 018
			SunBombChallengeModule 028
				$ m_tutorialActive : bool
				$ m_totalExplodedBombs : int32
				$ m_consecutiveExplodedIneffectiveBombs : int32
			CowboyMinigameModule 038
				$ m_animationMgr : RtWeakPtr<RtObject>
				$ m_gameMode : int32
				$ m_state : int32
				$ m_zombieGates : std::vector<RtWeakPtr<RtObject> >
				$ m_delayStart : float
				% onViewZombiesComplete : *
			SeedBankModule 078
				$ m_seedBank : RtWeakPtr<RtObject>
				$ m_seedChooser : RtWeakPtr<RtObject>
				$ m_resourcesLoaded : bool
				$ mUsesSeedChooser : bool
				$ m_availableSeeds : std::vector<std::string>
				$ m_boostsApplied : std::vector<PlantBoostPair>
				$ m_selectionMethod : SeedBankSelectionMethod
				$ m_hasAppliedCombatBoosts : bool
				$ m_stagedPurchases : LevelPurchasesData
				$ m_completedPurchases : LevelPurchasesData
			JamZombiesModule 018
			ZombossBattleModule 040
				$ m_spawnZombossAtTime : float
				$ m_currentZombossMech : RtWeakPtr<RtObject>
				$ m_lastZombossMusicEventSent : std::string
				$ m_battleStarted : bool
				$ m_waitingForLastStand : bool
				$ ZombossBattleState : int32
				ZombossRiftBattleModule 040
					$ m_zombossPhaseReached : int32
			BoosteramaModule 018
			TutorialPeashooterDeathModule ?
				<NONE>
			LootOverrideZombossRiftModule 028
				$ LootTimeRemaining : std::vector<serializable_time_t>
			ZombiesDeadWinCon 020
				$ m_invulnZombieTargetTime : float
				$ m_invulnZombieFound : bool
			VaseBreakerModule 068
				$ m_minColumnIndex : int32
				$ m_maxColumnIndex : int32
				$ m_vaseConfigurations : std::vector<VaseConfiguration>
				$ m_vases : std::vector<RtWeakPtr<RtObject>>
				$ m_flowModule : RtWeakPtr<RtObject>
				$ m_arcadeModule : RtWeakPtr<RtObject>
				$ m_betweenEndlessWaves : bool
				$ m_haveStartedEndless : bool
				$ m_gridSquareExcludelist : std::vector<Point>
				- VaseConfiguration
					$ Contents : RtWeakPtr<RtObject>
					$ ColorByContentType : bool
			MinigameWhackAZombieModule 038
				$ m_Puddles : std::vector<RtWeakPtr<RtObject>>
				$ m_ReservedPuddles : std::vector<RtWeakPtr<RtObject>>
			ColumnMinigameModule 018
			InitialZombiePlacer 018
			BeghouledModule 0B0
				$ m_state : BeghouledGameplayState
				$ m_plantMap : std::map<std::string RT_COMMA BeghouledPlantType>
				$ m_upgradeMap : std::map<std::string RT_COMMA BeghouledPlantType>
				$ m_hasEnteredInitialize : bool
				$ m_hintFlashTime : float
				$ m_hintFlashCount : int32
				$ m_matchCounter : int32
				$ m_matchesThisMove : int32
				$ m_mouseCapture : bool
				$ m_mouseCaptureLoc : Point
				$ m_currentPlantUpgrades : std::vector<BeghouledPlantType>
				$ m_purchasedUpgradeCount : int32
				$ m_allowSwaps : bool
				$ m_swappingPlant1 : RtWeakPtr<Plant>
				$ m_swappingPlant2 : RtWeakPtr<Plant>
				$ m_isCascading : bool
				$ m_plantsToPlantfood : std::vector<RtWeakPtr<Plant>>
				$ m_plantsToDestroy : std::vector<RtWeakPtr<Plant>>
				$ m_plantfoodedPlantsToDestroy : std::vector<RtWeakPtr<Plant>>
				$ m_plantsInHorizontalMatches : std::vector<RtWeakPtr<Plant>>
				$ m_plantsInVerticalMatches : std::vector<RtWeakPtr<Plant>>
			ArcadeModule 018
				BeghouledArcadeModule ?
					<NONE>
				VaseBreakerArcadeModule ?
					<NONE>
			DangerRoomLevelDesignerModule A50
			BowlingMinigameModule 020
				$ m_FoulLine : int32
			LawnMowerModule 030
				$ m_respawnsRemaining : std::vector<int>
				$ m_purchaseButtons : std::vector<RtWeakPtr<LawnMowerPurchaseButton>>
			DangerRoomModule 0D8
				$ m_cachedDangerRoomInfo : DangerRoomInfo
				$ m_dangerRoomArmed : bool
				$ m_lawnMowerInRow : std::vector<uint8>
				$ m_lawnMowerInRowRetry : std::vector<uint8>
				$ m_purchasedReplay : bool
				$ m_EASquaredRetry : bool
				$ m_PlantFoodRetry : int8
				$ DangerRoomState : int32
			OttoBotBoardStateObserverLevelModule 018
			WaveDuplicatorModule 018
			ZombieModifierModule ?
				<NONE>
			WaveDistributorModule 020
				$ m_wavesAdded : int32
			ZombiesAteYourBrainsModule 020
				$ m_testingForZombieWin : bool
			LevelDifficultyScalingModule 018
		JamStageMechanic 040
			$ m_overridingJam : std::string
			$ m_lastJamPlayed : std::string
			$ m_numberOfJamOverrides : int32
			$ m_jamEffectsTop : RtWeakPtr<RtObject>
			$ m_jamEffectsBottom : RtWeakPtr<RtObject>
			% onTransitionStopped : *
		Armor 040
			$ m_propertySheetPtr : RtWeakPtr<ArmorPropertySheet>
			$ m_ownerZombiePtr : RtWeakPtr<Zombie>
			$ m_health : float
			$ m_maxHealth : float
			$ m_damageState : int32
			$ m_destroyed : bool
			$ m_scored : bool
			$ m_armorFlagsOverride : int32
			NewspaperArmor 040
				$ m_onFire : bool
		FlamethrowerGameObject 050
			$ m_touchLocation : SexyVector2
			$ m_effectFront : RtWeakPtr<RtObject>
			$ m_effectBack : RtWeakPtr<RtObject>
			$ m_active : bool
			$ m_powerupProps : RtWeakPtr<PowerupTypeFlamethrower>
			$ m_groundEffects : std::vector<RtWeakPtr<RtObject> >
		LevelModuleDifficultyUIProps 040
		PennyPerk 028
			$ m_perkLevel : int32
			$ m_props : RtWeakPtr<PennyPerkProperties>
			$ m_activated : bool
			PennyPerkHeavyWatering 038
				$ m_cooldownReductionPercent : float
				$ m_affectedFamily : std::string
			PennyPerkTrafficJam 028
				$ m_waveDelaySeconds : int32
			PennyPerkMoreScore 028
				$ m_additionalScorePercentage : float
			PennyPerkSunBreak 030
				$ m_numBurstsToSpawn : int32
				$ m_sunPerBurst : int32
				$ m_numExtraBurstsSpawned : int32
			PennyPerkZombieInhibitor 028
			PennyPerkTimedEffect 028
				$ m_nextUpdateTime : float
				PennyPerkGridIsYours 028
				PennyPerkShockwave 028
				PennyPerkPlantHealing 028
				PennyPerkBossBusterCannon 028
				PennyPerkPennyShield 028
				PennyPerkRandomFlick 028
				PennyPerkApplyCondition 028
				PennyPerkUtilityBelt 028
				PennyPerkMineIsYours 028
			PennyPerkSunBank 028
			PennyPerkQuickDelivery 028
				$ m_timeReductionMultiplier : float
		Shield 028
			$ m_hitpoints : float
			$ m_props : ShieldProps
			$ m_damageIndex : int32
			$ m_animRig : RtWeakPtr<PlantAnimRig_Shielded>
			RegeneratingShield 038
				$ m_regenerationDPS : float
				$ m_regenerationDelay : float
				$ m_lastDamageTime : float
				$ m_shieldActive : bool
			- ShieldProps
				$ Hitpoints : float
		AnimationController 030
			$ m_startTime : float
			$ m_endTime : float
			$ m_duration : float
			$ m_deleteOnEnd : bool
			$ m_description : std::string
			MowerRemover 040
				$ m_row : int32
				$ m_popSound : std::string
			CoinShowerSequence 050
				$ m_startPos : SexyVector3
				$ m_owner : RtWeakPtr<RtObject>
				$ m_coin : RtWeakPtr<RtObject>
			MoveBoard 040
				$ m_startXPos : int32
				$ m_startYPos : int32
				$ m_endXPos : int32
				$ m_endYPos : int32
				$ m_curveType : int32
			IntroBoardDispatch 038
				$ m_dispatchCommand : std::string
			ShakeBoard 038
				$ m_xAmount : int32
				$ m_yAmount : int32
			AnimMgrSendAudioEvent 038
				$ m_eventName : std::string
			ShowAdvice 460
				$ m_advice : std::wstring
				$ m_messageStyle : int32
				$ m_offset : Point
			PlayPAM 070
				$ m_state : int32
				$ m_animStoppedDelegate : RtReflectionDelegateBase
				$ m_pos : Point
				$ m_popAnimRig : RtWeakPtr<RtObject>
				% onAnimDone : *
			AnimateLawnMowers 030
				$ m_lawnMowerAnimTime : float
			AnimateNarration 058
				$ m_narrationID : std::string
			AddCoin ?
				<NONE>
			TimeEvent 060
				$ m_delegate : RtReflectionDelegateBase
		AnimationMgr 030
			$ m_animControllers : std::vector<RtWeakPtr<RtObject> >
			$ m_animControllersToAdd : std::vector<RtWeakPtr<RtObject> >
			$ m_time : float
			$ m_pause : bool
		BoardRegion 028
			$ m_region : FRect
			$ m_flags : int32
			BoardRegionTideWater ?
				<NONE>
			BoardRegionDrySand ?
				<NONE>
			BoardRegionDeepWater 030
				$ m_leftSplashMinDistance : float
				$ m_rightSplashMinDistance : float
			BoardRegionPowerUp ?
				<NONE>
		ZombieActionHandler 028
			$ m_definition : RtWeakPtr<RtObject>
			$ m_zombie : RtWeakPtr<RtObject>
			$ m_done : bool
			ZombossWalkActionHandler 048
				$ m_walkTarget : Point
				$ m_walkDirection : int32
				$ m_movementCurves : CurveCollection_Float
				ZombossDarkWalkActionHandler 050
					$ m_nextStepTime : float
				ZombossDinoWalkActionHandler 050
					$ m_nextStepTime : float
			ZombossJumpActionHandler 050
				$ m_movementCurves : CurveCollection_Float
				$ m_jumpTarget : Point
				$ m_jumpMidAir : bool
				$ m_jumpLandStartTime : float
				% onJumpStartAnimDone : *
			ZombossSpawnActionHandler 040
				$ m_zombiesToSpawn : std::vector<RtWeakPtr<RtObject>>
				$ m_zombiePortalAnim : RtWeakPtr<RtObject>
				$ m_portalOpenedTime : float
				$ m_spawnedZombie : bool
				% onPortalStartAnimDone : *
				% onPortalStopAnimDone : *
				% onZombiePortalOpenAnimDone : *
				% onZombiePortalCloseAnimDone : *
			ZombossRushActionHandler 048
				$ m_rushStartedRushing : bool
				$ m_rushAnimRateCurve : CurveSequence_Float
				$ m_movementCurves : CurveCollection_Float
				% onRushStompAnimDone : *
			ZombossFireActionHandler 038
				$ m_targetPoints : std::vector<Point>
				$ m_canLeaveRocketState : bool
				$ m_doneLaunching : bool
				% onRocketStartAnimDone : *
				% onRocketLaunchAnimDone : *
				ZombieOrbitalStrikeActionHandler 038
			ZombossSummonActionHandler 038
				$ m_zombiesToSpawn : std::vector<RtWeakPtr<RtObject>>
				$ m_startSpawningTime : float
				$ m_spawnedSoFar : int32
				% onSummonAnimationEnd : *
				ZombossSpawnDinoActionHandler 050
					$ m_dinosaurToSpawn : RtWeakPtr<RtObject>
					$ m_hasSpawnedDino : bool
					$ m_spawningRow : int32
					$ m_dinoSpawnTime : float
					% onSummonDinosaurAnimationEnd : *
			ZombieDropActionHandler 028
				% onCycleComplete : *
			ZombossFanPullActionHandler 038
				$ m_isSuctionOn : bool
				$ m_fanEndTime : float
				$ m_zombiesBeingPulled : std::vector<RtWeakPtr<Zombie>>
				% onFanPullStartEnded : *
				% onFanPullEndEnded : *
			ZombossSharkMinionAttackActionHandler 028
				% onSummonAnimDone : *
			ZombossBeachDiveActionHandler 038
				$ m_emergeTarget : Point
				$ m_submergedDuration : float
				$ m_emergeTime : float
				% onSubmergeAnimDone : *
				% onEmergeAnimDone : *
			ZombieDarkWizardZapActionHandler 028
				% onAnimationDone : *
			ZombossDarkFireBreathActionHandler 048
				$ m_fireRushCurves : CurveCollection_Float
				$ m_fireLastFilledColumn : int32
				$ m_startedFire : bool
				$ m_startedOutro : bool
				% onFireBreathStartEnded : *
				% onFireBreathEndEnded : *
			ZombossDarkLobFireballsActionHandler 040
				$ m_fireballsToLob : std::vector<Point>
				$ m_fireballSpawnsDragon : std::vector<int>
				% onFireLobStartEnded : *
				% onFireLobActionEnded : *
				% onFireLobEndEnded : *
			ZombossDinoLaserActionHandler 0A0
				$ m_fireRushCurves : CurveCollection_Float
				$ m_fireLastFilledColumn : int32
				$ m_startedFire : bool
				$ m_laserState : EyeLaserTracker
				$ m_beamRig : RtWeakPtr<RtObject>
				$ m_scorchRig : RtWeakPtr<RtObject>
				% onLaserStartEnded : *
				% onLaserEndEnded : *
			ZombossEightiesDropSpeakerActionHandler 030
				$ m_timeToDropSpeaker : float
				$ m_targetLoc : Point
			ZombossEightiesFireSpeakerRayActionHandler 028
				$ m_timeToClearLane : float
			ZombossEightiesSwapJamActionHandler 028
			ZombossSpawnGlacierColumnActionHandler 030
				$ m_columnToSpawn : int32
				$ m_currentRow : int32
				% onSpawnAnimationEnd : *
			ZombossCoverUpActionHandler 028
				% onRegenerateAnimationEnd : *
			ZombossHelmLostActionHandler 028
				% onRevealAnimationEnd : *
				$ m_revealEndTime : float
			ZombossFreezingWindRowActionHandler 028
				$ m_rowToFreeze : int32
				% onFreezeAnimationEnd : *
			ZombossDropZombieActionHandler 058
				$ m_zombiesToSpawn : std::vector<RtWeakPtr<const ZombieType> >
				$ m_lastDropPoint : Point
				$ m_movementCurves : CurveCollection_Float
				$ m_nextZombieSpawnTime : float
				$ m_currentState : int32
				% onSpawnAnimationEnd : *
			ZombossDropSandbagActionHandler 040
				$ m_movementCurves : CurveCollection_Float
				$ m_currentState : int32
				% onTriggerAnimationEnd : *
			ZombossImpCannonActionHandler 028
				$ m_endLoopingAt : float
				% onRocketStartAnimDone : *
				% onRocketLaunchAnimDone : *
				% onRocketLaunchFireAnimDone : *
			ZombieRomanHealerHealActionHandler 028
				% onAnimationDone : *
			ZombieRomanMedusaPetrifyActionHandler 028
				% onAnimationDone : *
			ZombiePushGriditemActionHandler 028
				% onAnimationDone : *
				$ m_hasPushed : bool
				- PushInProgress
					$ Griditem : RtWeakPtr<GridItem>
					$ StartPosition : SexyVector3
					$ EndPosition : SexyVector3
			ZombieWalkActionHandler 028
				% onWalkAnimationCycle : *
				$ m_isWalking : bool
			ZombieTimedActionHandler 028
				ZombieIdleActionHandler 028
			ZombiePlayAnimationActionHandler 028
				% onAnimationDone : *
				$ m_loopsRemaining : int32
			ZombieStunActionHandler 030
				% onCycleComplete : *
			ZombieProjectileActionHandler 028
				% onAnimationDone : *
				ZombieProjectileLaunchActionHandler 038
					% onAnimationDone : *
					ZombieInstantTargetAttackActionHandler 050
			ZombieDropZombiesOnBoardActionHandler 030
				% onAnimationDone : *
				$ m_timeToDrop : float
				$ m_timeToPlaySpawnAnimation : float
			ZombieTeleportActionHandler 048
				% onAnimationDone : *
			ZombieSpawnActionHandler 030
				$ m_targets : std::vector<RtWeakPtr<Plant>>
				% onAnimationDone : *
		- RtReflectionDelegateBase
			$ m_objectId : <void *>
			$ m_methodName : std::string
	WaveManager A08
		$ m_props : RtWeakPtr<RtObject>
		$ m_waves : std::vector<Wave>
		$ m_currentWave : int32
		$ m_nextWaveTime : float
		$ m_lastWaveTime : float
		$ m_currentWaveTotalHealth : int32
		$ m_nextWaveHealthThreshold : int32
		$ m_state : int32
		$ m_paused : bool
		$ m_forceSpawnNextWave : bool
		$ m_hasDynamicZombies : bool
		- Wave
			$ Type : int32
			$ Actions : std::vector<RtWeakPtr<WaveAction> >
	QuestTabCategories 014
		$ TabCategories : std::vector<std::string>
		$ CompletedQuestTabIdx : int32
	QuestThemeProps 010
		$ PanelIcon : std::string
	RtObject ?
		<NONE>
	RtObject ?
		<NONE>
	FrostInfo 008
		$ m_amount : float
	DraperLogEventSettings 010
		$ AdRequested : bool
		$ AdReceived : bool
		$ ImageRequested : bool
		$ ImageReceived : bool
		$ AdRequestCleanedUp : bool
		$ AdDisplayed : bool
		$ ActionTaken : bool
		$ AdClosed : bool
		$ EmptyAssetURL : bool
		$ FailedRequest : bool
		$ UnexpectedResponse : bool
		$ RequestTimedOut : bool
	ObjectTypeDescriptor 010
		$ TypeName : std::string
		LevelScoringRules 0B0
			$ TextFormat : ScoreTextFormat
			$ MultiplierBaseDelayToDecay : float
			$ MultiplierBaseReductionByMultiple : float
			$ MultiplierNextDelayToDecay : float
			$ MultiplierNextReductionByMultiple : float
			$ MultiplierVisibleDecayPeriod : float
			$ MultiplierDelayToDecayMinimum : float
			$ MultiplierMaximum : float
			$ MultiplierStart : float
			$ MultiplierAddWeightZombieLostHelm : float
			$ ScoreValueZombieLostHelmBase : float
			$ ScoreValueZombieLostHelmPctPerLevel : float
			$ ScoreValueZombieHelmPer300Health : float
			$ MultiplierAddWeightGravestoneDestroyed : float
			$ GravestoneDestroyed : float
			$ MultiplierAddWeightZombieKill : float
			$ MultiplierAddWeightZombossStageEnd : float
			$ ScoreValueZombieKillBase : float
			$ ScoreValueZombieKillPer300Health : float
			$ ScoreValueZombieKillPctPerLevel : float
			$ ScorePctZombieLawnmower : float
			$ ScoreDisplayModifiers : std::vector<ScoreDisplayModifier>
			$ MultiplierPlantDiedPenaltyFraction : float
			$ MultiplierPlantDiedPenaltyMinimum : int32
			$ ScoreValueZombieBlownOffBoardKillBase : float
			$ ScoreValueZombieBlownOffBoardKillPer300Health : float
			$ ScoreValueZombieShrunkKillBase : float
			$ ScoreValueZombieShrunkKillPer300Health : float
			$ ScoreValueZombieHypnotizedKillBase : float
			$ ScoreValueZombieHypnotizedKillPer300Health : float
			$ FrenzyMultiplierToActivate : float
			$ FrenzyMultiplier : float
			$ FrenzyDuration : float
			$ FrenzyCooldownDuration : float
			$ OverrideWidgetName : std::string
			$ DisplayScore : bool
			$ UseMultiplierMeter : bool
			$ ScoreMultiplierZombossOnly : bool
			- ScoreDisplayModifier
				$ ScoreMultiplierMinimum : float
				$ ScoreAwardDisplayTime : float
				$ ScoreFadeOutTime : float
				$ ScoreScale : float
				$ ScoreEndScale : float
				$ ScoreColor : Color
				$ ScoreZOffset : float
				$ ScoreYVelocity : float
		PlantMasteryProperties 038
			$ LevelXP : std::vector<int>
			$ LevelCoins : std::vector<int>
			$ AlmanacDataEntries : std::vector<PlantAlmanacDataEntry>
			$ LevelCap : int32
		PlantLevelStats 058
			$ PlantTier : std::vector<int>
			$ LevelXP : std::vector<int>
			$ LevelCoins : std::vector<int>
			$ FloatStats : std::vector<PlantLevelStatsFloat>
			$ StringStats : std::vector<PlantLevelStatsString>
			$ LevelCap : int32
			$ UsesLeveling : bool
			$ SeedPacketCost : int32
			- PlantLevelStatsBase
				$ Name : std::string
				$ Type : std::string
				$ SubType : std::string
				$ Context : std::string
				$ DistributionType : std::string
			- PlantLevelStatsFloat
				$ Values : std::vector<float>
			- PlantLevelStatsString
				$ Values : std::vector<std::string>
		PrimeText_PotentialTypeface 040
			$ Font : std::string
			$ Size : int32
			$ Color : Color::PredefinedColor
			$ Effect : TypefaceEffect
			$ EffectColor : Color::PredefinedColor
			$ Smooth : bool
			$ FontIfShrunk : std::string
		PrimeText_PotentialTypeface_Alias 01C
			$ Font : std::string
		PlantFamilyType 064
			$ DisplayText : std::string
			$ PacketIcon : std::string
			$ PacketIconColor : std::string
			$ PlantType : std::string
			$ PlantAnimResourceGroup : std::string
			$ PlantAnim : std::string
			$ PinataType : std::string
		PowerupType 070
			$ ClassName : std::string
			$ UIImageName : std::string
			$ BoardTimerColor : Color
			$ AudioOnPowerupSelected : std::string
			$ MetricName : std::string
			$ Cost : int32
			$ TotalTime : float
			$ TimePerUse : float
			$ CooldownTime : float
			$ HasInventory : bool
			$ TutorialEventName : std::string
			$ Enabled : bool
			$ IgnoresThreats : bool
			PowerupTypeWizardFinger 07C
				$ DamageDPS : float
				$ MinZombieDamagePctAsDPS : float
				$ MaxDamageDPS : float
			PowerupTypeVaseBreakerButter 074
				$ ButterDuration : float
			PowerupTypeVaseBreakerMove 084
				$ GridItemsWhichBlockMove : GridItemRestrictionSet
			PowerupTypeBeghouledShuffle 070
			PowerupTypeBeghouledShovel 070
			PowerupTypeSeedPacket 07C
				$ PlantTypeName : std::string
			PowerupTypeFlamethrower 0C8
				$ FlamethrowerRadiusInGridSquareWidths : float
				$ FlamethrowerNormalDPS : float
				$ FlamethrowerWarmingDPS : float
				$ WarmingDamageType : DamageTypeFlags
				$ TargetableGridItems : GridItemRestrictionSet
				$ WarmableGridItems : GridItemRestrictionSet
				$ GroundFlameDuration : float
				$ GroundFlameMaxCount : int32
				$ GroundFlameNormalDPS : float
				$ GroundFlameWarmingDPS : float
				$ GroundFlameWarmingDamageType : DamageTypeFlags
		ZombieSwapProperties 01C
			$ ZombieSwaps : std::vector<ZombieSwapDefinition>
			- ZombieSwapDefinition
				$ PostSwapType : std::string
				$ PreSwapTypes : std::vector<std::string>
		QuestTabCategoryData 05C
			$ QuestTabCategory : std::string
			$ QuestCategories : std::vector<std::string>
			$ TabLabel : std::string
			$ TabImageType : std::string
			$ TabSelectedImage : std::string
			$ TabUnselectedImage : std::string
			$ ShowTimer : bool
		ProbabilityTypeRecord 020
			$ TypeName : std::string
			$ Weight : int32
		ProbabilityTypeContainer 020
			$ Entries : std::vector<ProbabilityTypeRecord>
		LoadingTextAdviceBucketData 024
			$ Bucket : AdviceTextBucket
			$ Sorting : AdviceTextSorting
			$ AdviceText : std::vector<std::string>
		LevelOfTheDay_RewardItemType 040
			$ Award : AwardType
			$ AwardParam : std::string
			$ SubObject : std::string
			$ AwardQuantity : int32
			$ Probability : int32
			$ Category : std::string
		EffectObjectType 030
			$ EffectObjectClass : std::string
			$ ResourceGroups : std::vector<std::string>
			$ Properties : RtWeakPtr<EffectObjectPropertySheet>
		ToolPacketProps 06C
			$ ToolPacketClass : std::string
			$ ResourceGroup : std::string
			$ TypeToSpawn : std::string
			$ CursorPopAnim : std::string
			$ CursorAnim : std::string
			$ CursorOffset : SexyVector2
			$ PowerTileType : PowerTileClass
			$ SpawnOffset : SexyVector2
			$ SpawnSound : std::string
		BasicZombieWeights 020
			$ ZombieTypeName : std::string
			$ Weight : int32
		PlantType 0B8
			$ PlantFramework : std::string
			$ Properties : RtWeakPtr<PlantPropertySheet>
			$ AnimRigClass : std::string
			$ PopAnim : std::string
			$ Enabled : bool
			$ Premium : bool
			$ PlantResourceGroups : std::vector<std::string>
			$ PlantPreviewResourceGroups : std::vector<std::string>
			$ Families : std::vector<std::string>
			$ MasteryType : PlantMasteryFocusType
			$ HomeWorld : std::string
			$ AlmanacBackdropName : std::string
			$ SeedChooserVerticalOffset : float
			$ SeedChooserBigVerticalOffset : float
			$ SeedChooserBigHorizontalOffset : float
			$ SeedChooserBigScale : float
			$ BundleVerticalOffset : int32
			$ HideInPlantViewers : bool
			$ DenyPlantfoodCooldownReset : bool
			$ CannotBeImitated : bool
			$ HasShadow : bool
			$ HasStoreShadow : bool
			$ ShadowScale : float
			$ ShadowOffset : SexyVector2
			$ SeasonsVerticalOffset : float
			PlantTypeLilyPad ?
				<NONE>
			PlantTypeTangleKelp ?
				<NONE>
			PlantTypePeapod ?
				<NONE>
			PlantTypeGraveBuster ?
				<NONE>
			PlantTypeCeleryStalker ?
				<NONE>
			PlantTypeIntensiveCarrot ?
				<NONE>
			PlantTypePowerPlant ?
				<NONE>
			PlantTypeHotPotato 0E8
				$ TargetableGridItemTypes : GridItemRestrictionSet
				$ UnlockedTargetableGridItemTypes : GridItemRestrictionSet
				$ UnlockedWorldsAvailable : std::vector<std::string>
			PlantTypeChardGuard ?
				<NONE>
			PlantTypeGoldLeaf ?
				<NONE>
			PlantTypeHollyKnight ?
				<NONE>
			PlantTypeUltomato ?
				<NONE>
			PlantTypeTombTangler ?
				<NONE>
		HotUIColor 020
			$ ColorValue : Color
		HotUIColorAlias 01C
			$ Color : std::string
		StreamingMusicList 01C
			$ groups : std::vector<StreamingMusicGroup>
			- StreamingMusicGroup
				$ groupName : std::string
				$ fileIds : std::vector<std::string>
		SproutPlantWeights 020
			$ PlantTypeName : std::string
			$ Weight : int32
		PlantWeights 020
			$ PlantTypeName : std::string
			$ Weight : int32
		ZombieType 088
			$ ZombieClass : std::string
			$ AnimRigClass : std::string
			$ ResourceGroups : std::vector<std::string>
			$ AudioGroups : std::vector<std::string>
			$ Properties : RtWeakPtr<ZombiePropertySheet>
			$ PopAnim : std::string
			$ Placeable : bool
			$ HastyOnStart : bool
			$ IsBasicZombie : bool
			$ IsFemaleZombie : bool
			$ HideFromAlmanac : bool
			$ FlagType : ZombieFlagType
			$ HomeWorld : std::string
			$ DisplayTypeName : std::string
			$ AlmanacBackdropName : std::string
		CollectableType 0C4
			$ CollectableClass : std::string
			$ Dimensions : SexyVector2
			$ ExpireDuration : float
			$ FadeOutDuration : float
			$ BlinkOutDuration : float
			$ CollectOnExpire : bool
			$ SpawnSound : std::string
			$ GroundSound : std::string
			$ CollectSound : std::string
			$ PopAnim : std::string
			$ Animation : std::string
			$ StandaloneImage : std::string
			$ StandaloneGroup : std::string
			$ RenderOffset : SexyVector3
			$ Scale : float
			$ RewardRayScale : float
			$ RewardDialogTitle : std::string
			$ RewardDialogDescriptions : std::vector<std::string>
			$ RewardDialogImage : std::string
			$ RewardDoFancyCollect : bool
			CollectableTicketType 0C8
				$ TicketValue : int32
			CollectableSunType 0C8
				$ SunValue : int32
				CollectableSunBombType 0C8
			CollectableGemType 0C8
				$ GemValue : int32
			CollectableCoinType 0C8
				$ CoinValue : int32
			CollectableSeedPacketType 0C4
			CollectablePresentType 0C4
				$ IsShiny : bool
			CollectablePlantfoodType 0C4
			CollectableSeasonCrownType 0C8
				$ SeasonCrownValue : int32
			CollectableNoteType 0E8
				$ LoadGroup : std::string
				$ BackgroundImage : std::string
				$ NoteNarrative : std::string
			CollectableMoneyBagType 0D4
				$ ContentsType : std::string
				$ ContentsCount : int32
			CollectableUpgradeType 0D0
				$ Upgrade : std::string
			CollectableKeyType 0C4
			CollectableMintType 0C8
				$ MintValue : int32
			CollectableStarType 0C4
		GameFeatureType 048
			$ LocalizedName : std::string
			$ LocalizedInfo : std::string
			$ UpgradeImage : std::string
			$ HomeWorld : std::string
			$ Feature : GameFeature
			$ IsAPowerup : bool
			$ VisibleInAlmanac : bool
		ProductFilterProps 02C
			$ Type : std::string
			$ SubTypeFilters : std::vector<std::string>
			$ WarnEnsureGemsOnly : bool
			$ WarnEnsureMintsOnly : bool
			$ WarnEnsureRealMoneyOnly : bool
		PresentTable 020
			$ Shiny : bool
			$ Entries : std::vector<PresentTableEntry>
			- PresentTableEntry
				$ PresentType : std::string
				$ Weight : int32
		CreatureType 078
			$ CreatureClass : std::string
			$ AnimRigClass : std::string
			$ ResourceGroups : std::vector<std::string>
			$ AudioGroups : std::vector<std::string>
			$ Properties : RtWeakPtr<CreaturePropertySheet>
			$ PopAnim : std::string
			$ HomeWorld : std::string
			$ DisplayTypeName : std::string
			$ AlmanacBackdropName : std::string
		PinataType 084
			$ PinataPopAnim : std::string
			$ PinataResGroup : std::string
			$ PinataOffsets : SexyVector2
			$ Thumbnail : std::string
			$ ThumbnailResGroup : std::string
			$ QuestIcon : std::string
			$ SpineIcon : std::string
			$ SpineOpenedIcon : std::string
			$ HuntIcon : std::string
			$ CollectableType : std::string
		PresentType 038
			$ PopAnim : std::string
			$ Animation : std::string
			$ Image : std::string
			$ Scale : float
			PresentTypeCoin 03C
				$ CoinValue : int32
			PresentTypeKey 048
				$ WorldName : std::string
				$ KeyCount : int32
			PresentTypePowerupUse 048
				$ PowerupName : std::string
				$ NumUses : int32
			PresentTypeJunk 044
				$ JunkName : std::string
			PresentTypeSprout 038
		LevelMutatorTableProps 01C
			$ Tables : std::vector<MutatorTable>
			- MutatorGridEntry
				$ Grid : std::string
				$ Type : GridMapType
				$ Subtype : std::string
			- MutatorTable
				$ Level : int32
				$ LevelVersion : int32
				$ GridMaps : std::vector<MutatorGridEntry>
				$ Modules : std::vector<RtId>
				$ ModuleType : MutatorModuleType
		HolidayEventProperties 228
			$ Name : std::string
			$ PinataPopAnims : std::vector<std::string>
			$ BigPinataAnimation : std::string
			$ BigPinataOffset : int32
			$ UseHolidayAssetSwaps : bool
			$ SwapAssetsForLODsOnly : bool
			$ BigPinataScaleWithCenterOverride : float
			$ MegaPinataHitCount : int32
			$ PinataSounds : RtWeakPtr<PinataSoundData>
			$ Banners : std::vector<HolidayEventBannerData>
			$ LevelBackgroundGroup : std::string
			$ LevelBackgroundImagePrefix : std::string
			$ LevelMowerSwapGroup : std::string
			$ LevelMowerSwapAnim : std::string
			$ ConfettiEffect : std::string
			$ BannerProgressPinataImage : std::string
			$ BannerProgressMegaPinataImage : std::string
			$ BannerHeaderTextColor : Color
			$ PinataPartyPianoMusicStartEvent : std::string
			$ PinataPartyPianoMusicStopEvent : std::string
			$ AudioSwitch : std::string
			$ ProgressiveBigAwardHeaderImage : std::string
			$ ProgressiveBigAwardHeaderText : std::string
			$ ProgressiveBigAwardDescriptionText : std::string
			$ ProgressiveBigAwardHeaderTextColor : std::string
			$ ProgressiveAwardHeaderImage : std::string
			$ ProgressiveAwardHeaderText : std::string
			$ ProgressiveAwardDescriptionText : std::string
			$ ProgressiveAwardHeaderTextColor : std::string
			$ ProgressiveBigAwardFooterImage : std::string
			$ ProgressiveBigAwardFooterText : std::string
			$ ProgressiveBigAwardFooterDescriptionText : std::string
			$ ProgressiveBigAwardFooterTextColor : std::string
			$ ProgressiveAwardFooterImage : std::string
			$ ProgressiveAwardFooterText : std::string
			$ ProgressiveAwardFooterDescriptionText : std::string
			$ ProgressiveAwardFooterTextColor : std::string
			$ BigPinataProgressImage : std::string
			$ PinataProgressImage : std::string
			$ AwardsBannerHeaderImage : std::string
			$ AwardsBannerHeaderText : std::string
			$ AwardsBannerDescriptionText : std::string
			$ AwardsBannerHeaderTextColor : std::string
			$ AwardsBannerFooterImage : std::string
			$ AwardsBannerFooterText : std::string
			$ AwardsBannerFooterDescriptionText : std::string
			$ AwardsBannerFooterTextColor : std::string
			$ ZombieSwapList : RtWeakPtr<ZombieSwapListData>
			- HolidayEventBannerData
				$ Name : std::string
				$ ReadyBackgroundStretchImage : std::string
				$ ReadyBackgroundTileImage : std::string
				$ ReadyBackgroundDrawTechnique : PinataStyleChooser::EventBackgroundDraw
				$ ReadyLeftImage : std::string
				$ ReadyRightImage : std::string
				$ ReadyHeaderText : std::string
				$ ReadyDescriptionText : std::string
				$ UpcomingBackgroundStretchImage : std::string
				$ UpcomingBackgroundTileImage : std::string
				$ UpcomingBackgroundDrawTechnique : PinataStyleChooser::EventBackgroundDraw
				$ UpcomingLeftImage : std::string
				$ UpcomingRightImage : std::string
				$ UpcomingHeaderText : std::string
				$ UpcomingDescriptionText : std::string
		ZombieSwapListData 01C
			$ Value : std::vector<ZombieSwapData>
			- ZombieSwapData
				$ ZombieTypeName : std::string
				$ SwapZombieTypeName : std::string
		PinataSoundData 04C
			$ PinataDropSound : std::string
			$ PinataBreakSound : std::string
			$ PinataConsolationBreakSound : std::string
			$ MegaPinataDropSound : std::string
			$ MegaPinataBreakSound : std::string
		HowToPlayScreenData 020
			$ Entries : std::vector<HowToPlayScreenEntry>
			$ Version : int32
			- HowToPlayScreenEntry
				$ ImageId : std::string
				$ Subtitle : std::string
				$ Description : std::string
		PlantAlmanacData 01C
			$ AlmanacDataEntries : std::vector<PlantAlmanacDataEntry>
			- PlantAlmanacDataEntry
				$ StatType : BoardEntityStatType
				$ StatValue : BoardEntityStatValue
				$ StatName : std::string
				$ StatNameAlias : std::string
				$ TypeStringID : std::string
				$ ValueStringID : std::string
				$ LevelToUnlock : int32
				$ ReqScaledPropKey : std::string
				$ NumberFormat : PlantAlmanacDataEntry::AlmanacNumberFormat
		HotUIConfig 01C
			$ ReloadableMenus : std::vector<std::string>
		StoreTryPreviewItem 028
			$ ItemTypeName : std::string
			$ LevelPreview : std::string
		GridItemType 048
			$ GridItemClass : std::string
			$ ResourceGroups : std::vector<std::string>
			$ AudioGroups : std::vector<std::string>
			$ Properties : RtWeakPtr<GridItemPropertySheet>
		SettingsNewsData 01C
			$ NewsDataEntries : std::vector<NewsEntry>
			- NewsLocalizedEntry
				$ Text : std::string
				$ DownloadableBanner : std::string
			- NewsEntry
				$ Date : uint64
				$ HeaderIcon : std::string
				$ HeaderScale : float
				$ LocalizedData : std::map<std::string RT_COMMA NewsLocalizedEntry>
		DifficultyScalingRules 07C
			$ LevelFactorBaseDelayToDecay : float
			$ LevelFactorBaseReductionByMultiple : float
			$ LevelFactorNextDelayToDecay : float
			$ LevelFactorNextReductionByMultiple : float
			$ LevelFactorVisibleDecayPeriod : float
			$ LevelFactorDelayToDecayMinimum : float
			$ LevelFactorMaximum : float
			$ LevelFactorStart : float
			$ LevelFactorAddWeightZombieLostHelm : float
			$ LevelFactorAddWeightGravestoneDestroyed : float
			$ LevelFactorAddWeightZombieKill : float
			$ LevelFactorAddWeightZombossStageEnd : float
			$ LevelFactorPlantDiedPenaltyFraction : float
			$ LevelFactorPlantDiedPenaltyMinimum : float
			$ LevelFactorDecayContinuesToNextFactor : bool
			$ LevelFactorAddPctReductionPerLevel : float
			$ LevelFactorDecayProgressAmount : float
			$ LevelFactorAddWeightZombieKillPctIncreasePerLevel : float
			$ LevelFactorLawnmowerTriggeredPenaltyFraction : float
			$ LevelFactorLawnmowerDiedPenaltyMinimum : float
			$ LevelFactorFriendlyZombieDiedPenaltyFraction : float
			$ LevelFactorFriendlyZombieDiedPenaltyMinimum : float
			$ PlantDiedOverrides : std::vector<DifficultyScalingOverrideList>
			- DifficultyScalingOverrideList
				$ ScalePct : float
				$ Types : std::vector<std::string>
		CostumeItemType 048
			$ CostumeID : int32
			$ PlantTypeName : std::string
			$ LayerName : std::string
			$ PopAnimName : std::string
			$ CostumeResourceGroup : std::vector<std::string>
			$ CostumeType : PlantCostumeType
	OldWorldMapMapping 014
		$ Mapping : std::vector<OldWorldMapMappingEntry>
		- UnlockItem
			$ Feature : GameFeature
			$ Upgrade : GameFeature
			$ Plant : std::string
		- OldWorldMapMappingEntry
			$ WorldId : int8
			$ EventId : int8
			$ StarTotal : int8
			$ ParentId : int8
			$ Challenge : bool
			$ NarrationID : std::string
			$ Tutorial : MapTutorialState
			$ DataName : std::string
			$ UnlockItems : std::vector<UnlockItem>
	LevelModuleManager 168
		$ m_modules : std::vector<RtWeakPtr<RtObject> >
		$ m_loadedResourceGroups : std::vector<std::string>
	ToolPacketData ?
		<NONE>
		ToolPacketData_Dummy ?
			<NONE>
		ToolPacketData_PowerTile ?
			<NONE>
		ToolPacketData_Projectile ?
			<NONE>
	WeightedOptionStubForRt ?
		<NONE>
		- StringWeightedOption
			$ Value : std::string
			$ Weight : float
		- IntWeightedOption
			$ Value : int32
			$ Weight : float
		- FloatWeightedOption
			$ Value : float
			$ Weight : float
	TimeLineReflectionExposer ?
		<NONE>
		- TimeLineKeyFrame_Int
			$ Value : int32
			$ Time : float
			$ InterpToNextMethod : int32
		- TimeLineTrack_Int
			$ m_initialValue : int32
			$ m_keyFrames : std::vector<TimeLineKeyFrame_Int>
		- TimeLineKeyFrame_Float
			$ Value : float
			$ Time : float
			$ InterpToNextMethod : int32
		- TimeLineTrack_Float
			$ m_initialValue : float
			$ m_keyFrames : std::vector<TimeLineKeyFrame_Float>
		- TimeLineKeyFrame_SexyVector3
			$ Value : SexyVector3
			$ Time : float
			$ InterpToNextMethod : int32
		- TimeLineTrack_SexyVector3
			$ m_initialValue : SexyVector3
			$ m_keyFrames : std::vector<TimeLineKeyFrame_SexyVector3>
		- CurveSegment_Float
			$ StartValue : float
			$ EndValue : float
			$ StartTime : float
			$ EndTime : float
			$ InterpMethod : int32
		- CurveSequence_Float
			$ m_segments : std::vector<CurveSegment_Float>
		- CurveCollection_Float
			$ m_sequenceNames : std::vector<std::string>
			$ m_sequences : std::vector<CurveSequence_Float>
		- CurveSegment_SexyVector3
			$ StartValue : SexyVector3
			$ EndValue : SexyVector3
			$ StartTime : float
			$ EndTime : float
			$ InterpMethod : int32
		- CurveSequence_SexyVector3
			$ m_segments : std::vector<CurveSegment_SexyVector3>
		- CurveCollection_SexyVector3
			$ m_sequenceNames : std::vector<std::string>
			$ m_sequences : std::vector<CurveSequence_SexyVector3>
		- CurveSegment_Color
			$ StartValue : Color
			$ EndValue : Color
			$ StartTime : float
			$ EndTime : float
			$ InterpMethod : int32
		- CurveSequence_Color
			$ m_segments : std::vector<CurveSegment_Color>
		- CurveCollection_Color
			$ m_sequenceNames : std::vector<std::string>
			$ m_sequences : std::vector<CurveSequence_Color>
		- TimeLineEvent
			$ Time : float
			$ ReflectableEvent : RtReflectionDelegateBase
		- TimeLine
			$ m_currTime : float
			$ m_events : std::deque<TimeLineEvent>
	GameStateMgr ?
		<NONE>
	NewWorldMapConversionMapping 01C
		$ Mapping : std::vector<NewWorldMapConversionEntry>
		$ KeygateRewardMapping : std::vector<NewWorldMapKeygateConversionEntry>
		- NewWorldMapConversionEntry
			$ OldMapWorldId : int32
			$ OldMapEventId : int32
			$ OldMapStarIndex : int32
			$ NewMapLevel : std::string
		- NewWorldMapKeygateConversionEntry
			$ OldKeygateName : std::string
			$ RewardName : std::string
	PVZGameInfo 028
		$ GameName : std::string
		$ BuildInfo : std::string
		% Uptime_CmdPropertyGet : *
		# Uptime : uint32
	QuestSlotInfo 014
		$ Slot : QuestSlot
		$ LimitingGroup : std::string
	QuestSlotGroup 040
		$ QuestTheme : std::string
		$ GroupID : std::string
		$ Slots : std::vector<QuestSlotInfo>
		$ MaxPicks : int32
		$ MinPicks : int32
		$ ReducePicksByVisibleQuests : bool
		$ AvailableDuringTutorial : bool
		$ AvailableInInitial : bool
		$ RequiredToggle : std::string
	QuestMgr 078
		$ LevelsRequiredToUnlock : int32
		$ RecycleCountPerDay : int32
		$ Quests : std::vector<RtEmbeddedPtr<QuestData RT_COMMA PVZDB::TABLE_QUESTS>>
		$ SlotPickingGroups : std::vector<QuestSlotGroup>
		$ SlotDisplayOrder : std::vector<QuestSlot>
		$ SlotPickSortByDistance : std::vector<QuestSlot>
		$ RecyclableSlots : std::vector<QuestSlot>
		$ LimitingMgr : RtWeakPtr<QuestLimitingMgr>
	SaveGameHeader 0B0
		$ LevelName : std::string
		$ LevelSource : int32
		$ LevelRandomIndex : int32
		$ LODSchedule : int32
		$ ResourceGroups : std::vector<std::string>
		$ PlayerID : std::string
		$ PlayerIndex : int32
		$ HeaderVersion : int32
		$ SlotName : std::string
		$ ProfileVersion : int32
		$ AppVersion : PVZVersion
		$ RSBVersion : PVZVersion
		$ StartingResolution : uint32
		$ LevelCRC : uint32
		$ IsFullRSB : bool
	WorldData 078
		$ m_mapPieces : std::vector<MapEventItem>
		$ m_eventList : std::vector<MapEventItem>
		$ m_worldName : std::string
		$ m_creationTime : uint64
		$ m_resGroupID : uint16
		$ m_boundingRect : Rect
		$ m_worldId : uint8
		$ m_version : uint8
		- MapEventItem
			$ m_position : SexyVector2
			$ m_imageID : uint16
			$ m_eventType : MapEventType
			$ m_eventSubType : MapEventSubType
			$ m_name : std::string
			$ m_toggleName : std::string
			$ m_dataString : std::string
			$ m_unlockedFrom : std::string
			$ m_visibleFrom : std::string
			$ m_parentEvent : std::string
			$ m_displayText : std::string
			$ m_completedNarrationID : std::string
			$ m_worldMapTutorial : MapTutorialState
			$ m_worldMapTutorialVisibleWhen : WorldMapEventStatus
			$ m_isArtFlipped : bool
			$ m_levelNodeType : LevelNodeType
			$ m_drawLayer : int8
			$ m_rotationAngle : int16
			$ m_rotationRate : float
			$ m_scaleX : float
			$ m_scaleY : float
			$ m_parallaxLayer : int8
			$ m_eventId : uint16
	WorldResourcesData 03C
		$ ID : uint16
		$ ResGroups : std::vector<std::string>
		$ ImagePrefix : std::string
		$ AnimationPrefix : std::string
		$ AnimationDetails : std::vector<AnimationDetailInfo>
		- AnimationDetailInfo
			$ AnimNumber : int16
			$ AnimReplayDelayTimeMin : float
			$ AnimReplayDelayTimeMax : float
			$ UsesRasterizedImagesInAnim : bool
	WorldMapList 03C
		$ MapList : std::vector<MapListNode>
		$ MapResourceGrid : std::vector<std::vector<uint8> >
		$ MapResourceGridWidth : int32
		$ MapResourceGridHeight : int32
		$ MapResourceGridOffsetX : int32
		$ MapResourceGridOffsetY : int32
		- MapListNode
			$ MapName : std::string
			$ UnlockedFrom : std::string
			$ EntryPoint : std::string
			$ PreviewEventPanel : std::string
			$ PreviewResGroup : std::string
			$ LastLevel : std::vector<std::string>
			$ ComingSoon : bool
			$ Hidden : bool
			$ UniverseIconOffset : Point
			$ Disabled : bool
			$ UseNightSpiral : bool
			$ DrawWorldName : bool
			$ IsRiftWorld : bool
			$ Difficulty : int32
			$ WorldResources : WorldResourcesData
	StartupConfig 01C
		$ Level : std::string
		$ Cheats : std::vector<std::string>
	MarketScheduleProductConfig 060
		$ Category : std::string
		$ Priority : MarketDisplayPriority
		$ PromotionGroup : std::string
		$ Sku : std::vector<std::string>
		$ Visuals : std::set<MarketScheduleVisuals>
		$ AdditionalSegment : std::string
		$ SmartKey : std::string
		$ SoftCurrency : MarketPurchaseCurrency
		$ SoftCost : int32
		$ MaxPurchase : int32
		$ SoftCostPerPurchase : int32
	GameFeatureUsageNode 010
		$ gf : int32
		$ tot : uint32
		$ pay : uint32
	None ?
		<NONE>
	Tutorial 01C
		ZenGardenTutorial 020
			ZenGardenBeeTutorial 020
			TutorialWithArrows 024
				ZenGardenBoostTutorial 024
				ZenGardenMarigoldTutorial 024
	None ?
		<NONE>
	DraperSaveData 0B8
		$ lspt : uint64
		$ lzgpt : uint64
		$ lodpt : uint64
		$ lpt : uint64
		$ lpurt : uint64
		$ lpurmt : uint64
		$ tcnt : int32
		$ gp : uint64
		$ sp : uint64
		$ cpttl : float
		$ idx : uint64
		$ conw : uint32
		$ conl : uint32
		$ pwrz : std::vector<GameFeatureUsageNode>
		$ jcw : uint32
		$ jcl : uint32
		$ jsw : uint32
		$ jsl : uint32
		$ jll : uint32
		$ rcw : uint32
		$ rcl : uint32
		$ rczw : uint32
		$ rczl : uint32
		$ rze : uint32
		$ jgh : DraperSaveGameHistory
		$ rgh : DraperSaveGameHistory
		- DraperGameHistoryNode
			$ DateTime : uint64
			$ Victory : bool
		- DraperSaveGameHistory
			$ History : std::vector<DraperGameHistoryNode>
	OutroManager 004
		% VerifyEntries : bool
	ClassBucketFilter 010
		$ Buckets : std::vector<ClassRestrictionSet>
	CrazyNPC 0B8
	PVZGameState 004
		RiftDashboardLoadingState 00C
		JoustDashboardLoadingState 018
		PVZHotUIGameState 010
			JoustLandingScreenState 010
			JoustTournamentEndScreenState 010
			GameModeSelectionScreenState 010
	RtObject ?
		<NONE>
	PlayerInfo 308
		$ v : int32
		$ n : std::wstring
		$ rs : uint32
		$ i : int32
		$ l : std::string
		$ mfd : bool
		$ lsc : uint32
		$ ltfet : uint64
		$ tc : int32
		$ c : int32
		$ s : int32
		$ g : int32
		$ t : int32
		$ m : int32
		$ pf : int32
		$ zs : int32
		$ pt : int32
		$ tei : std::vector<ThymedEventInfo>
		$ p : std::vector<int32>
		$ kz : std::vector<int32>
		$ wm : std::vector<SavedWorldMapEventData>
		$ wmed : std::vector<WorldCompletionData>
		$ gf : std::vector<int32>
		$ tp : int32
		$ ne : std::vector<int32>
		$ ct : std::vector<int>
		$ dri : std::vector<DangerRoomInfo>
		$ hter : uint8
		$ fnet : std::vector<int32>
		$ cos : std::vector<int32>
		$ wsk : std::vector<WorldSpecificKeys>
		$ pr : std::vector<PowerupRecord>
		$ tyi : TreasureYetiInfo
		$ pbi : std::vector<PlantBoostInfo>
		$ gpi : std::vector<GrowingPlantInfo>
		$ fpi : std::vector<FullGrownPlantInfo>
		$ upsi : std::vector<int32>
		$ zgb : uint64
		$ spr : int32
		$ cntpg : int32
		$ pli : std::vector<PlantBoostInfo>
		$ um : bool
		$ lmz : float
		$ izg : bool
		$ lizg : std::string
		$ hclod : int32
		$ hal : int32
		$ nrfhalod : int32
		$ alod : int32
		$ cclod : int32
		$ spi : int32
		$ alodet : uint64
		$ rplod : bool
		$ alodar : int32
		$ mcs : int32
		$ dli : DifficultyLevelInfo
		$ ap : std::vector<ArcadePackProgress>
		$ puc : std::vector<PowerUpCollectionProgress>
		$ cqi : std::vector<QuestProfileInfo>
		$ qlgi : std::vector<QuestLimitingGroupPickInfo>
		$ plis : std::vector<PlantLevelInfo>
		$ apcpids : std::set<std::string>
		$ sc : int32
		$ sid : uint64
		$ suasgp : bool
		$ rid : uint64
		$ rsid : uint64
		$ rzw : uint32
		$ rza : uint32
		$ rzc : uint32
		$ rzd : std::vector<int32>
		$ rpd0 : uint64
		$ rpd1 : uint64
		$ rpd2 : uint64
		$ rznt : uint64
		$ rzfc : int32
		$ ldco : uint64
		$ cllt : uint64
		$ cllst : uint64
		$ cli : std::vector<CalendarLoginInfo>
		- SavedWorldMapEventData
			$ W : uint8
			$ E : uint16
			$ S : int32
			$ C : int32
			$ N : int32
			$ G : int32
		- WorldEventCompletionData
			$ i : uint16
		- WorldCompletionData
			$ w : uint8
			$ e : std::vector<WorldEventCompletionData>
			$ r : bool
		- PowerupRecord
			$ n : std::string
			$ i : int32
		- WorldSpecificKeys
			$ wn : std::string
			$ kc : int32
		- PresentRecord
			$ PresentTableName : std::string
			$ Seed : uint32
			$ TimeAwarded : uint32
			$ TimeOpened : uint32
		- DangerRoomInfo
			$ wn : std::string
			$ cl : int32
			$ hl : int32
			$ pfco : uint8
			$ l : uint16
			$ sb : std::vector<int>
			$ ts : int64
			$ pl : int32
			$ hr : bool
			$ hm : bool
		- TreasureYetiInfo
			$ wml : std::string
			$ lst : int64
			$ nst : int64
		- QuestProfileInfo
			$ i : uint32
			$ s : int32
			$ t : int64
		- QuestLimitingGroupPickInfo
			$ i : uint32
			$ l : int64
		- DifficultyLevelInfo
			$ r : std::vector<short>
			$ s : int16
			$ l : int16
		- GrowingPlantInfo
			$ p : int32
			$ t : int64
			$ k : int32
			$ s : int32
			$ rt : uint8
			$ rq : int32
			$ g : uint8
		- FullGrownPlantInfo
			$ p : int32
			$ c : int32
		- PlantBoostInfo
			$ p : int32
			$ c : int32
			$ a : uint8
			$ b : std::vector<int32>
			$ t : int64
		- ArcadeLevelProgress
			$ i : uint32
			$ p : uint32
			$ s : uint32
		- ArcadePackProgress
			$ i : uint32
			$ lp : std::vector<ArcadeLevelProgress>
		- PowerUpProgress
			$ i : uint32
			$ p : uint32
		- PowerUpCollectionProgress
			$ i : uint32
			$ up : std::vector<PowerUpProgress>
		- PlantLevelInfo
			$ p : int32
			$ l : int32
			$ x : int32
			$ m : int32
		- CalendarLoginInfo
			$ c : int32
			$ cml : int32
			$ cll : int32
			$ lt : CalendarLoginType
		- ThymedEventInfo
			$ c : int32
			$ e : int32
			$ p : int32
			$ cb : uint32
			$ ae : uint64
	ZenGardenTutorialArrowManager 018
		$ m_bouncingArrow : RtWeakPtr<RtObject>
	CustomAction ?
		<NONE>
		WorldMapAction ?
			<NONE>
			ActionAllowUserInput ?
				<NONE>
			ActionShowQueuedFocus ?
				<NONE>
			ActionShowRiftZombossLevelSelect ?
				<NONE>
			ActionShowRiftHowToPlay ?
				<NONE>
			ActionDelay ?
				<NONE>
			ActionCenterCameraOnPoint ?
				<NONE>
			ActionShowAdvice ?
				<NONE>
			ActionUnlockNodesSequence ?
				<NONE>
			ActionShowZombossHologram ?
				<NONE>
			ActionUnlockDangerRoomSequence ?
				<NONE>
			ActionCheckForAndSpawnYeti ?
				<NONE>
			ActionShowQuestFeatureItemPopup ?
				<NONE>
			ActionBackButtonPress ?
				<NONE>
			ActionLoadCurrentWorldAssets ?
				<NONE>
			ActionEnterTutorial ?
				<NONE>
			ActionStartNarrativeID ?
				<NONE>
			ActionRunDelegate ?
				<NONE>
			ActionFulfillUnexpectedTransactions ?
				<NONE>
			ActionShowRewardDialog ?
				<NONE>
		CalendarUnlockAction ?
			<NONE>
		ShowCalendarAction ?
			<NONE>
		ShowEventsMenuAction ?
			<NONE>
		ShowEventsComingSoonAction ?
			<NONE>
		ShowRewardDialogAction ?
			<NONE>
		ShowOfferwallAction ?
			<NONE>
	QueuedActions ?
		<NONE>
	DamagePhase 020
		$ StartAtHealthPercent : float
		$ Animation : std::string
		$ Layers : std::vector<std::string>
	DamageLifetime 010
		$ Phases : std::vector<DamagePhase>
	Quest 060
		$ Status : int32
		$ QuestID : std::string
		$ QuestIssueDate : int64
		$ QuestIssueDateString : std::string
		$ QuestToastProgression : int32
		$ QuestCompletionTime : int64
		$ QuestLastPlayTime : int64
		$ m_thisPtr : RtWeakPtr<RtObject>
		$ QuestEndTimeDisplayFallback : int64
		WinSingleJoustMatchQuest 060
		CompleteLevelNodeQuestBase 060
			PlantQuest 060
			LevelQuest 060
				$ m_maxCompletionCount : int32
		UnlockWorldQuest 060
		HuntQuest 070
			$ m_currentActiveQuests : std::vector<RtWeakPtr<Quest>>
			$ m_numTimesRefreshedWithGems : int32
			$ m_numTimesRefreshedWithAds : int32
		PinataHuntChildQuest 070
			$ m_award : GeneralAwardSet
		EpicQuest 078
			$ m_currentActiveQuest : RtWeakPtr<Quest>
			$ m_lastCompletedUniqueID : std::string
			$ m_lastDisplayedCurrentQuestNumber : int32
			MultiStageQuest 080
				$ m_lastCompletedQuest : RtWeakPtr<Quest>
			ThymedEventQuest 078
		ChosenZombiesKillCountQuest 068
			$ m_killCountRemaining : std::vector<ZombieKillCount>
			FeastivusQuest 068
		BaseActionCountQuest 060
			$ m_actionCountRemaining : int32
			PlayXDistinctWorldYLevelsQuest 070
				$ m_recordedLevels : std::vector<std::string>
			ActionInflictZombieConditionQuest 060
			SeedPacketsCollectedQuest 060
			AdsViewedQuest 060
			ClaimXJoustFreePlaysQuest 060
			KnockbackZombiesQuest 060
			BeatXAdventureLevelsQuest 070
				$ m_recordedLevels : std::vector<std::string>
			PlantSeedInZenGardenQuest 060
			CollectPlantInZenGardenQuest 060
			BuyItemFromZenGardenStoreQuest 060
		ChosenPlantsLevelQuest 060
		RiftQuestCompleteAnyLevel 060
		PassiveQuest 060
		PlayLevelOfTheDayQuest 060
		DailyActivitiesQuest 060
		BuyProductQuest 060
		CompleteRandomLevelQuest 068
			$ m_randomLevel : std::string
		LevelGenLevelQuest 068
			$ m_generatedLevelName : std::string
		CompleteLevelXTimesQuest 060
			$ m_numberOfLevelWins : int32
		ChallengeLevelQuest 070
			$ m_awardSet : GeneralAwardSet
			JoustPracticeLevelQuest 070
	JoustIncompleteMatchData 05C
		$ MatchID : std::string
		$ OpponentID : std::string
		$ LevelSeed : std::string
		$ League : int32
		$ RewardStreakAction : std::string
		$ CrownStreakAction : std::string
		$ DifficultyAction : std::string
		$ PostedMatchCompleteDone : bool
		$ WinRatio : float
		$ CrashState : JoustMatchCrashState
	StringRestrictionSet 014
		$ ListType : RestrictionSetType
		$ List : std::vector<std::string>
		PlantRestrictionSet 014
			PlantingRestrictionSet 018
				$ BlockedPlantingReason : PlantingReason
		GridItemRestrictionSet 014
		BoardEntityRestrictionSet 014
		ZombieRestrictionSet 014
		ClassRestrictionSet 014
	SlackWebHookPostAttachmentField 020
	SlackWebHookPostAttachment 06C
	SlackWebHookPost 04C
	ZenGardenTutorialManager 018
	CheatUILine ?
		<NONE>
		CheatUILineSeparator ?
			<NONE>
		CheatUILineToggle ?
			<NONE>
		CheatUILineCommand ?
			<NONE>
		CheatUITearAwayLine ?
			<NONE>
		CheatUILineFolder ?
			<NONE>
	CheatUITearAwaySaveState 018
		$ Path : std::string
		$ Location : Point
	EntityComponent_GroundEffect 018
		$ m_type : GroundEffectType
		$ m_effect : RtWeakPtr<RtObject>
	BoundedRandomRegion 06C
		$ LowerBound : BoundedLine
		$ UpperBound : BoundedLine
		- RealNumber
			% Value_CmdPropertyGet : *
			% Value_CmdPropertySet : *
			# Value : std::string
		- BoundedLine
			$ SlopeCoefficient : float
			$ YIntercept : float
			$ LowerLimit : RealNumber
			$ UpperLimit : RealNumber
	ThymedEventActionData 02C
		$ Levels : std::vector<std::string>
		$ Param : std::string
		$ NumActions : int32
		$ Prizes : std::vector<ThymedEventPrizeNode>
		LevelThymedEventActionData 02C
		- ThymedEventPrizeNode
			$ NodeNum : int32
			$ CompletionAwards : GeneralAwardSet
			$ InfoText : std::string
	ThymedEventAction 018
		$ m_data : RtWeakPtr<ThymedEventActionData>
		$ m_track : ThymedEventTrack
		LevelThymedEventAction 018
	ActiveQuestsSaveHeader 024
		$ PlayerID : std::string
		$ PlayerIndex : int32
		$ HeaderVersion : int32
		$ SlotName : std::string
	PlayerInfoLocalEventData 00C
		$ PlayCount : int32
		$ EventID : int32
	PlayerInfoLocalWorldData 014
		$ EventData : std::vector<PlayerInfoLocalEventData>
		$ WorldID : int32
	ArcadeLastPlayData 030
		$ ModeID : std::string
		$ LevelID : std::string
		$ LastPlayTime : uint64
		$ LastPlayWave : int32
		$ Status : LastPlayStatus
	PlayerInfoLocalSaveData 1C8
		$ ProfileIndex : int32
		$ HasPurchasedExtraDRCard : bool
		$ LastLevelPlayed : std::string
		$ LastMonetizationDate : std::string
		$ LastCashPurchaseObjectType : std::string
		$ LastCashPurchasePrice : float
		$ LastGemPurchaseObjectType : std::string
		$ LastGemPurchasePrice : int32
		$ LastMintPurchaseObjectType : std::string
		$ LastMintPurchasePrice : int32
		$ LastCoinPurchaseObjectType : std::string
		$ LastCoinPurchasePrice : int32
		$ TotalUsdSpentOnConsumables : float
		$ PurchasingSkus : std::vector<std::string>
		$ LastPlantObtained : std::vector<std::string>
		$ WorldData : std::vector<PlayerInfoLocalWorldData>
		$ CostumeChoices : std::vector<int32>
		$ NumberOfLODLevelsCompleted : int32
		$ DangerRoomRandomSeed : int32
		$ ArcadeLastPlays : std::vector<ArcadeLastPlayData>
		$ LastDateQuestWasRecycled : int64
		$ NumberOfQuestsRecycledOnLastDate : int32
		$ m_lastSeedChooserPlants : std::vector<std::string>
		$ m_favoriteSeedChooserPlants : std::vector<std::string>
		$ m_lastStandLoadout : LastStandSavedLoadout
		$ EASquaredCoinButtonUse : int32
		$ EASquaredGemButtonUse : int32
		$ EASquaredPennyFuelButtonUse : int32
		$ EASquaredTicketButtonUse : int32
		$ EASquaredMintButtonUse : int32
		$ EASquaredPowerupAdUse : int32
		$ EASquaredPinataAdUse : int32
		$ EASquaredLODReplayUID : int32
		$ LastStoreOpenedTime : int64
		$ LastStoreTablesUpdatedTime : int64
		$ LastDailyGiftNotificationSentTime : uint64
		$ MarketEventCache : MarketScheduleEventCacheData
		$ LastPennyFuelUpdatedTimeDelta : uint64
		$ PennyFuelUpdateStartTime : uint64
		$ LastZPSUpdatedTimeDelta : uint64
		$ ZPSUpdateStartTime : uint64
		$ ZombossUnlockedTime : uint64
		$ ThymedEventEnergyUpdatedTimes : std::vector<serializable_time_t>
		$ GameFlags : std::vector<LocalProfileGameFlag>
		$ MultiPurchaseData : MarketMultiPurchaseTracker
		$ CurrentEventTrack : int32
		$ NewestViewedThymedEvent : uint64
		- LastStandSavedLoadoutPlant
			$ Type : std::string
			$ GridX : int32
			$ GridY : int32
			$ IsImitater : bool
		- LastStandSavedLoadout
			$ Plants : std::vector<LastStandSavedLoadoutPlant>
			$ Level : std::string
		- MarketMultiPurchaseEntry
			$ Sku : std::string
			$ EventEndDateTime : uint64
			$ TimesPurchased : int32
		- MarketMultiPurchaseTracker
			$ m_entries : std::vector<MarketMultiPurchaseEntry>
	GlobalSaveData 0E0
		$ m_unlockedPlants : std::vector<int>
		$ m_unlockedGameFeatures : std::vector<int>
		$ m_unlockedMapGates : std::vector<std::string>
		$ m_unknownSkus : std::vector<std::string>
		$ m_seenSaleItems : std::vector<std::string>
		$ m_purchasedNonconsumableTransactions : std::set<std::string>
		$ m_totalCashSpentOnNonconsumables : float
		$ m_lastAgeResetTime : uint64
		$ m_localTimeOffsetFromServerTime : int64
		$ m_lastCDNReceivedPushKey : std::string
		$ m_lastCDNReceivedPushVersion : std::string
		$ m_inboxLatestMessageReadTime : uint64
		$ m_highestSeenJoustHowToPlayVersion : int32
		$ m_nextJoustFreePlayTime : uint64
		$ m_localJoustHighScore : uint64
		$ m_numTimesRewardStreakRetained : int32
		$ m_hasBeenPromptedForAccountLinking : bool
		$ m_incompleteJoustMatches : std::vector<JoustIncompleteMatchData>
		$ m_incompleteRiftMatches : std::vector<RiftIncompleteMatchData>
		$ m_hasGivenConsentForTargetedAdsAndOffers : bool
		$ m_hasGivenConsentForEATargetedAdsAndOffers : bool
		$ m_hasBeenPromptedForTargetedAdsAndOffers : bool
		$ m_hasBeenAutomaticallyDeniedForAppTracking : bool
		$ m_lastAppTrackingStatus : AppTrackingStatus
		$ m_seasonNextDayPopupTime : uint64
	RtObject ?
		<NONE>
	GrowthStates ?
		<NONE>
		- SunshroomGrowthStates
			$ TimeToGrowInSeconds : float
			$ Amount : int32
			$ MinSpread : float
	StingerLocationData ?
		<NONE>
		- StingerLocationStateData
			$ Location : std::string
			$ RightmostColumn : int32
			$ Hitpoints : int32
	None ?
		<NONE>
	Reflection::RSymbol ?
		<NONE>
		Reflection::RType ?
			<NONE>
			Reflection::RCustomType ?
				<NONE>
			Reflection::RNamedType ?
				<NONE>
				Reflection::RUnknownNamedType ?
					<NONE>
				Reflection::RClass ?
					<NONE>
				Reflection::RClassRef ?
					<NONE>
				Reflection::REnum ?
					<NONE>
				Reflection::REnumRef ?
					<NONE>
			Reflection::RSimpleType ?
				<NONE>
			Reflection::RReferenceType ?
				<NONE>
			Reflection::RFunctionType ?
				<NONE>
		Reflection::RClassMember ?
			<NONE>
			Reflection::RField ?
				<NONE>
			Reflection::RProperty ?
				<NONE>
			Reflection::RMethod ?
				<NONE>
			Reflection::REvent ?
				<NONE>
			Reflection::RAncestor ?
				<NONE>
		Reflection::REnumMember ?
			<NONE>
		Reflection::RAttribute ?
			<NONE>
	BaseResource ?
		<NONE>
		Image 058
			$ mFilePath : std::string
			$ mWidth : int32
			$ mHeight : int32
			$ mNumRows : int32
			$ mNumCols : int32
			$ mAtlasImage : RtWeakPtr<Image>
			$ mAtlasStartX : int32
			$ mAtlasStartY : int32
			$ mAtlasEndX : int32
			$ mAtlasEndY : int32
			% summary_CmdPropertyGet : *
			# summary : std::string
			MemoryImage ?
				<NONE>
				DeviceImage ?
					<NONE>
		RenderEffectDefinition ?
			<NONE>
		PopAnim ?
			<NONE>
		SoundResource ?
			<NONE>
		GenericResFile ?
			<NONE>
		SoundBank ?
			<NONE>
			WwiseSoundBank ?
				<NONE>
				DecodedSoundbank ?
					<NONE>
		PrimeFont ?
			<NONE>
		Font ?
			<NONE>
			SysFont ?
				<NONE>
			ImageFont ?
				<NONE>
	RtClass ?
		<NONE>
		ResourceClass ?
			<NONE>
		RtProtocolClass ?
			<NONE>
		ResourceInfoClass ?
			<NONE>
	RtProtocol ?
		<NONE>
		RtIdProtocol ?
			<NONE>
	WidgetContainer 050
		Widget 084
			WorldMap_PinataHuntBar ?
				<NONE>
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
				Widget 084
				Widget 084
			Widget 084
			Widget 084
			Widget 084
			None ?
				<NONE>
			Widget 084
			Widget 084
			Widget 084
			WorldMap ?
				<NONE>
			DebugConsole ?
				<NONE>
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			HotUIAdaptor 0B0
				AdaptorMultiPurchase 108
					AdaptorMultiPurchaseRandom 110
				AdaptorCalendarEntry 150
				AdaptorGeneric1ButtonDialog 100
				AdaptorJoustAvatarSelectionScreen 0E0
				AdaptorRiftPerkProgressScreen 0E0
				AdaptorEventsResultsScreen 160
				AdaptorJoustNetworkIssue 0B8
				AdaptorRiftZombossLevelSetup 0EC
				AdaptorJoustLeagueInfoScreen 0BC
				AdaptorEpicQuestNode 0D4
				ArcadeTooltipAdaptor 0D8
				OfferwallOfferDialog 0B8
				AdaptorSecurityGourdDialog 100
				AdaptorPointOfLossDialog 120
					AdaptorJoustPointOfLossDialog 138
				AdaptorJoustLeagueInfoEntry 0BC
				AdaptorZenGardenHUD 0B4
				OfferwallUnavailableDialog 0BC
				AdaptorRiftPerkProgressionDisplay 0F8
				AdaptorThymedEventNode 110
				AdaptorJoustLeaderboard 0E8
				AdaptorPerkInfoWidget 0E0
					$ m_perkIcon : RtWeakPtr<Image>
				AdaptorRiftLevelDifficultyEntry 0C0
				AdaptorGameModeSelectionScreen 0D8
				JukeboxWidget 0EC
					$ m_songList : std::vector<SongListElement>
					$ m_isSongInProgress : bool
					$ m_isPaused : bool
					$ m_isShuffle : bool
					$ m_isLooping : bool
					$ m_stopSongEventName : std::string
					$ m_songEndTime : float
					$ m_songTimeRemaining : float
				AdaptorConversionDialog 0CC
				AdaptorJoustMatchLoadingScreen 0F8
				AdaptorProgressiveRegistrationSuccess 0D8
				AdaptorSelectedPerksWidget 0E4
					$ m_selectedPerksButtons : std::vector<HotUIButton*>
					$ m_selectedPerks : std::vector<std::string>
				AdaptorIdentityReconciliationEntry 0F4
				AdaptorCalendarUnlock 0B0
				AdaptorJoustSeasonsProgressBar 118
				AdaptorJoustSeasonSchedule 0BC
				AdaptorRiftZombossProgress 140
				AdaptorCalendarWidget 0F4
				AdaptorMarket 15C
					AdaptorMarket_QuickStore 188
						AdaptorMarket_QuickStore_PennyFuel 188
							AdaptorMarket_QuickStore_EventEnergy 1B0
								$ m_currentTrack : ThymedEventTrack
				AdaptorThymedEventWidget 104
				AdaptorCloudConnectionError 0B0
				AdaptorZombossRiftPointOfLossDialog 108
				AdaptorAccountLink 110
				AdaptorRiftDifficultyList 0EC
				AdaptorGenericProgressDialog 0E8
				AdaptorProgressiveRegistrationRegisterEmail 0D8
				AdaptorJoustResultsScreen 178
				AdaptorPerkLibraryWidget 0BC
				AdaptorProgressiveRegistrationLoginWithCode 0D8
				AdaptorCarouselDotEntry 0B8
				AdaptorJoustSeasonsLogo 0B0
				AdaptorJoustWinStreakDialog 0E8
				AdaptorSyncSpinner 0B8
					AdaptorEmailRegistrationSpinner 0E0
					AdaptorAgeValidationSpinner 0B8
				AdaptorQuestEntry 148
				AdaptorZenGardenBoostSelector 0E8
					$ m_boostSelectedDelegate : RtReflectionDelegateBase
				AdaptorWorldPreviewScreen 0F4
				AdaptorPauseMenu 0B0
				AdaptorSimpleTutorialDialog 0CC
				AdaptorRiftDifficultyInfoWidget 0E8
				AdaptorUniversalRewardsScreen 130
				AdaptorJoustSeasonEvent 0D8
				AccountDeletionResultDialog 0B4
				AdaptorAccountDeletionNetworkIssue 0B8
				AccountDeletionDialog 0B4
				AdaptorQuestCategoryWidget 100
				AdaptorZenGardenTooltip 0CC
				OfferwallFirstTimeUserDialog 0B4
				AdaptorJoustWinStreakDisplayEntry 0EC
				AdaptorProgressiveRegistrationError 0C8
				AdaptorLevelZombieResistanceItem 0CC
				AdaptorJoustSeasonPrizesDisplay 0BC
				AdaptorJoustSeasonProgressWidget 0B8
				AdaptorIdentityReconciliationSelector 0D0
				AdaptorFeatureToUnlockDialog 0F4
				AdaptorJoustSeasonRewardDialog 0B0
				AdaptorRiftResultsScreen 0F8
				AdaptorRiftPerkProgressionDisplayEntry 0E8
				AdaptorRiftLevelSetup 0D8
				AdaptorIdentityReconciliationIntro 0B4
				AdaptorIdentityReconciliationSaving 0B4
				AdaptorClaimAllRewardsWidget 0E8
				HotUIAdaptorTableViewCell 0B4
				AdaptorGeneric2ButtonDialog 120
				MiniGameLevelPackSublayoutAdaptor 130
				AdaptorJoustWinStreakDisplay 0B4
				AdaptorRiftFirstClearRewardEntry 0C0
				AdaptorIdentityReconciliationWarning 0B8
				AdaptorJoustSeasonEventSmall 0BC
				ArcadePowerUpTemplateAdaptor 0CC
				AdaptorJoustScreen 0C4
				ArcadeMenuDialog 0B4
					MiniGameDialogAdaptor 13C
					ArcadeMenuRootDialog 0D0
				AdaptorJoustRewardStreakRetentionDialog 118
				AdaptorPerkProgressionWidget 0B8
				AdaptorJoustSeasonPrizeDisplayEntry 0BC
					AdaptorJoustSeasonGrandPrizeDisplayEntry 0BC
				AdaptorThymedEventNetworkIssue 0BC
				AdaptorPerkSelectionDialog 0F0
				AdaptorMarketItem 140
					AdaptorRvPlantRentalItem 148
					AdaptorMarketItemBundle 150
				AdaptorMarketItemSpacer 0B4
				AdaptorMarketItemNavigationButton 0B4
				AdaptorThymedEventLevelSpine 0C4
				AdaptorTabbedInterface 0F8
					AdaptorJoustTabbedInterface 0F8
					AdaptorPerkLibraryTabbedDialog 0F8
					AdaptorCalendarTabbedDialog 110
					AdaptorQuestTabbedDialog 140
					AdaptorThymedEventTabbedDialog 118
				AdaptorAgeGate 0C4
				AdaptorJoustPlayMeterHUD 0F0
					$ m_leftScore : uint64
					$ m_rightScore : uint64
					$ m_previousCenterScoreRatio : float
					$ m_desiredCenterScoreRatio : float
					$ m_currentCenterScoreRatio : float
					$ m_startScoreRatioLerp : float
					$ m_endScoreRatioLerp : float
					$ m_isPulseWinningScoreEnabled : bool
				AdaptorDifficultyModifierFullScrollWidget 0C8
				HowToPlayScreen 108
					AdaptorJoustHowToPlayScreen 108
					AdaptorRiftHowToPlayScreen 108
				AdaptorRvPlantRentalDialog 0DC
				AdaptorAccountLinkEntry 100
				AdaptorStreakCalendarSinkDialog 0E0
				AdaptorJoustPlayerProfileScreen 0B4
				RewardDialogNetworkError 0B0
				AdaptorCarouselDots 0C4
				AdaptorJoustTourneyResultsScreen 0F8
				AdaptorLevelZombieResistanceFloater 0BC
				AdaptorAgeGateAgreementUpdate 0B0
				AdaptorZPSMeter 0D8
				AdaptorBasicDialog 268
				AdaptorJoustLeaderboardEntry 0D4
				AdaptorRiftScreen 0B0
				AdaptorUniversalRewardsScreenItem 0DC
				AdaptorMultiPurchaseItemSpacer 0B4
				AdaptorMultiPurchaseItem 0FC
				AdaptorJoustMatchmakingScreen 110
				AdaptorClaimAllRewardsEntryWidget 0D0
			AlmanacWidget ?
				<NONE>
			Widget 084
			Widget 084
			LevelOfTheDay_ProgressiveAwardDialog ?
				<NONE>
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			HotUIWidget 160
				$ m_layoutDirty : bool
				$ m_anchorDirty : bool
				$ m_thisPtr : RtWeakPtr<HotUIWidget>
				$ m_propertySheetPtr : RtWeakPtr<HotUIWidgetProperties>
				$ m_anchorDescriptorOverriden : bool
				$ m_anchorDescriptor : AnchorDescriptor
				$ m_anchorParent : RtWeakPtr<HotUIWidget>
				$ m_anchorChildren : std::vector<RtWeakPtr<HotUIWidget>>
				$ m_resourceGroupsLoaded : bool
				$ m_resourceGroups : std::vector<std::string>
				$ m_darkenBackgroundPct : float
				HotUITouchLayer 180
				HotUIAnim 1C0
					HotUIAnimPath 1E0
					HotUIPlantAnim 200
				HotUIVerticalList 198
				HotUIHorizontalList 160
					HotUIHorizontalGrid 160
				HotUIJoustCrownCollectionEffect 190
				HotUILayoutList 170
					HotUIButtonList 170
					HotUITableView 188
				HotUISeedPacketList 170
				HotUISeedPacket 280
				HotUILabel 190
				HotUIPowerUpButton 168
				HotUIToUIWidgetTouchLayer 170
				HotUIButton 1E8
					HotUIToggleButton 1E8
					HotUIPurchaseButton 1E8
						HotUIStorePurchaseButton 1E8
					HotUITableViewCell 1E8
				HotUITextEntry 170
				HotUISlider 1A8
				HotUIScrollWidget 170
				HotUIClickableLink 178
				HotUIProgressBar 180
				HotUIMessageBar 168
				HotUIPrefab 168
				HotUIImage 1C0
					HotUIMultiImage 1D8
					JukeboxProgressBarWidget 1C0
						$ m_finishedPercent : float
					HotUIImageBorder 1D0
			Widget 084
				Widget 084
				Widget 084
				Widget 084
					Widget 084
					Widget 084
				Widget 084
				Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
				Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			None ?
				<NONE>
				Widget 084
				Widget 084
			Widget 084
			Widget 084
			PlantXpRewardWidget ?
				<NONE>
			PVZ2UIPinataRewardDialog ?
				<NONE>
			DooberManager ?
				<NONE>
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Board 590
				$ m_gridSizeX : int32
				$ m_gridSizeY : int32
				$ m_boardState : int32
				$ m_level : std::string
				$ m_previousLevel : std::string
				$ m_levelNumber : int32
				$ m_levelRandomIndex : int32
				$ m_levelStartTime : float
				$ m_gameplayResources : std::vector<std::string>
				$ m_plantfoodCount : uint8
				$ m_plantfoodCountMax : uint8
				$ m_pendingPresentRewards : std::vector<PresentRecord>
				$ m_boardRegions : std::vector<RtWeakPtr<RtObject>>
				$ m_finalDestroyedZombiePosition : SexyVector3
				$ m_sunCurrency : int32
				$ m_levelPreviouslyCompleted : bool
				$ m_activeStarIndex : int32
				$ m_lootRollStats : LootStats
				$ m_reasonPlayEnded : int32
				$ m_destinationAfterBoard : int32
				$ m_sunSpawningSuppressed : bool
				$ m_plantGrowthAndDecayPaused : bool
				$ m_plantsCanAttack : bool
				$ m_manualPlantsActive : bool
				$ m_animationMgr : RtWeakPtr<RtObject>
				$ m_pushedAnimationMgr : std::vector<RtWeakPtr<RtObject> >
				$ m_pauseGameplayObjects : bool
				$ m_onlyDrawFade : bool
				$ m_gridItemsEnabled : bool
				$ m_mowerLaunchesLeft : int32
				$ m_replayCost : int32
				$ m_bloverBlowAwayZombieCount : int32
				$ m_collectableID_SunFromSky : std::string
				$ m_boardHolidayEventName : std::string
				$ m_jestersSpawnedInLevel : bool
				$ m_jestersJuggled : bool
				$ m_wizardsSpawnedInLevel : bool
				$ m_wizardsSheepedPlant : bool
				$ m_tangleKelpedCount : int32
				$ m_thawedIceblockCount : int32
				$ m_zombieKilledByNonBanana : bool
				$ m_zombieKilledByBanana : bool
				$ m_plantedNonPhatBeet : bool
				$ m_plantedPhatBeet : bool
				$ m_fishermanSpawnedInLevel : bool
				$ m_fishermanHookedAPlant : bool
				$ m_weaselTouchedASliderTile : bool
				$ m_weaselSpawnedInLevel : bool
				$ m_troglobitePushMinGridX : int32
				$ m_troglobitePushedABlock : bool
				$ m_excavatorSpawnedInLevel : bool
				$ m_excavatorShoveledAPlant : bool
				$ m_goldLeafsPlantedCount : int32
				$ m_tentSpawnCount : int32
				$ m_thymewarpPlantedCount : int32
				$ m_boomboxSpawnedInLevel : bool
				$ m_boomboxBoomed : bool
				$ m_dinoSpawnedInLevel : bool
				$ m_dinoAffectedAZombie : bool
				$ m_newspaperBurned : bool
				$ m_allStarSpawned : bool
				$ m_allStarDestroyedPlant : bool
				$ m_tRexKillCount : int32
				$ m_watchedAdForPowerup : bool
				$ m_fastForwardState : int32
				$ m_track : ThymedEventTrack
				$ m_eventsEndOfLevelFlag : int32
				$ m_layerEffectFastForward : BoardLayerEffect
				- LootStats
					$ LootTotalCount : int32
					$ SilverCount : int32
					$ GoldCount : int32
					$ DiamondCount : int32
					$ PowerupCount : int32
					$ NoKeyCount : int32
					$ KeyCount : int32
			LevelOfTheDayRewardDialog ?
				<NONE>
			Widget 084
				Widget 084
			Widget 084
			PVZGameStateTopHUDController 088
				JoustLandingScreenTopHUD 088
				GameModeSelectionScreenTopHUD 098
			Widget 084
			Widget 084
				Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
				Widget 084
				Widget 084
				Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
				Widget 084
			Widget 084
				Widget 084
			LevelOfTheDayRewardBanner ?
				<NONE>
			LevelOfTheDayRewardFooter ?
				<NONE>
			CrazyNPCManager ?
				<NONE>
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			PVZ2UILevelUpgradeDialog ?
				<NONE>
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			Widget 084
			SpaceSpiralWidget 0A0
			Widget 084
			Widget 084
			Widget 084
			Widget 084
				Widget 084
					Widget 084
					Widget 084
				Widget 084
				Widget 084
				Widget 084
					Widget 084
					Widget 084
						Widget 084
						Widget 084
					Widget 084
					Widget 084
					Widget 084
				Widget 084
				Widget 084
					Widget 084
						Widget 084
							Widget 084
				Widget 084
			Widget 084
				Widget 084
				Widget 084
			Widget 084
				Widget 084
			Widget 084
		WidgetContainer 050
	ResourceInfo ?
		<NONE>
		ResourceInfoTypes::ImageRes ?
			<NONE>
		ResourceInfoTypes::SoundRes ?
			<NONE>
		ResourceInfoTypes::SoundBankRes ?
			<NONE>
		ResourceInfoTypes::DecodedSoundBankRes ?
			<NONE>
		ResourceInfoTypes::FontRes ?
			<NONE>
		ResourceInfoTypes::PrimeFontRes ?
			<NONE>
		ResourceInfoTypes::PopAnimRes ?
			<NONE>
		ResourceInfoTypes::RenderEffectRes ?
			<NONE>
		ResourceInfoTypes::GenericResFileRes ?
			<NONE>
	ResourceGroup ?
		<NONE>